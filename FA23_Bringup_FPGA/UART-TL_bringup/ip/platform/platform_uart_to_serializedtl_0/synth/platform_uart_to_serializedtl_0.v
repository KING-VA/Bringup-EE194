// platform_uart_to_serializedtl_0.v

// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module platform_uart_to_serializedtl_0 (
		input  wire        clock,                   //        clock_reset.clk
		input  wire        reset,                   //              reset.reset
		input  wire        axi_ios_0_aw_ready,      // altera_axi4_master.awready
		input  wire        axi_ios_0_w_ready,       //                   .wready
		input  wire        axi_ios_0_b_valid,       //                   .bvalid
		input  wire [3:0]  axi_ios_0_b_bits_id,     //                   .bid
		input  wire [1:0]  axi_ios_0_b_bits_resp,   //                   .bresp
		input  wire        axi_ios_0_ar_ready,      //                   .arready
		input  wire        axi_ios_0_r_valid,       //                   .rvalid
		input  wire [3:0]  axi_ios_0_r_bits_id,     //                   .rid
		input  wire [63:0] axi_ios_0_r_bits_data,   //                   .rdata
		input  wire [1:0]  axi_ios_0_r_bits_resp,   //                   .rresp
		input  wire        axi_ios_0_r_bits_last,   //                   .rlast
		output wire        axi_ios_0_aw_valid,      //                   .awvalid
		output wire [3:0]  axi_ios_0_aw_bits_id,    //                   .awid
		output wire [36:0] axi_ios_0_aw_bits_addr,  //                   .awaddr
		output wire [7:0]  axi_ios_0_aw_bits_len,   //                   .awlen
		output wire [2:0]  axi_ios_0_aw_bits_size,  //                   .awsize
		output wire [1:0]  axi_ios_0_aw_bits_burst, //                   .awburst
		output wire        axi_ios_0_aw_bits_lock,  //                   .awlock
		output wire [3:0]  axi_ios_0_aw_bits_cache, //                   .awcache
		output wire [2:0]  axi_ios_0_aw_bits_prot,  //                   .awprot
		output wire [3:0]  axi_ios_0_aw_bits_qos,   //                   .awqos
		output wire        axi_ios_0_w_valid,       //                   .wvalid
		output wire [63:0] axi_ios_0_w_bits_data,   //                   .wdata
		output wire [7:0]  axi_ios_0_w_bits_strb,   //                   .wstrb
		output wire        axi_ios_0_w_bits_last,   //                   .wlast
		output wire        axi_ios_0_b_ready,       //                   .bready
		output wire        axi_ios_0_ar_valid,      //                   .arvalid
		output wire [3:0]  axi_ios_0_ar_bits_id,    //                   .arid
		output wire [36:0] axi_ios_0_ar_bits_addr,  //                   .araddr
		output wire [7:0]  axi_ios_0_ar_bits_len,   //                   .arlen
		output wire [2:0]  axi_ios_0_ar_bits_size,  //                   .arsize
		output wire [1:0]  axi_ios_0_ar_bits_burst, //                   .arburst
		output wire        axi_ios_0_ar_bits_lock,  //                   .arlock
		output wire [3:0]  axi_ios_0_ar_bits_cache, //                   .arcache
		output wire [2:0]  axi_ios_0_ar_bits_prot,  //                   .arprot
		output wire [3:0]  axi_ios_0_ar_bits_qos,   //                   .arqos
		output wire        axi_ios_0_r_ready,       //                   .rready
		output wire        io_uart_txd,             //               uart.writeresponsevalid_n
		input  wire        io_uart_rxd,             //                   .beginbursttransfer
		output wire        io_serial_in_ready,      //             serial.serial_in_ready
		output wire        io_serial_out_valid,     //                   .serial_out_valid
		output wire        io_serial_out_bits,      //                   .serial_out
		output wire        io_dropped,              //                   .led
		input  wire        io_serial_in_valid,      //                   .serial_in_valid
		input  wire        io_serial_in_bits,       //                   .serial_in
		input  wire        io_serial_out_ready      //                   .serial_out_ready
	);

	UARTToSerializedTL uart_to_serializedtl_0 (
		.clock                   (clock),                   //   input,   width = 1,        clock_reset.clk
		.reset                   (reset),                   //   input,   width = 1,              reset.reset
		.axi_ios_0_aw_ready      (axi_ios_0_aw_ready),      //   input,   width = 1, altera_axi4_master.awready
		.axi_ios_0_w_ready       (axi_ios_0_w_ready),       //   input,   width = 1,                   .wready
		.axi_ios_0_b_valid       (axi_ios_0_b_valid),       //   input,   width = 1,                   .bvalid
		.axi_ios_0_b_bits_id     (axi_ios_0_b_bits_id),     //   input,   width = 4,                   .bid
		.axi_ios_0_b_bits_resp   (axi_ios_0_b_bits_resp),   //   input,   width = 2,                   .bresp
		.axi_ios_0_ar_ready      (axi_ios_0_ar_ready),      //   input,   width = 1,                   .arready
		.axi_ios_0_r_valid       (axi_ios_0_r_valid),       //   input,   width = 1,                   .rvalid
		.axi_ios_0_r_bits_id     (axi_ios_0_r_bits_id),     //   input,   width = 4,                   .rid
		.axi_ios_0_r_bits_data   (axi_ios_0_r_bits_data),   //   input,  width = 64,                   .rdata
		.axi_ios_0_r_bits_resp   (axi_ios_0_r_bits_resp),   //   input,   width = 2,                   .rresp
		.axi_ios_0_r_bits_last   (axi_ios_0_r_bits_last),   //   input,   width = 1,                   .rlast
		.axi_ios_0_aw_valid      (axi_ios_0_aw_valid),      //  output,   width = 1,                   .awvalid
		.axi_ios_0_aw_bits_id    (axi_ios_0_aw_bits_id),    //  output,   width = 4,                   .awid
		.axi_ios_0_aw_bits_addr  (axi_ios_0_aw_bits_addr),  //  output,  width = 37,                   .awaddr
		.axi_ios_0_aw_bits_len   (axi_ios_0_aw_bits_len),   //  output,   width = 8,                   .awlen
		.axi_ios_0_aw_bits_size  (axi_ios_0_aw_bits_size),  //  output,   width = 3,                   .awsize
		.axi_ios_0_aw_bits_burst (axi_ios_0_aw_bits_burst), //  output,   width = 2,                   .awburst
		.axi_ios_0_aw_bits_lock  (axi_ios_0_aw_bits_lock),  //  output,   width = 1,                   .awlock
		.axi_ios_0_aw_bits_cache (axi_ios_0_aw_bits_cache), //  output,   width = 4,                   .awcache
		.axi_ios_0_aw_bits_prot  (axi_ios_0_aw_bits_prot),  //  output,   width = 3,                   .awprot
		.axi_ios_0_aw_bits_qos   (axi_ios_0_aw_bits_qos),   //  output,   width = 4,                   .awqos
		.axi_ios_0_w_valid       (axi_ios_0_w_valid),       //  output,   width = 1,                   .wvalid
		.axi_ios_0_w_bits_data   (axi_ios_0_w_bits_data),   //  output,  width = 64,                   .wdata
		.axi_ios_0_w_bits_strb   (axi_ios_0_w_bits_strb),   //  output,   width = 8,                   .wstrb
		.axi_ios_0_w_bits_last   (axi_ios_0_w_bits_last),   //  output,   width = 1,                   .wlast
		.axi_ios_0_b_ready       (axi_ios_0_b_ready),       //  output,   width = 1,                   .bready
		.axi_ios_0_ar_valid      (axi_ios_0_ar_valid),      //  output,   width = 1,                   .arvalid
		.axi_ios_0_ar_bits_id    (axi_ios_0_ar_bits_id),    //  output,   width = 4,                   .arid
		.axi_ios_0_ar_bits_addr  (axi_ios_0_ar_bits_addr),  //  output,  width = 37,                   .araddr
		.axi_ios_0_ar_bits_len   (axi_ios_0_ar_bits_len),   //  output,   width = 8,                   .arlen
		.axi_ios_0_ar_bits_size  (axi_ios_0_ar_bits_size),  //  output,   width = 3,                   .arsize
		.axi_ios_0_ar_bits_burst (axi_ios_0_ar_bits_burst), //  output,   width = 2,                   .arburst
		.axi_ios_0_ar_bits_lock  (axi_ios_0_ar_bits_lock),  //  output,   width = 1,                   .arlock
		.axi_ios_0_ar_bits_cache (axi_ios_0_ar_bits_cache), //  output,   width = 4,                   .arcache
		.axi_ios_0_ar_bits_prot  (axi_ios_0_ar_bits_prot),  //  output,   width = 3,                   .arprot
		.axi_ios_0_ar_bits_qos   (axi_ios_0_ar_bits_qos),   //  output,   width = 4,                   .arqos
		.axi_ios_0_r_ready       (axi_ios_0_r_ready),       //  output,   width = 1,                   .rready
		.io_uart_txd             (io_uart_txd),             //  output,   width = 1,               uart.writeresponsevalid_n
		.io_uart_rxd             (io_uart_rxd),             //   input,   width = 1,                   .beginbursttransfer
		.io_serial_in_ready      (io_serial_in_ready),      //  output,   width = 1,             serial.serial_in_ready
		.io_serial_out_valid     (io_serial_out_valid),     //  output,   width = 1,                   .serial_out_valid
		.io_serial_out_bits      (io_serial_out_bits),      //  output,   width = 1,                   .serial_out
		.io_dropped              (io_dropped),              //  output,   width = 1,                   .led
		.io_serial_in_valid      (io_serial_in_valid),      //   input,   width = 1,                   .serial_in_valid
		.io_serial_in_bits       (io_serial_in_bits),       //   input,   width = 1,                   .serial_in
		.io_serial_out_ready     (io_serial_out_ready)      //   input,   width = 1,                   .serial_out_ready
	);

endmodule
