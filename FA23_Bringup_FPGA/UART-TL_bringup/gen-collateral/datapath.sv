// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module datapath(
  input         clock,
                reset,
  input  [31:0] io_vec1_0,
                io_vec1_1,
                io_vec1_2,
                io_vec1_3,
                io_vec1_4,
                io_vec1_5,
                io_vec1_6,
                io_vec1_7,
                io_vec1_8,
                io_vec1_9,
                io_vec1_10,
                io_vec1_11,
                io_vec1_12,
                io_vec1_13,
                io_vec1_14,
                io_vec1_15,
                io_vec2_0,
                io_vec2_1,
                io_vec2_2,
                io_vec2_3,
                io_vec2_4,
                io_vec2_5,
                io_vec2_6,
                io_vec2_7,
                io_vec2_8,
                io_vec2_9,
                io_vec2_10,
                io_vec2_11,
                io_vec2_12,
                io_vec2_13,
                io_vec2_14,
                io_vec2_15,
  input         io_enable,
  output        io_valid,
  output [31:0] io_out
);

  wire [31:0]     _dotComputeUnit_io_out;	// @[datapath.scala:26:30]
  reg  [1:0]      comp_state;	// @[datapath.scala:20:27]
  reg  [2:0]      downcounter;	// @[datapath.scala:24:28]
  wire            _T = comp_state == 2'h0;	// @[datapath.scala:20:27, :32:22]
  wire            _T_2 = comp_state == 2'h1;	// @[datapath.scala:20:27, :32:22, :38:24]
  wire            _T_4 = comp_state == 2'h2;	// @[datapath.scala:20:27, :32:22, :50:22]
  wire            _GEN = _T | _T_2;	// @[datapath.scala:32:22, :34:18, :48:18]
  wire [3:0][1:0] _GEN_0 = {{comp_state}, {2'h0}, {downcounter == 3'h0 ? 2'h2 : 2'h1}, {{1'h0, io_enable}}};	// @[datapath.scala:20:27, :22:10, :24:28, :32:22, :36:35, :38:24, :40:24, :49:{26,34}, :50:22, :52:22, :58:20]
  always @(posedge clock) begin
    if (reset) begin
      comp_state <= 2'h0;	// @[datapath.scala:20:27]
      downcounter <= 3'h0;	// @[datapath.scala:24:28]
    end
    else begin
      comp_state <= _GEN_0[comp_state];	// @[datapath.scala:20:27, :32:22, :36:35, :49:34, :58:20]
      if (_T) begin	// @[datapath.scala:32:22]
        if (io_enable)
          downcounter <= 3'h4;	// @[datapath.scala:24:28, :37:25]
      end
      else if (_T_2)	// @[datapath.scala:32:22]
        downcounter <= downcounter - 3'h1;	// @[datapath.scala:24:28, :47:36]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        comp_state = _RANDOM_0[1:0];	// @[datapath.scala:20:27]
        downcounter = _RANDOM_0[4:2];	// @[datapath.scala:20:27, :24:28]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  dotCompute dotComputeUnit (	// @[datapath.scala:26:30]
    .clock      (clock),
    .reset      (reset),
    .io_vec1_0  (io_vec1_0),
    .io_vec1_1  (io_vec1_1),
    .io_vec1_2  (io_vec1_2),
    .io_vec1_3  (io_vec1_3),
    .io_vec1_4  (io_vec1_4),
    .io_vec1_5  (io_vec1_5),
    .io_vec1_6  (io_vec1_6),
    .io_vec1_7  (io_vec1_7),
    .io_vec1_8  (io_vec1_8),
    .io_vec1_9  (io_vec1_9),
    .io_vec1_10 (io_vec1_10),
    .io_vec1_11 (io_vec1_11),
    .io_vec1_12 (io_vec1_12),
    .io_vec1_13 (io_vec1_13),
    .io_vec1_14 (io_vec1_14),
    .io_vec1_15 (io_vec1_15),
    .io_vec2_0  (io_vec2_0),
    .io_vec2_1  (io_vec2_1),
    .io_vec2_2  (io_vec2_2),
    .io_vec2_3  (io_vec2_3),
    .io_vec2_4  (io_vec2_4),
    .io_vec2_5  (io_vec2_5),
    .io_vec2_6  (io_vec2_6),
    .io_vec2_7  (io_vec2_7),
    .io_vec2_8  (io_vec2_8),
    .io_vec2_9  (io_vec2_9),
    .io_vec2_10 (io_vec2_10),
    .io_vec2_11 (io_vec2_11),
    .io_vec2_12 (io_vec2_12),
    .io_vec2_13 (io_vec2_13),
    .io_vec2_14 (io_vec2_14),
    .io_vec2_15 (io_vec2_15),
    .io_out     (_dotComputeUnit_io_out)
  );
  assign io_valid = ~_GEN & _T_4;	// @[datapath.scala:32:22, :34:18, :48:18]
  assign io_out = _GEN | ~_T_4 ? 32'h0 : _dotComputeUnit_io_out;	// @[datapath.scala:22:10, :26:30, :32:22, :34:18, :48:18]
endmodule

