// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module TageBranchPredictorBank(
  input         clock,
                reset,
                io_f0_valid,
  input  [39:0] io_f0_pc,
  input  [15:0] io_f1_ghist,
  input         io_resp_in_0_f1_0_taken,
                io_resp_in_0_f1_0_is_br,
                io_resp_in_0_f1_0_is_jal,
                io_resp_in_0_f1_0_predicted_pc_valid,
  input  [39:0] io_resp_in_0_f1_0_predicted_pc_bits,
  input         io_resp_in_0_f1_1_taken,
                io_resp_in_0_f1_1_is_br,
                io_resp_in_0_f1_1_is_jal,
                io_resp_in_0_f1_1_predicted_pc_valid,
  input  [39:0] io_resp_in_0_f1_1_predicted_pc_bits,
  input         io_resp_in_0_f1_2_taken,
                io_resp_in_0_f1_2_is_br,
                io_resp_in_0_f1_2_is_jal,
                io_resp_in_0_f1_2_predicted_pc_valid,
  input  [39:0] io_resp_in_0_f1_2_predicted_pc_bits,
  input         io_resp_in_0_f1_3_taken,
                io_resp_in_0_f1_3_is_br,
                io_resp_in_0_f1_3_is_jal,
                io_resp_in_0_f1_3_predicted_pc_valid,
  input  [39:0] io_resp_in_0_f1_3_predicted_pc_bits,
  input         io_resp_in_0_f2_0_taken,
                io_resp_in_0_f2_0_is_br,
                io_resp_in_0_f2_0_is_jal,
                io_resp_in_0_f2_0_predicted_pc_valid,
  input  [39:0] io_resp_in_0_f2_0_predicted_pc_bits,
  input         io_resp_in_0_f2_1_taken,
                io_resp_in_0_f2_1_is_br,
                io_resp_in_0_f2_1_is_jal,
                io_resp_in_0_f2_1_predicted_pc_valid,
  input  [39:0] io_resp_in_0_f2_1_predicted_pc_bits,
  input         io_resp_in_0_f2_2_taken,
                io_resp_in_0_f2_2_is_br,
                io_resp_in_0_f2_2_is_jal,
                io_resp_in_0_f2_2_predicted_pc_valid,
  input  [39:0] io_resp_in_0_f2_2_predicted_pc_bits,
  input         io_resp_in_0_f2_3_taken,
                io_resp_in_0_f2_3_is_br,
                io_resp_in_0_f2_3_is_jal,
                io_resp_in_0_f2_3_predicted_pc_valid,
  input  [39:0] io_resp_in_0_f2_3_predicted_pc_bits,
  input         io_resp_in_0_f3_0_taken,
                io_resp_in_0_f3_0_is_br,
                io_resp_in_0_f3_0_is_jal,
                io_resp_in_0_f3_0_predicted_pc_valid,
  input  [39:0] io_resp_in_0_f3_0_predicted_pc_bits,
  input         io_resp_in_0_f3_1_taken,
                io_resp_in_0_f3_1_is_br,
                io_resp_in_0_f3_1_is_jal,
                io_resp_in_0_f3_1_predicted_pc_valid,
  input  [39:0] io_resp_in_0_f3_1_predicted_pc_bits,
  input         io_resp_in_0_f3_2_taken,
                io_resp_in_0_f3_2_is_br,
                io_resp_in_0_f3_2_is_jal,
                io_resp_in_0_f3_2_predicted_pc_valid,
  input  [39:0] io_resp_in_0_f3_2_predicted_pc_bits,
  input         io_resp_in_0_f3_3_taken,
                io_resp_in_0_f3_3_is_br,
                io_resp_in_0_f3_3_is_jal,
                io_resp_in_0_f3_3_predicted_pc_valid,
  input  [39:0] io_resp_in_0_f3_3_predicted_pc_bits,
  input         io_update_valid,
                io_update_bits_is_mispredict_update,
                io_update_bits_is_repair_update,
  input  [3:0]  io_update_bits_btb_mispredicts,
  input  [39:0] io_update_bits_pc,
  input  [3:0]  io_update_bits_br_mask,
  input         io_update_bits_cfi_idx_valid,
  input  [1:0]  io_update_bits_cfi_idx_bits,
  input         io_update_bits_cfi_taken,
                io_update_bits_cfi_mispredicted,
  input  [15:0] io_update_bits_ghist,
  input  [49:0] io_update_bits_meta,
  output        io_resp_f1_0_taken,
                io_resp_f1_0_is_br,
                io_resp_f1_0_is_jal,
                io_resp_f1_0_predicted_pc_valid,
  output [39:0] io_resp_f1_0_predicted_pc_bits,
  output        io_resp_f1_1_taken,
                io_resp_f1_1_is_br,
                io_resp_f1_1_is_jal,
                io_resp_f1_1_predicted_pc_valid,
  output [39:0] io_resp_f1_1_predicted_pc_bits,
  output        io_resp_f1_2_taken,
                io_resp_f1_2_is_br,
                io_resp_f1_2_is_jal,
                io_resp_f1_2_predicted_pc_valid,
  output [39:0] io_resp_f1_2_predicted_pc_bits,
  output        io_resp_f1_3_taken,
                io_resp_f1_3_is_br,
                io_resp_f1_3_is_jal,
                io_resp_f1_3_predicted_pc_valid,
  output [39:0] io_resp_f1_3_predicted_pc_bits,
  output        io_resp_f2_0_taken,
                io_resp_f2_0_is_br,
                io_resp_f2_0_is_jal,
                io_resp_f2_0_predicted_pc_valid,
  output [39:0] io_resp_f2_0_predicted_pc_bits,
  output        io_resp_f2_1_taken,
                io_resp_f2_1_is_br,
                io_resp_f2_1_is_jal,
                io_resp_f2_1_predicted_pc_valid,
  output [39:0] io_resp_f2_1_predicted_pc_bits,
  output        io_resp_f2_2_taken,
                io_resp_f2_2_is_br,
                io_resp_f2_2_is_jal,
                io_resp_f2_2_predicted_pc_valid,
  output [39:0] io_resp_f2_2_predicted_pc_bits,
  output        io_resp_f2_3_taken,
                io_resp_f2_3_is_br,
                io_resp_f2_3_is_jal,
                io_resp_f2_3_predicted_pc_valid,
  output [39:0] io_resp_f2_3_predicted_pc_bits,
  output        io_resp_f3_0_taken,
                io_resp_f3_0_is_br,
                io_resp_f3_0_is_jal,
                io_resp_f3_0_predicted_pc_valid,
  output [39:0] io_resp_f3_0_predicted_pc_bits,
  output        io_resp_f3_1_taken,
                io_resp_f3_1_is_br,
                io_resp_f3_1_is_jal,
                io_resp_f3_1_predicted_pc_valid,
  output [39:0] io_resp_f3_1_predicted_pc_bits,
  output        io_resp_f3_2_taken,
                io_resp_f3_2_is_br,
                io_resp_f3_2_is_jal,
                io_resp_f3_2_predicted_pc_valid,
  output [39:0] io_resp_f3_2_predicted_pc_bits,
  output        io_resp_f3_3_taken,
                io_resp_f3_3_is_br,
                io_resp_f3_3_is_jal,
                io_resp_f3_3_predicted_pc_valid,
  output [39:0] io_resp_f3_3_predicted_pc_bits,
  output [49:0] io_f3_meta
);

  wire        _tables_0_io_f3_resp_0_valid;	// @[tage.scala:224:21]
  wire [2:0]  _tables_0_io_f3_resp_0_bits_ctr;	// @[tage.scala:224:21]
  wire [1:0]  _tables_0_io_f3_resp_0_bits_u;	// @[tage.scala:224:21]
  wire        _tables_0_io_f3_resp_1_valid;	// @[tage.scala:224:21]
  wire [2:0]  _tables_0_io_f3_resp_1_bits_ctr;	// @[tage.scala:224:21]
  wire [1:0]  _tables_0_io_f3_resp_1_bits_u;	// @[tage.scala:224:21]
  wire        _tables_0_io_f3_resp_2_valid;	// @[tage.scala:224:21]
  wire [2:0]  _tables_0_io_f3_resp_2_bits_ctr;	// @[tage.scala:224:21]
  wire [1:0]  _tables_0_io_f3_resp_2_bits_u;	// @[tage.scala:224:21]
  wire        _tables_0_io_f3_resp_3_valid;	// @[tage.scala:224:21]
  wire [2:0]  _tables_0_io_f3_resp_3_bits_ctr;	// @[tage.scala:224:21]
  wire [1:0]  _tables_0_io_f3_resp_3_bits_u;	// @[tage.scala:224:21]
  reg         s1_update_valid;	// @[predictor.scala:184:30]
  reg         s1_update_bits_is_mispredict_update;	// @[predictor.scala:184:30]
  reg         s1_update_bits_is_repair_update;	// @[predictor.scala:184:30]
  reg  [3:0]  s1_update_bits_btb_mispredicts;	// @[predictor.scala:184:30]
  reg  [39:0] s1_update_bits_pc;	// @[predictor.scala:184:30]
  reg  [3:0]  s1_update_bits_br_mask;	// @[predictor.scala:184:30]
  reg         s1_update_bits_cfi_idx_valid;	// @[predictor.scala:184:30]
  reg  [1:0]  s1_update_bits_cfi_idx_bits;	// @[predictor.scala:184:30]
  reg         s1_update_bits_cfi_taken;	// @[predictor.scala:184:30]
  reg         s1_update_bits_cfi_mispredicted;	// @[predictor.scala:184:30]
  reg  [15:0] s1_update_bits_ghist;	// @[predictor.scala:184:30]
  reg  [49:0] s1_update_bits_meta;	// @[predictor.scala:184:30]
  reg         t_io_f1_req_valid_REG;	// @[tage.scala:225:35]
  reg  [39:0] t_io_f1_req_pc_REG;	// @[tage.scala:226:35]
  wire        _io_resp_f3_0_taken_output = ~_tables_0_io_f3_resp_0_valid | _tables_0_io_f3_resp_0_bits_ctr == 3'h3 | _tables_0_io_f3_resp_0_bits_ctr == 3'h4 ? io_resp_in_0_f3_0_taken : _tables_0_io_f3_resp_0_bits_ctr[2];	// @[tage.scala:224:21, :259:25, :264:18, :265:{29,40,55,76}]
  wire        _io_resp_f3_1_taken_output = ~_tables_0_io_f3_resp_1_valid | _tables_0_io_f3_resp_1_bits_ctr == 3'h3 | _tables_0_io_f3_resp_1_bits_ctr == 3'h4 ? io_resp_in_0_f3_1_taken : _tables_0_io_f3_resp_1_bits_ctr[2];	// @[tage.scala:224:21, :259:25, :264:18, :265:{29,40,55,76}]
  wire        _io_resp_f3_2_taken_output = ~_tables_0_io_f3_resp_2_valid | _tables_0_io_f3_resp_2_bits_ctr == 3'h3 | _tables_0_io_f3_resp_2_bits_ctr == 3'h4 ? io_resp_in_0_f3_2_taken : _tables_0_io_f3_resp_2_bits_ctr[2];	// @[tage.scala:224:21, :259:25, :264:18, :265:{29,40,55,76}]
  wire        _io_resp_f3_3_taken_output = ~_tables_0_io_f3_resp_3_valid | _tables_0_io_f3_resp_3_bits_ctr == 3'h3 | _tables_0_io_f3_resp_3_bits_ctr == 3'h4 ? io_resp_in_0_f3_3_taken : _tables_0_io_f3_resp_3_bits_ctr[2];	// @[tage.scala:224:21, :259:25, :264:18, :265:{29,40,55,76}]
  reg         t_io_update_mask_0_REG;	// @[tage.scala:345:48]
  reg         t_io_update_taken_0_REG;	// @[tage.scala:346:48]
  reg         t_io_update_alloc_0_REG;	// @[tage.scala:347:48]
  reg  [2:0]  t_io_update_old_ctr_0_REG;	// @[tage.scala:348:48]
  reg         t_io_update_u_mask_0_REG;	// @[tage.scala:350:47]
  reg  [1:0]  t_io_update_u_0_REG;	// @[tage.scala:351:47]
  reg         t_io_update_mask_1_REG;	// @[tage.scala:345:48]
  reg         t_io_update_taken_1_REG;	// @[tage.scala:346:48]
  reg         t_io_update_alloc_1_REG;	// @[tage.scala:347:48]
  reg  [2:0]  t_io_update_old_ctr_1_REG;	// @[tage.scala:348:48]
  reg         t_io_update_u_mask_1_REG;	// @[tage.scala:350:47]
  reg  [1:0]  t_io_update_u_1_REG;	// @[tage.scala:351:47]
  reg         t_io_update_mask_2_REG;	// @[tage.scala:345:48]
  reg         t_io_update_taken_2_REG;	// @[tage.scala:346:48]
  reg         t_io_update_alloc_2_REG;	// @[tage.scala:347:48]
  reg  [2:0]  t_io_update_old_ctr_2_REG;	// @[tage.scala:348:48]
  reg         t_io_update_u_mask_2_REG;	// @[tage.scala:350:47]
  reg  [1:0]  t_io_update_u_2_REG;	// @[tage.scala:351:47]
  reg         t_io_update_mask_3_REG;	// @[tage.scala:345:48]
  reg         t_io_update_taken_3_REG;	// @[tage.scala:346:48]
  reg         t_io_update_alloc_3_REG;	// @[tage.scala:347:48]
  reg  [2:0]  t_io_update_old_ctr_3_REG;	// @[tage.scala:348:48]
  reg         t_io_update_u_mask_3_REG;	// @[tage.scala:350:47]
  reg  [1:0]  t_io_update_u_3_REG;	// @[tage.scala:351:47]
  reg  [39:0] t_io_update_pc_REG;	// @[tage.scala:353:41]
  reg  [15:0] t_io_update_hist_REG;	// @[tage.scala:354:41]
  wire [3:0]  s1_update_mispredict_mask = 4'h1 << s1_update_bits_cfi_idx_bits & {4{s1_update_bits_cfi_mispredicted}};	// @[Bitwise.scala:77:12, OneHot.scala:57:35, predictor.scala:184:30, tage.scala:237:73]
  wire        _T_45 = s1_update_bits_is_mispredict_update | s1_update_bits_is_repair_update;	// @[predictor.scala:96:49, :184:30]
  wire        _T_51 = s1_update_valid & ~(_T_45 | (|s1_update_bits_btb_mispredicts)) & s1_update_bits_cfi_mispredicted & s1_update_bits_cfi_idx_valid;	// @[predictor.scala:94:50, :96:{26,49,69}, :184:30, tage.scala:317:95]
  wire [3:0]  _GEN = {{s1_update_bits_meta[3]}, {s1_update_bits_meta[2]}, {s1_update_bits_meta[1]}, {s1_update_bits_meta[0]}};	// @[predictor.scala:184:30, tage.scala:236:52, :320:27]
  wire        _GEN_0 = _GEN[s1_update_bits_cfi_idx_bits];	// @[predictor.scala:184:30, tage.scala:320:27]
  wire        _GEN_1 = _T_51 & _GEN_0 & ~(|s1_update_bits_cfi_idx_bits);	// @[predictor.scala:184:30, tage.scala:297:58, :299:92, :317:{95,128}, :320:27, :321:43]
  wire        s1_update_u_mask_0_0 = _GEN_1 | s1_update_bits_br_mask[0] & s1_update_valid & ~(_T_45 | (|s1_update_bits_btb_mispredicts)) & s1_update_bits_meta[28];	// @[predictor.scala:94:50, :96:{26,49,69}, :184:30, tage.scala:236:52, :240:33, :299:{33,92}, :300:47, :317:128, :320:27, :321:43]
  wire        _GEN_2 = s1_update_bits_cfi_idx_bits == 2'h1;	// @[predictor.scala:184:30, tage.scala:321:43]
  wire        _GEN_3 = _T_51 & _GEN_0 & _GEN_2;	// @[tage.scala:299:92, :317:{95,128}, :320:27, :321:43]
  wire        s1_update_u_mask_0_1 = _GEN_3 | s1_update_bits_br_mask[1] & s1_update_valid & ~(_T_45 | (|s1_update_bits_btb_mispredicts)) & s1_update_bits_meta[29];	// @[predictor.scala:94:50, :96:{26,49,69}, :184:30, tage.scala:236:52, :240:33, :299:{33,92}, :300:47, :317:128, :320:27, :321:43]
  wire        _GEN_4 = s1_update_bits_cfi_idx_bits == 2'h2;	// @[predictor.scala:184:30, tage.scala:297:58, :321:43]
  wire        _GEN_5 = _T_51 & _GEN_0 & _GEN_4;	// @[tage.scala:299:92, :317:{95,128}, :320:27, :321:43]
  wire        s1_update_u_mask_0_2 = _GEN_5 | s1_update_bits_br_mask[2] & s1_update_valid & ~(_T_45 | (|s1_update_bits_btb_mispredicts)) & s1_update_bits_meta[30];	// @[predictor.scala:94:50, :96:{26,49,69}, :184:30, tage.scala:236:52, :240:33, :299:{33,92}, :300:47, :317:128, :320:27, :321:43]
  wire        _GEN_6 = _T_51 & _GEN_0 & (&s1_update_bits_cfi_idx_bits);	// @[predictor.scala:184:30, tage.scala:299:92, :317:{95,128}, :320:27, :321:43]
  wire        s1_update_u_mask_0_3 = _GEN_6 | s1_update_bits_br_mask[3] & s1_update_valid & ~(_T_45 | (|s1_update_bits_btb_mispredicts)) & s1_update_bits_meta[31];	// @[predictor.scala:94:50, :96:{26,49,69}, :184:30, tage.scala:236:52, :240:33, :299:{33,92}, :300:47, :317:128, :320:27, :321:43]
  wire        _GEN_7 = _T_51 & _GEN_0;	// @[tage.scala:299:92, :317:{95,128}, :320:27, :323:43]
  always @(posedge clock) begin
    s1_update_valid <= io_update_valid;	// @[predictor.scala:184:30]
    s1_update_bits_is_mispredict_update <= io_update_bits_is_mispredict_update;	// @[predictor.scala:184:30]
    s1_update_bits_is_repair_update <= io_update_bits_is_repair_update;	// @[predictor.scala:184:30]
    s1_update_bits_btb_mispredicts <= io_update_bits_btb_mispredicts;	// @[predictor.scala:184:30]
    s1_update_bits_pc <= io_update_bits_pc;	// @[predictor.scala:184:30]
    s1_update_bits_br_mask <= io_update_bits_br_mask;	// @[predictor.scala:184:30]
    s1_update_bits_cfi_idx_valid <= io_update_bits_cfi_idx_valid;	// @[predictor.scala:184:30]
    s1_update_bits_cfi_idx_bits <= io_update_bits_cfi_idx_bits;	// @[predictor.scala:184:30]
    s1_update_bits_cfi_taken <= io_update_bits_cfi_taken;	// @[predictor.scala:184:30]
    s1_update_bits_cfi_mispredicted <= io_update_bits_cfi_mispredicted;	// @[predictor.scala:184:30]
    s1_update_bits_ghist <= io_update_bits_ghist;	// @[predictor.scala:184:30]
    s1_update_bits_meta <= io_update_bits_meta;	// @[predictor.scala:184:30]
    t_io_f1_req_valid_REG <= io_f0_valid;	// @[tage.scala:225:35]
    t_io_f1_req_pc_REG <= io_f0_pc;	// @[tage.scala:226:35]
    t_io_update_mask_0_REG <= s1_update_u_mask_0_0;	// @[tage.scala:299:92, :317:128, :320:27, :321:43, :345:48]
    t_io_update_taken_0_REG <= (_GEN_1 | s1_update_bits_cfi_idx_valid & ~(|s1_update_bits_cfi_idx_bits)) & s1_update_bits_cfi_taken;	// @[predictor.scala:184:30, tage.scala:297:{58,67}, :299:92, :317:128, :320:27, :321:43, :322:43, :346:48]
    t_io_update_alloc_0_REG <= _GEN_7 & ~(|s1_update_bits_cfi_idx_bits);	// @[predictor.scala:184:30, tage.scala:297:58, :299:92, :317:128, :320:27, :321:43, :323:43, :347:48]
    t_io_update_old_ctr_0_REG <= s1_update_bits_meta[6:4];	// @[predictor.scala:184:30, tage.scala:236:52, :348:48]
    t_io_update_u_mask_0_REG <= s1_update_u_mask_0_0;	// @[tage.scala:299:92, :317:128, :320:27, :321:43, :350:47]
    if (_GEN_1)	// @[tage.scala:299:92, :317:128, :320:27, :321:43]
      t_io_update_u_0_REG <= 2'h0;	// @[tage.scala:321:43, :351:47]
    else if (s1_update_bits_meta[24]) begin	// @[predictor.scala:184:30, tage.scala:236:52]
      if (s1_update_mispredict_mask[0]) begin	// @[tage.scala:237:73, :308:52]
        if (s1_update_bits_meta[17:16] == 2'h0)	// @[predictor.scala:184:30, tage.scala:218:27, :236:52, :321:43]
          t_io_update_u_0_REG <= 2'h0;	// @[tage.scala:321:43, :351:47]
        else	// @[tage.scala:218:27]
          t_io_update_u_0_REG <= s1_update_bits_meta[17:16] - 2'h1;	// @[predictor.scala:184:30, tage.scala:218:43, :236:52, :351:47]
      end
      else if (&(s1_update_bits_meta[17:16]))	// @[predictor.scala:184:30, tage.scala:219:27, :236:52]
        t_io_update_u_0_REG <= 2'h3;	// @[tage.scala:265:40, :351:47]
      else	// @[tage.scala:219:27]
        t_io_update_u_0_REG <= s1_update_bits_meta[17:16] + 2'h1;	// @[predictor.scala:184:30, tage.scala:219:43, :236:52, :321:43, :351:47]
    end
    else	// @[tage.scala:236:52]
      t_io_update_u_0_REG <= s1_update_bits_meta[17:16];	// @[predictor.scala:184:30, tage.scala:236:52, :351:47]
    t_io_update_mask_1_REG <= s1_update_u_mask_0_1;	// @[tage.scala:299:92, :317:128, :320:27, :321:43, :345:48]
    t_io_update_taken_1_REG <= (_GEN_3 | s1_update_bits_cfi_idx_valid & s1_update_bits_cfi_idx_bits == 2'h1) & s1_update_bits_cfi_taken;	// @[predictor.scala:184:30, tage.scala:297:{58,67}, :299:92, :317:128, :320:27, :321:43, :322:43, :346:48]
    t_io_update_alloc_1_REG <= _GEN_7 & _GEN_2;	// @[tage.scala:299:92, :317:128, :320:27, :321:43, :323:43, :347:48]
    t_io_update_old_ctr_1_REG <= s1_update_bits_meta[9:7];	// @[predictor.scala:184:30, tage.scala:236:52, :348:48]
    t_io_update_u_mask_1_REG <= s1_update_u_mask_0_1;	// @[tage.scala:299:92, :317:128, :320:27, :321:43, :350:47]
    if (_GEN_3)	// @[tage.scala:299:92, :317:128, :320:27, :321:43]
      t_io_update_u_1_REG <= 2'h0;	// @[tage.scala:321:43, :351:47]
    else if (s1_update_bits_meta[25]) begin	// @[predictor.scala:184:30, tage.scala:236:52]
      if (s1_update_mispredict_mask[1]) begin	// @[tage.scala:237:73, :308:52]
        if (s1_update_bits_meta[19:18] == 2'h0)	// @[predictor.scala:184:30, tage.scala:218:27, :236:52, :321:43]
          t_io_update_u_1_REG <= 2'h0;	// @[tage.scala:321:43, :351:47]
        else	// @[tage.scala:218:27]
          t_io_update_u_1_REG <= s1_update_bits_meta[19:18] - 2'h1;	// @[predictor.scala:184:30, tage.scala:218:43, :236:52, :351:47]
      end
      else if (&(s1_update_bits_meta[19:18]))	// @[predictor.scala:184:30, tage.scala:219:27, :236:52]
        t_io_update_u_1_REG <= 2'h3;	// @[tage.scala:265:40, :351:47]
      else	// @[tage.scala:219:27]
        t_io_update_u_1_REG <= s1_update_bits_meta[19:18] + 2'h1;	// @[predictor.scala:184:30, tage.scala:219:43, :236:52, :321:43, :351:47]
    end
    else	// @[tage.scala:236:52]
      t_io_update_u_1_REG <= s1_update_bits_meta[19:18];	// @[predictor.scala:184:30, tage.scala:236:52, :351:47]
    t_io_update_mask_2_REG <= s1_update_u_mask_0_2;	// @[tage.scala:299:92, :317:128, :320:27, :321:43, :345:48]
    t_io_update_taken_2_REG <= (_GEN_5 | s1_update_bits_cfi_idx_valid & s1_update_bits_cfi_idx_bits == 2'h2) & s1_update_bits_cfi_taken;	// @[predictor.scala:184:30, tage.scala:297:{58,67}, :299:92, :317:128, :320:27, :321:43, :322:43, :346:48]
    t_io_update_alloc_2_REG <= _GEN_7 & _GEN_4;	// @[tage.scala:299:92, :317:128, :320:27, :321:43, :323:43, :347:48]
    t_io_update_old_ctr_2_REG <= s1_update_bits_meta[12:10];	// @[predictor.scala:184:30, tage.scala:236:52, :348:48]
    t_io_update_u_mask_2_REG <= s1_update_u_mask_0_2;	// @[tage.scala:299:92, :317:128, :320:27, :321:43, :350:47]
    if (_GEN_5)	// @[tage.scala:299:92, :317:128, :320:27, :321:43]
      t_io_update_u_2_REG <= 2'h0;	// @[tage.scala:321:43, :351:47]
    else if (s1_update_bits_meta[26]) begin	// @[predictor.scala:184:30, tage.scala:236:52]
      if (s1_update_mispredict_mask[2]) begin	// @[tage.scala:237:73, :308:52]
        if (s1_update_bits_meta[21:20] == 2'h0)	// @[predictor.scala:184:30, tage.scala:218:27, :236:52, :321:43]
          t_io_update_u_2_REG <= 2'h0;	// @[tage.scala:321:43, :351:47]
        else	// @[tage.scala:218:27]
          t_io_update_u_2_REG <= s1_update_bits_meta[21:20] - 2'h1;	// @[predictor.scala:184:30, tage.scala:218:43, :236:52, :351:47]
      end
      else if (&(s1_update_bits_meta[21:20]))	// @[predictor.scala:184:30, tage.scala:219:27, :236:52]
        t_io_update_u_2_REG <= 2'h3;	// @[tage.scala:265:40, :351:47]
      else	// @[tage.scala:219:27]
        t_io_update_u_2_REG <= s1_update_bits_meta[21:20] + 2'h1;	// @[predictor.scala:184:30, tage.scala:219:43, :236:52, :321:43, :351:47]
    end
    else	// @[tage.scala:236:52]
      t_io_update_u_2_REG <= s1_update_bits_meta[21:20];	// @[predictor.scala:184:30, tage.scala:236:52, :351:47]
    t_io_update_mask_3_REG <= s1_update_u_mask_0_3;	// @[tage.scala:299:92, :317:128, :320:27, :321:43, :345:48]
    t_io_update_taken_3_REG <= (_GEN_6 | s1_update_bits_cfi_idx_valid & (&s1_update_bits_cfi_idx_bits)) & s1_update_bits_cfi_taken;	// @[predictor.scala:184:30, tage.scala:297:{58,67}, :299:92, :317:128, :320:27, :321:43, :322:43, :346:48]
    t_io_update_alloc_3_REG <= _GEN_7 & (&s1_update_bits_cfi_idx_bits);	// @[predictor.scala:184:30, tage.scala:299:92, :317:128, :320:27, :321:43, :323:43, :347:48]
    t_io_update_old_ctr_3_REG <= s1_update_bits_meta[15:13];	// @[predictor.scala:184:30, tage.scala:236:52, :348:48]
    t_io_update_u_mask_3_REG <= s1_update_u_mask_0_3;	// @[tage.scala:299:92, :317:128, :320:27, :321:43, :350:47]
    if (_GEN_6)	// @[tage.scala:299:92, :317:128, :320:27, :321:43]
      t_io_update_u_3_REG <= 2'h0;	// @[tage.scala:321:43, :351:47]
    else if (s1_update_bits_meta[27]) begin	// @[predictor.scala:184:30, tage.scala:236:52]
      if (s1_update_mispredict_mask[3]) begin	// @[tage.scala:237:73, :308:52]
        if (s1_update_bits_meta[23:22] == 2'h0)	// @[predictor.scala:184:30, tage.scala:218:27, :236:52, :321:43]
          t_io_update_u_3_REG <= 2'h0;	// @[tage.scala:321:43, :351:47]
        else	// @[tage.scala:218:27]
          t_io_update_u_3_REG <= s1_update_bits_meta[23:22] - 2'h1;	// @[predictor.scala:184:30, tage.scala:218:43, :236:52, :351:47]
      end
      else if (&(s1_update_bits_meta[23:22]))	// @[predictor.scala:184:30, tage.scala:219:27, :236:52]
        t_io_update_u_3_REG <= 2'h3;	// @[tage.scala:265:40, :351:47]
      else	// @[tage.scala:219:27]
        t_io_update_u_3_REG <= s1_update_bits_meta[23:22] + 2'h1;	// @[predictor.scala:184:30, tage.scala:219:43, :236:52, :321:43, :351:47]
    end
    else	// @[tage.scala:236:52]
      t_io_update_u_3_REG <= s1_update_bits_meta[23:22];	// @[predictor.scala:184:30, tage.scala:236:52, :351:47]
    t_io_update_pc_REG <= s1_update_bits_pc;	// @[predictor.scala:184:30, tage.scala:353:41]
    t_io_update_hist_REG <= s1_update_bits_ghist;	// @[predictor.scala:184:30, tage.scala:354:41]
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        s1_update_valid = _RANDOM_5[6];	// @[predictor.scala:184:30]
        s1_update_bits_is_mispredict_update = _RANDOM_5[7];	// @[predictor.scala:184:30]
        s1_update_bits_is_repair_update = _RANDOM_5[8];	// @[predictor.scala:184:30]
        s1_update_bits_btb_mispredicts = _RANDOM_5[12:9];	// @[predictor.scala:184:30]
        s1_update_bits_pc = {_RANDOM_5[31:13], _RANDOM_6[20:0]};	// @[predictor.scala:184:30]
        s1_update_bits_br_mask = _RANDOM_6[24:21];	// @[predictor.scala:184:30]
        s1_update_bits_cfi_idx_valid = _RANDOM_6[25];	// @[predictor.scala:184:30]
        s1_update_bits_cfi_idx_bits = _RANDOM_6[27:26];	// @[predictor.scala:184:30]
        s1_update_bits_cfi_taken = _RANDOM_6[28];	// @[predictor.scala:184:30]
        s1_update_bits_cfi_mispredicted = _RANDOM_6[29];	// @[predictor.scala:184:30]
        s1_update_bits_ghist = _RANDOM_7[16:1];	// @[predictor.scala:184:30]
        s1_update_bits_meta = {_RANDOM_8[31:26], _RANDOM_9, _RANDOM_10[11:0]};	// @[predictor.scala:184:30]
        t_io_f1_req_valid_REG = _RANDOM_11[18];	// @[tage.scala:225:35]
        t_io_f1_req_pc_REG = {_RANDOM_11[31:19], _RANDOM_12[26:0]};	// @[tage.scala:225:35, :226:35]
        t_io_update_mask_0_REG = _RANDOM_12[27];	// @[tage.scala:226:35, :345:48]
        t_io_update_taken_0_REG = _RANDOM_12[28];	// @[tage.scala:226:35, :346:48]
        t_io_update_alloc_0_REG = _RANDOM_12[29];	// @[tage.scala:226:35, :347:48]
        t_io_update_old_ctr_0_REG = {_RANDOM_12[31:30], _RANDOM_13[0]};	// @[tage.scala:226:35, :348:48]
        t_io_update_u_mask_0_REG = _RANDOM_13[1];	// @[tage.scala:348:48, :350:47]
        t_io_update_u_0_REG = _RANDOM_13[3:2];	// @[tage.scala:348:48, :351:47]
        t_io_update_mask_1_REG = _RANDOM_13[4];	// @[tage.scala:345:48, :348:48]
        t_io_update_taken_1_REG = _RANDOM_13[5];	// @[tage.scala:346:48, :348:48]
        t_io_update_alloc_1_REG = _RANDOM_13[6];	// @[tage.scala:347:48, :348:48]
        t_io_update_old_ctr_1_REG = _RANDOM_13[9:7];	// @[tage.scala:348:48]
        t_io_update_u_mask_1_REG = _RANDOM_13[10];	// @[tage.scala:348:48, :350:47]
        t_io_update_u_1_REG = _RANDOM_13[12:11];	// @[tage.scala:348:48, :351:47]
        t_io_update_mask_2_REG = _RANDOM_13[13];	// @[tage.scala:345:48, :348:48]
        t_io_update_taken_2_REG = _RANDOM_13[14];	// @[tage.scala:346:48, :348:48]
        t_io_update_alloc_2_REG = _RANDOM_13[15];	// @[tage.scala:347:48, :348:48]
        t_io_update_old_ctr_2_REG = _RANDOM_13[18:16];	// @[tage.scala:348:48]
        t_io_update_u_mask_2_REG = _RANDOM_13[19];	// @[tage.scala:348:48, :350:47]
        t_io_update_u_2_REG = _RANDOM_13[21:20];	// @[tage.scala:348:48, :351:47]
        t_io_update_mask_3_REG = _RANDOM_13[22];	// @[tage.scala:345:48, :348:48]
        t_io_update_taken_3_REG = _RANDOM_13[23];	// @[tage.scala:346:48, :348:48]
        t_io_update_alloc_3_REG = _RANDOM_13[24];	// @[tage.scala:347:48, :348:48]
        t_io_update_old_ctr_3_REG = _RANDOM_13[27:25];	// @[tage.scala:348:48]
        t_io_update_u_mask_3_REG = _RANDOM_13[28];	// @[tage.scala:348:48, :350:47]
        t_io_update_u_3_REG = _RANDOM_13[30:29];	// @[tage.scala:348:48, :351:47]
        t_io_update_pc_REG = {_RANDOM_13[31], _RANDOM_14, _RANDOM_15[6:0]};	// @[tage.scala:348:48, :353:41]
        t_io_update_hist_REG = _RANDOM_15[22:7];	// @[tage.scala:353:41, :354:41]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  TageTable tables_0 (	// @[tage.scala:224:21]
    .clock                 (clock),
    .reset                 (reset),
    .io_f1_req_valid       (t_io_f1_req_valid_REG),	// @[tage.scala:225:35]
    .io_f1_req_pc          (t_io_f1_req_pc_REG),	// @[tage.scala:226:35]
    .io_f1_req_ghist       (io_f1_ghist),
    .io_update_mask_0      (t_io_update_mask_0_REG),	// @[tage.scala:345:48]
    .io_update_mask_1      (t_io_update_mask_1_REG),	// @[tage.scala:345:48]
    .io_update_mask_2      (t_io_update_mask_2_REG),	// @[tage.scala:345:48]
    .io_update_mask_3      (t_io_update_mask_3_REG),	// @[tage.scala:345:48]
    .io_update_taken_0     (t_io_update_taken_0_REG),	// @[tage.scala:346:48]
    .io_update_taken_1     (t_io_update_taken_1_REG),	// @[tage.scala:346:48]
    .io_update_taken_2     (t_io_update_taken_2_REG),	// @[tage.scala:346:48]
    .io_update_taken_3     (t_io_update_taken_3_REG),	// @[tage.scala:346:48]
    .io_update_alloc_0     (t_io_update_alloc_0_REG),	// @[tage.scala:347:48]
    .io_update_alloc_1     (t_io_update_alloc_1_REG),	// @[tage.scala:347:48]
    .io_update_alloc_2     (t_io_update_alloc_2_REG),	// @[tage.scala:347:48]
    .io_update_alloc_3     (t_io_update_alloc_3_REG),	// @[tage.scala:347:48]
    .io_update_old_ctr_0   (t_io_update_old_ctr_0_REG),	// @[tage.scala:348:48]
    .io_update_old_ctr_1   (t_io_update_old_ctr_1_REG),	// @[tage.scala:348:48]
    .io_update_old_ctr_2   (t_io_update_old_ctr_2_REG),	// @[tage.scala:348:48]
    .io_update_old_ctr_3   (t_io_update_old_ctr_3_REG),	// @[tage.scala:348:48]
    .io_update_pc          (t_io_update_pc_REG),	// @[tage.scala:353:41]
    .io_update_hist        (t_io_update_hist_REG),	// @[tage.scala:354:41]
    .io_update_u_mask_0    (t_io_update_u_mask_0_REG),	// @[tage.scala:350:47]
    .io_update_u_mask_1    (t_io_update_u_mask_1_REG),	// @[tage.scala:350:47]
    .io_update_u_mask_2    (t_io_update_u_mask_2_REG),	// @[tage.scala:350:47]
    .io_update_u_mask_3    (t_io_update_u_mask_3_REG),	// @[tage.scala:350:47]
    .io_update_u_0         (t_io_update_u_0_REG),	// @[tage.scala:351:47]
    .io_update_u_1         (t_io_update_u_1_REG),	// @[tage.scala:351:47]
    .io_update_u_2         (t_io_update_u_2_REG),	// @[tage.scala:351:47]
    .io_update_u_3         (t_io_update_u_3_REG),	// @[tage.scala:351:47]
    .io_f3_resp_0_valid    (_tables_0_io_f3_resp_0_valid),
    .io_f3_resp_0_bits_ctr (_tables_0_io_f3_resp_0_bits_ctr),
    .io_f3_resp_0_bits_u   (_tables_0_io_f3_resp_0_bits_u),
    .io_f3_resp_1_valid    (_tables_0_io_f3_resp_1_valid),
    .io_f3_resp_1_bits_ctr (_tables_0_io_f3_resp_1_bits_ctr),
    .io_f3_resp_1_bits_u   (_tables_0_io_f3_resp_1_bits_u),
    .io_f3_resp_2_valid    (_tables_0_io_f3_resp_2_valid),
    .io_f3_resp_2_bits_ctr (_tables_0_io_f3_resp_2_bits_ctr),
    .io_f3_resp_2_bits_u   (_tables_0_io_f3_resp_2_bits_u),
    .io_f3_resp_3_valid    (_tables_0_io_f3_resp_3_valid),
    .io_f3_resp_3_bits_ctr (_tables_0_io_f3_resp_3_bits_ctr),
    .io_f3_resp_3_bits_u   (_tables_0_io_f3_resp_3_bits_u)
  );
  assign io_resp_f1_0_taken = io_resp_in_0_f1_0_taken;
  assign io_resp_f1_0_is_br = io_resp_in_0_f1_0_is_br;
  assign io_resp_f1_0_is_jal = io_resp_in_0_f1_0_is_jal;
  assign io_resp_f1_0_predicted_pc_valid = io_resp_in_0_f1_0_predicted_pc_valid;
  assign io_resp_f1_0_predicted_pc_bits = io_resp_in_0_f1_0_predicted_pc_bits;
  assign io_resp_f1_1_taken = io_resp_in_0_f1_1_taken;
  assign io_resp_f1_1_is_br = io_resp_in_0_f1_1_is_br;
  assign io_resp_f1_1_is_jal = io_resp_in_0_f1_1_is_jal;
  assign io_resp_f1_1_predicted_pc_valid = io_resp_in_0_f1_1_predicted_pc_valid;
  assign io_resp_f1_1_predicted_pc_bits = io_resp_in_0_f1_1_predicted_pc_bits;
  assign io_resp_f1_2_taken = io_resp_in_0_f1_2_taken;
  assign io_resp_f1_2_is_br = io_resp_in_0_f1_2_is_br;
  assign io_resp_f1_2_is_jal = io_resp_in_0_f1_2_is_jal;
  assign io_resp_f1_2_predicted_pc_valid = io_resp_in_0_f1_2_predicted_pc_valid;
  assign io_resp_f1_2_predicted_pc_bits = io_resp_in_0_f1_2_predicted_pc_bits;
  assign io_resp_f1_3_taken = io_resp_in_0_f1_3_taken;
  assign io_resp_f1_3_is_br = io_resp_in_0_f1_3_is_br;
  assign io_resp_f1_3_is_jal = io_resp_in_0_f1_3_is_jal;
  assign io_resp_f1_3_predicted_pc_valid = io_resp_in_0_f1_3_predicted_pc_valid;
  assign io_resp_f1_3_predicted_pc_bits = io_resp_in_0_f1_3_predicted_pc_bits;
  assign io_resp_f2_0_taken = io_resp_in_0_f2_0_taken;
  assign io_resp_f2_0_is_br = io_resp_in_0_f2_0_is_br;
  assign io_resp_f2_0_is_jal = io_resp_in_0_f2_0_is_jal;
  assign io_resp_f2_0_predicted_pc_valid = io_resp_in_0_f2_0_predicted_pc_valid;
  assign io_resp_f2_0_predicted_pc_bits = io_resp_in_0_f2_0_predicted_pc_bits;
  assign io_resp_f2_1_taken = io_resp_in_0_f2_1_taken;
  assign io_resp_f2_1_is_br = io_resp_in_0_f2_1_is_br;
  assign io_resp_f2_1_is_jal = io_resp_in_0_f2_1_is_jal;
  assign io_resp_f2_1_predicted_pc_valid = io_resp_in_0_f2_1_predicted_pc_valid;
  assign io_resp_f2_1_predicted_pc_bits = io_resp_in_0_f2_1_predicted_pc_bits;
  assign io_resp_f2_2_taken = io_resp_in_0_f2_2_taken;
  assign io_resp_f2_2_is_br = io_resp_in_0_f2_2_is_br;
  assign io_resp_f2_2_is_jal = io_resp_in_0_f2_2_is_jal;
  assign io_resp_f2_2_predicted_pc_valid = io_resp_in_0_f2_2_predicted_pc_valid;
  assign io_resp_f2_2_predicted_pc_bits = io_resp_in_0_f2_2_predicted_pc_bits;
  assign io_resp_f2_3_taken = io_resp_in_0_f2_3_taken;
  assign io_resp_f2_3_is_br = io_resp_in_0_f2_3_is_br;
  assign io_resp_f2_3_is_jal = io_resp_in_0_f2_3_is_jal;
  assign io_resp_f2_3_predicted_pc_valid = io_resp_in_0_f2_3_predicted_pc_valid;
  assign io_resp_f2_3_predicted_pc_bits = io_resp_in_0_f2_3_predicted_pc_bits;
  assign io_resp_f3_0_taken = _io_resp_f3_0_taken_output;	// @[tage.scala:259:25, :264:18, :265:29]
  assign io_resp_f3_0_is_br = io_resp_in_0_f3_0_is_br;
  assign io_resp_f3_0_is_jal = io_resp_in_0_f3_0_is_jal;
  assign io_resp_f3_0_predicted_pc_valid = io_resp_in_0_f3_0_predicted_pc_valid;
  assign io_resp_f3_0_predicted_pc_bits = io_resp_in_0_f3_0_predicted_pc_bits;
  assign io_resp_f3_1_taken = _io_resp_f3_1_taken_output;	// @[tage.scala:259:25, :264:18, :265:29]
  assign io_resp_f3_1_is_br = io_resp_in_0_f3_1_is_br;
  assign io_resp_f3_1_is_jal = io_resp_in_0_f3_1_is_jal;
  assign io_resp_f3_1_predicted_pc_valid = io_resp_in_0_f3_1_predicted_pc_valid;
  assign io_resp_f3_1_predicted_pc_bits = io_resp_in_0_f3_1_predicted_pc_bits;
  assign io_resp_f3_2_taken = _io_resp_f3_2_taken_output;	// @[tage.scala:259:25, :264:18, :265:29]
  assign io_resp_f3_2_is_br = io_resp_in_0_f3_2_is_br;
  assign io_resp_f3_2_is_jal = io_resp_in_0_f3_2_is_jal;
  assign io_resp_f3_2_predicted_pc_valid = io_resp_in_0_f3_2_predicted_pc_valid;
  assign io_resp_f3_2_predicted_pc_bits = io_resp_in_0_f3_2_predicted_pc_bits;
  assign io_resp_f3_3_taken = _io_resp_f3_3_taken_output;	// @[tage.scala:259:25, :264:18, :265:29]
  assign io_resp_f3_3_is_br = io_resp_in_0_f3_3_is_br;
  assign io_resp_f3_3_is_jal = io_resp_in_0_f3_3_is_jal;
  assign io_resp_f3_3_predicted_pc_valid = io_resp_in_0_f3_3_predicted_pc_valid;
  assign io_resp_f3_3_predicted_pc_bits = io_resp_in_0_f3_3_predicted_pc_bits;
  assign io_f3_meta = {18'h0, _tables_0_io_f3_resp_3_valid, _tables_0_io_f3_resp_2_valid, _tables_0_io_f3_resp_1_valid, _tables_0_io_f3_resp_0_valid, io_resp_in_0_f3_3_taken != _io_resp_f3_3_taken_output, io_resp_in_0_f3_2_taken != _io_resp_f3_2_taken_output, io_resp_in_0_f3_1_taken != _io_resp_f3_1_taken_output, io_resp_in_0_f3_0_taken != _io_resp_f3_0_taken_output, _tables_0_io_f3_resp_3_bits_u, _tables_0_io_f3_resp_2_bits_u, _tables_0_io_f3_resp_1_bits_u, _tables_0_io_f3_resp_0_bits_u, _tables_0_io_f3_resp_3_bits_ctr, _tables_0_io_f3_resp_2_bits_ctr, _tables_0_io_f3_resp_1_bits_ctr, _tables_0_io_f3_resp_0_bits_ctr, ~_tables_0_io_f3_resp_3_valid & _tables_0_io_f3_resp_3_bits_u == 2'h0 & ~_tables_0_io_f3_resp_3_valid, ~_tables_0_io_f3_resp_2_valid & _tables_0_io_f3_resp_2_bits_u == 2'h0 & ~_tables_0_io_f3_resp_2_valid, ~_tables_0_io_f3_resp_1_valid & _tables_0_io_f3_resp_1_bits_u == 2'h0 & ~_tables_0_io_f3_resp_1_valid, ~_tables_0_io_f3_resp_0_valid & _tables_0_io_f3_resp_0_bits_u == 2'h0 & ~_tables_0_io_f3_resp_0_valid};	// @[tage.scala:224:21, :259:25, :264:18, :265:29, :275:48, :282:{33,60,77}, :321:43, :359:14]
endmodule

