// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module L1Controller(
  input         clock,
                reset,
                io_req_valid,
  input  [63:0] io_req_bits_addr,
                io_req_bits_data,
  input  [7:0]  io_req_bits_mask,
  input         io_req_bits_write,
                io_resp_ready,
  input  [1:0]  io_dprv,
  input         io_dv,
                io_mem_req_ready,
                io_mem_resp_valid,
  input  [63:0] io_mem_resp_bits_data,
  output        io_req_ready,
                io_resp_valid,
  output [63:0] io_resp_bits_data,
  output        io_mem_req_valid,
  output [39:0] io_mem_req_bits_addr,
  output [7:0]  io_mem_req_bits_tag,
  output [4:0]  io_mem_req_bits_cmd,
  output [1:0]  io_mem_req_bits_dprv,
  output        io_mem_req_bits_dv,
  output [63:0] io_mem_req_bits_data,
  output [7:0]  io_mem_req_bits_mask
);

  LossyBuffer buf_buffer (	// @[LossyBuffer.scala:53:24]
    .clock            (clock),
    .reset            (reset),
    .io_in_valid      (io_mem_resp_valid),
    .io_in_bits_data  (io_mem_resp_bits_data),
    .io_out_ready     (io_resp_ready),
    .io_out_valid     (io_resp_valid),
    .io_out_bits_data (io_resp_bits_data)
  );
  assign io_req_ready = io_mem_req_ready;
  assign io_mem_req_valid = io_req_valid;
  assign io_mem_req_bits_addr = io_req_bits_addr[39:0];	// @[L1Controller.scala:50:29]
  assign io_mem_req_bits_tag = {3'h0, io_req_bits_addr[4:0]};	// @[L1Controller.scala:47:{17,42}]
  assign io_mem_req_bits_cmd = {4'h0, io_req_bits_write};	// @[L1Controller.scala:49:17]
  assign io_mem_req_bits_dprv = io_dprv;
  assign io_mem_req_bits_dv = io_dv;
  assign io_mem_req_bits_data = io_req_bits_data;
  assign io_mem_req_bits_mask = io_req_bits_mask;
endmodule

