// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module TLXbar_5(
  input         clock,
                reset,
                auto_in_3_a_valid,
  input  [2:0]  auto_in_3_a_bits_opcode,
                auto_in_3_a_bits_param,
                auto_in_3_a_bits_size,
  input  [3:0]  auto_in_3_a_bits_source,
  input  [34:0] auto_in_3_a_bits_address,
  input  [7:0]  auto_in_3_a_bits_mask,
  input  [63:0] auto_in_3_a_bits_data,
  input         auto_in_3_a_bits_corrupt,
                auto_in_3_d_ready,
                auto_in_2_a_valid,
  input  [2:0]  auto_in_2_a_bits_opcode,
                auto_in_2_a_bits_param,
                auto_in_2_a_bits_size,
  input  [3:0]  auto_in_2_a_bits_source,
  input  [34:0] auto_in_2_a_bits_address,
  input  [7:0]  auto_in_2_a_bits_mask,
  input  [63:0] auto_in_2_a_bits_data,
  input         auto_in_2_a_bits_corrupt,
                auto_in_2_d_ready,
                auto_in_1_a_valid,
  input  [2:0]  auto_in_1_a_bits_opcode,
                auto_in_1_a_bits_param,
                auto_in_1_a_bits_size,
  input  [3:0]  auto_in_1_a_bits_source,
  input  [34:0] auto_in_1_a_bits_address,
  input  [7:0]  auto_in_1_a_bits_mask,
  input  [63:0] auto_in_1_a_bits_data,
  input         auto_in_1_a_bits_corrupt,
                auto_in_1_d_ready,
                auto_in_0_a_valid,
  input  [2:0]  auto_in_0_a_bits_opcode,
                auto_in_0_a_bits_param,
                auto_in_0_a_bits_size,
  input  [3:0]  auto_in_0_a_bits_source,
  input  [34:0] auto_in_0_a_bits_address,
  input  [7:0]  auto_in_0_a_bits_mask,
  input  [63:0] auto_in_0_a_bits_data,
  input         auto_in_0_a_bits_corrupt,
                auto_in_0_d_ready,
                auto_out_1_a_ready,
                auto_out_1_d_valid,
  input  [2:0]  auto_out_1_d_bits_opcode,
  input  [1:0]  auto_out_1_d_bits_param,
  input  [2:0]  auto_out_1_d_bits_size,
  input  [5:0]  auto_out_1_d_bits_source,
  input         auto_out_1_d_bits_sink,
                auto_out_1_d_bits_denied,
  input  [63:0] auto_out_1_d_bits_data,
  input         auto_out_1_d_bits_corrupt,
                auto_out_0_a_ready,
                auto_out_0_d_valid,
  input  [2:0]  auto_out_0_d_bits_opcode,
                auto_out_0_d_bits_size,
  input  [5:0]  auto_out_0_d_bits_source,
  input  [63:0] auto_out_0_d_bits_data,
  output        auto_in_3_a_ready,
                auto_in_3_d_valid,
  output [2:0]  auto_in_3_d_bits_opcode,
  output [1:0]  auto_in_3_d_bits_param,
  output [2:0]  auto_in_3_d_bits_size,
  output [3:0]  auto_in_3_d_bits_source,
  output        auto_in_3_d_bits_sink,
                auto_in_3_d_bits_denied,
  output [63:0] auto_in_3_d_bits_data,
  output        auto_in_3_d_bits_corrupt,
                auto_in_2_a_ready,
                auto_in_2_d_valid,
  output [2:0]  auto_in_2_d_bits_opcode,
  output [1:0]  auto_in_2_d_bits_param,
  output [2:0]  auto_in_2_d_bits_size,
  output [3:0]  auto_in_2_d_bits_source,
  output        auto_in_2_d_bits_sink,
                auto_in_2_d_bits_denied,
  output [63:0] auto_in_2_d_bits_data,
  output        auto_in_2_d_bits_corrupt,
                auto_in_1_a_ready,
                auto_in_1_d_valid,
  output [2:0]  auto_in_1_d_bits_opcode,
  output [1:0]  auto_in_1_d_bits_param,
  output [2:0]  auto_in_1_d_bits_size,
  output [3:0]  auto_in_1_d_bits_source,
  output        auto_in_1_d_bits_sink,
                auto_in_1_d_bits_denied,
  output [63:0] auto_in_1_d_bits_data,
  output        auto_in_1_d_bits_corrupt,
                auto_in_0_a_ready,
                auto_in_0_d_valid,
  output [2:0]  auto_in_0_d_bits_opcode,
  output [1:0]  auto_in_0_d_bits_param,
  output [2:0]  auto_in_0_d_bits_size,
  output [3:0]  auto_in_0_d_bits_source,
  output        auto_in_0_d_bits_sink,
                auto_in_0_d_bits_denied,
  output [63:0] auto_in_0_d_bits_data,
  output        auto_in_0_d_bits_corrupt,
                auto_out_1_a_valid,
  output [2:0]  auto_out_1_a_bits_opcode,
                auto_out_1_a_bits_param,
                auto_out_1_a_bits_size,
  output [5:0]  auto_out_1_a_bits_source,
  output [34:0] auto_out_1_a_bits_address,
  output [7:0]  auto_out_1_a_bits_mask,
  output [63:0] auto_out_1_a_bits_data,
  output        auto_out_1_a_bits_corrupt,
                auto_out_1_d_ready,
                auto_out_0_a_valid,
  output [2:0]  auto_out_0_a_bits_opcode,
                auto_out_0_a_bits_param,
                auto_out_0_a_bits_size,
  output [5:0]  auto_out_0_a_bits_source,
  output [27:0] auto_out_0_a_bits_address,
  output [7:0]  auto_out_0_a_bits_mask,
  output [63:0] auto_out_0_a_bits_data,
  output        auto_out_0_a_bits_corrupt,
                auto_out_0_d_ready
);

  wire        allowed_5_1;	// @[Arbiter.scala:121:24]
  wire        allowed_5_0;	// @[Arbiter.scala:121:24]
  wire        allowed_4_1;	// @[Arbiter.scala:121:24]
  wire        allowed_4_0;	// @[Arbiter.scala:121:24]
  wire        allowed_3_1;	// @[Arbiter.scala:121:24]
  wire        allowed_3_0;	// @[Arbiter.scala:121:24]
  wire        allowed_2_1;	// @[Arbiter.scala:121:24]
  wire        allowed_2_0;	// @[Arbiter.scala:121:24]
  wire        allowed_1_3;	// @[Arbiter.scala:121:24]
  wire        allowed_1_2;	// @[Arbiter.scala:121:24]
  wire        allowed_1_1;	// @[Arbiter.scala:121:24]
  wire        allowed_1_0;	// @[Arbiter.scala:121:24]
  wire        allowed_3;	// @[Arbiter.scala:121:24]
  wire        allowed_2;	// @[Arbiter.scala:121:24]
  wire        allowed_1;	// @[Arbiter.scala:121:24]
  wire        allowed_0;	// @[Arbiter.scala:121:24]
  wire [5:0]  portsAOI_filtered_1_bits_source = {2'h3, auto_in_0_a_bits_source};	// @[Parameters.scala:54:32, Xbar.scala:239:55]
  wire [5:0]  portsAOI_filtered_1_1_bits_source = {2'h2, auto_in_1_a_bits_source};	// @[Parameters.scala:54:32, Xbar.scala:239:55]
  wire [5:0]  portsAOI_filtered_2_1_bits_source = {2'h1, auto_in_2_a_bits_source};	// @[Parameters.scala:54:32, Xbar.scala:239:29]
  wire [5:0]  portsAOI_filtered_3_1_bits_source = {2'h0, auto_in_3_a_bits_source};	// @[Xbar.scala:239:29]
  wire        requestAIO_0_0 = {auto_in_0_a_bits_address[34:31], ~(auto_in_0_a_bits_address[27])} == 5'h0;	// @[Parameters.scala:137:{31,45,65}]
  wire        requestAIO_0_1 = {auto_in_0_a_bits_address[34:31], auto_in_0_a_bits_address[27]} == 5'h0 | auto_in_0_a_bits_address[34:31] == 4'h1 | auto_in_0_a_bits_address[34:32] == 3'h1 | auto_in_0_a_bits_address[34:33] == 2'h1 | auto_in_0_a_bits_address[34:31] == 4'h8;	// @[Parameters.scala:54:32, :137:{31,45,65}, Xbar.scala:365:92]
  wire        requestAIO_1_0 = {auto_in_1_a_bits_address[34:31], ~(auto_in_1_a_bits_address[27])} == 5'h0;	// @[Parameters.scala:137:{31,45,65}]
  wire        requestAIO_1_1 = {auto_in_1_a_bits_address[34:31], auto_in_1_a_bits_address[27]} == 5'h0 | auto_in_1_a_bits_address[34:31] == 4'h1 | auto_in_1_a_bits_address[34:32] == 3'h1 | auto_in_1_a_bits_address[34:33] == 2'h1 | auto_in_1_a_bits_address[34:31] == 4'h8;	// @[Parameters.scala:54:32, :137:{31,45,65}, Xbar.scala:365:92]
  wire        requestAIO_2_0 = {auto_in_2_a_bits_address[34:31], ~(auto_in_2_a_bits_address[27])} == 5'h0;	// @[Parameters.scala:137:{31,45,65}]
  wire        requestAIO_2_1 = {auto_in_2_a_bits_address[34:31], auto_in_2_a_bits_address[27]} == 5'h0 | auto_in_2_a_bits_address[34:31] == 4'h1 | auto_in_2_a_bits_address[34:32] == 3'h1 | auto_in_2_a_bits_address[34:33] == 2'h1 | auto_in_2_a_bits_address[34:31] == 4'h8;	// @[Parameters.scala:54:32, :137:{31,45,65}, Xbar.scala:365:92]
  wire        requestAIO_3_0 = {auto_in_3_a_bits_address[34:31], ~(auto_in_3_a_bits_address[27])} == 5'h0;	// @[Parameters.scala:137:{31,45,65}]
  wire        requestAIO_3_1 = {auto_in_3_a_bits_address[34:31], auto_in_3_a_bits_address[27]} == 5'h0 | auto_in_3_a_bits_address[34:31] == 4'h1 | auto_in_3_a_bits_address[34:32] == 3'h1 | auto_in_3_a_bits_address[34:33] == 2'h1 | auto_in_3_a_bits_address[34:31] == 4'h8;	// @[Parameters.scala:54:32, :137:{31,45,65}, Xbar.scala:365:92]
  wire        requestDOI_0_1 = auto_out_0_d_bits_source[5:4] == 2'h2;	// @[Parameters.scala:54:{10,32}]
  wire        requestDOI_0_2 = auto_out_0_d_bits_source[5:4] == 2'h1;	// @[Parameters.scala:54:{10,32}]
  wire        requestDOI_0_3 = auto_out_0_d_bits_source[5:4] == 2'h0;	// @[Parameters.scala:54:{10,32}]
  wire        requestDOI_1_1 = auto_out_1_d_bits_source[5:4] == 2'h2;	// @[Parameters.scala:54:{10,32}]
  wire        requestDOI_1_2 = auto_out_1_d_bits_source[5:4] == 2'h1;	// @[Parameters.scala:54:{10,32}]
  wire        requestDOI_1_3 = auto_out_1_d_bits_source[5:4] == 2'h0;	// @[Parameters.scala:54:{10,32}]
  wire        portsAOI_filtered_0_earlyValid = auto_in_0_a_valid & requestAIO_0_0;	// @[Parameters.scala:137:65, Xbar.scala:430:50]
  wire        portsAOI_filtered_1_earlyValid = auto_in_0_a_valid & requestAIO_0_1;	// @[Xbar.scala:365:92, :430:50]
  wire        _portsAOI_in_0_a_ready_WIRE = requestAIO_0_0 & auto_out_0_a_ready & allowed_0 | requestAIO_0_1 & auto_out_1_a_ready & allowed_1_0;	// @[Arbiter.scala:121:24, Mux.scala:27:73, Parameters.scala:137:65, Xbar.scala:365:92]
  wire        portsAOI_filtered_1_0_earlyValid = auto_in_1_a_valid & requestAIO_1_0;	// @[Parameters.scala:137:65, Xbar.scala:430:50]
  wire        portsAOI_filtered_1_1_earlyValid = auto_in_1_a_valid & requestAIO_1_1;	// @[Xbar.scala:365:92, :430:50]
  wire        _portsAOI_in_1_a_ready_WIRE = requestAIO_1_0 & auto_out_0_a_ready & allowed_1 | requestAIO_1_1 & auto_out_1_a_ready & allowed_1_1;	// @[Arbiter.scala:121:24, Mux.scala:27:73, Parameters.scala:137:65, Xbar.scala:365:92]
  wire        portsAOI_filtered_2_0_earlyValid = auto_in_2_a_valid & requestAIO_2_0;	// @[Parameters.scala:137:65, Xbar.scala:430:50]
  wire        portsAOI_filtered_2_1_earlyValid = auto_in_2_a_valid & requestAIO_2_1;	// @[Xbar.scala:365:92, :430:50]
  wire        _portsAOI_in_2_a_ready_WIRE = requestAIO_2_0 & auto_out_0_a_ready & allowed_2 | requestAIO_2_1 & auto_out_1_a_ready & allowed_1_2;	// @[Arbiter.scala:121:24, Mux.scala:27:73, Parameters.scala:137:65, Xbar.scala:365:92]
  wire        portsAOI_filtered_3_0_earlyValid = auto_in_3_a_valid & requestAIO_3_0;	// @[Parameters.scala:137:65, Xbar.scala:430:50]
  wire        portsAOI_filtered_3_1_earlyValid = auto_in_3_a_valid & requestAIO_3_1;	// @[Xbar.scala:365:92, :430:50]
  wire        _portsAOI_in_3_a_ready_WIRE = requestAIO_3_0 & auto_out_0_a_ready & allowed_3 | requestAIO_3_1 & auto_out_1_a_ready & allowed_1_3;	// @[Arbiter.scala:121:24, Mux.scala:27:73, Parameters.scala:137:65, Xbar.scala:365:92]
  wire        out_10_earlyValid = auto_out_0_d_valid & (&(auto_out_0_d_bits_source[5:4]));	// @[Parameters.scala:54:{10,32}, Xbar.scala:181:40]
  wire        out_14_earlyValid = auto_out_0_d_valid & requestDOI_0_1;	// @[Parameters.scala:54:32, Xbar.scala:181:40]
  wire        out_18_earlyValid = auto_out_0_d_valid & requestDOI_0_2;	// @[Parameters.scala:54:32, Xbar.scala:181:40]
  wire        out_22_earlyValid = auto_out_0_d_valid & requestDOI_0_3;	// @[Parameters.scala:54:32, Xbar.scala:181:40]
  wire        out_11_earlyValid = auto_out_1_d_valid & (&(auto_out_1_d_bits_source[5:4]));	// @[Parameters.scala:54:{10,32}, Xbar.scala:181:40]
  wire        out_15_earlyValid = auto_out_1_d_valid & requestDOI_1_1;	// @[Parameters.scala:54:32, Xbar.scala:181:40]
  wire        out_19_earlyValid = auto_out_1_d_valid & requestDOI_1_2;	// @[Parameters.scala:54:32, Xbar.scala:181:40]
  wire        out_23_earlyValid = auto_out_1_d_valid & requestDOI_1_3;	// @[Parameters.scala:54:32, Xbar.scala:181:40]
  reg  [2:0]  beatsLeft;	// @[Arbiter.scala:87:30]
  wire        idle = beatsLeft == 3'h0;	// @[Arbiter.scala:87:30, :88:28, Bundles.scala:259:74]
  wire [3:0]  readys_valid = {portsAOI_filtered_3_0_earlyValid, portsAOI_filtered_2_0_earlyValid, portsAOI_filtered_1_0_earlyValid, portsAOI_filtered_0_earlyValid};	// @[Cat.scala:33:92, Xbar.scala:430:50]
  reg  [3:0]  readys_mask;	// @[Arbiter.scala:23:23]
  wire [3:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;	// @[Arbiter.scala:23:23, :24:{28,30}, Cat.scala:33:92]
  wire [2:0]  _GEN = _readys_filter_T_1[2:0] | _readys_filter_T_1[3:1];	// @[Arbiter.scala:24:28, package.scala:254:43]
  wire        _GEN_0 = portsAOI_filtered_3_0_earlyValid | _readys_filter_T_1[0];	// @[Arbiter.scala:24:28, Xbar.scala:430:50, package.scala:254:43]
  wire [3:0]  readys_readys = ~({readys_mask[3], _readys_filter_T_1[3] | readys_mask[2], _GEN[2] | readys_mask[1], _GEN[1] | _readys_filter_T_1[3] | readys_mask[0]} & {_GEN[0] | _GEN[2], _GEN_0 | _GEN[1], portsAOI_filtered_2_0_earlyValid | portsAOI_filtered_3_0_earlyValid | _GEN[0], portsAOI_filtered_1_0_earlyValid | portsAOI_filtered_2_0_earlyValid | _GEN_0});	// @[Arbiter.scala:23:23, :24:28, :25:58, :26:{18,29,39,48}, Xbar.scala:430:50, package.scala:254:43]
  wire        earlyWinner_0 = readys_readys[0] & portsAOI_filtered_0_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:430:50]
  wire        earlyWinner_1 = readys_readys[1] & portsAOI_filtered_1_0_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:430:50]
  wire        earlyWinner_2 = readys_readys[2] & portsAOI_filtered_2_0_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:430:50]
  wire        earlyWinner_3 = readys_readys[3] & portsAOI_filtered_3_0_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:430:50]
  wire        _out_0_a_earlyValid_T = portsAOI_filtered_0_earlyValid | portsAOI_filtered_1_0_earlyValid;	// @[Arbiter.scala:107:36, Xbar.scala:430:50]
  reg         state_0;	// @[Arbiter.scala:116:26]
  reg         state_1;	// @[Arbiter.scala:116:26]
  reg         state_2;	// @[Arbiter.scala:116:26]
  reg         state_3;	// @[Arbiter.scala:116:26]
  wire        muxStateEarly_0 = idle ? earlyWinner_0 : state_0;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  wire        muxStateEarly_1 = idle ? earlyWinner_1 : state_1;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  wire        muxStateEarly_2 = idle ? earlyWinner_2 : state_2;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  wire        muxStateEarly_3 = idle ? earlyWinner_3 : state_3;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  assign allowed_0 = idle ? readys_readys[0] : state_0;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  assign allowed_1 = idle ? readys_readys[1] : state_1;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  assign allowed_2 = idle ? readys_readys[2] : state_2;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  assign allowed_3 = idle ? readys_readys[3] : state_3;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  wire        x1_out_1_valid = idle ? _out_0_a_earlyValid_T | portsAOI_filtered_2_0_earlyValid | portsAOI_filtered_3_0_earlyValid : state_0 & portsAOI_filtered_0_earlyValid | state_1 & portsAOI_filtered_1_0_earlyValid | state_2 & portsAOI_filtered_2_0_earlyValid | state_3 & portsAOI_filtered_3_0_earlyValid;	// @[Arbiter.scala:88:28, :107:36, :116:26, :125:{29,56}, Mux.scala:27:73, Xbar.scala:430:50]
  reg  [2:0]  beatsLeft_1;	// @[Arbiter.scala:87:30]
  wire        idle_1 = beatsLeft_1 == 3'h0;	// @[Arbiter.scala:87:30, :88:28, Bundles.scala:259:74]
  wire [3:0]  readys_valid_1 = {portsAOI_filtered_3_1_earlyValid, portsAOI_filtered_2_1_earlyValid, portsAOI_filtered_1_1_earlyValid, portsAOI_filtered_1_earlyValid};	// @[Cat.scala:33:92, Xbar.scala:430:50]
  reg  [3:0]  readys_mask_1;	// @[Arbiter.scala:23:23]
  wire [3:0]  _readys_filter_T_3 = readys_valid_1 & ~readys_mask_1;	// @[Arbiter.scala:23:23, :24:{28,30}, Cat.scala:33:92]
  wire [2:0]  _GEN_1 = _readys_filter_T_3[2:0] | _readys_filter_T_3[3:1];	// @[Arbiter.scala:24:28, package.scala:254:43]
  wire        _GEN_2 = portsAOI_filtered_3_1_earlyValid | _readys_filter_T_3[0];	// @[Arbiter.scala:24:28, Xbar.scala:430:50, package.scala:254:43]
  wire [3:0]  readys_readys_1 = ~({readys_mask_1[3], _readys_filter_T_3[3] | readys_mask_1[2], _GEN_1[2] | readys_mask_1[1], _GEN_1[1] | _readys_filter_T_3[3] | readys_mask_1[0]} & {_GEN_1[0] | _GEN_1[2], _GEN_2 | _GEN_1[1], portsAOI_filtered_2_1_earlyValid | portsAOI_filtered_3_1_earlyValid | _GEN_1[0], portsAOI_filtered_1_1_earlyValid | portsAOI_filtered_2_1_earlyValid | _GEN_2});	// @[Arbiter.scala:23:23, :24:28, :25:58, :26:{18,29,39,48}, Xbar.scala:430:50, package.scala:254:43]
  wire        earlyWinner_1_0 = readys_readys_1[0] & portsAOI_filtered_1_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:430:50]
  wire        earlyWinner_1_1 = readys_readys_1[1] & portsAOI_filtered_1_1_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:430:50]
  wire        earlyWinner_1_2 = readys_readys_1[2] & portsAOI_filtered_2_1_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:430:50]
  wire        earlyWinner_1_3 = readys_readys_1[3] & portsAOI_filtered_3_1_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:430:50]
  wire        _out_1_a_earlyValid_T = portsAOI_filtered_1_earlyValid | portsAOI_filtered_1_1_earlyValid;	// @[Arbiter.scala:107:36, Xbar.scala:430:50]
  reg         state_1_0;	// @[Arbiter.scala:116:26]
  reg         state_1_1;	// @[Arbiter.scala:116:26]
  reg         state_1_2;	// @[Arbiter.scala:116:26]
  reg         state_1_3;	// @[Arbiter.scala:116:26]
  wire        muxStateEarly_1_0 = idle_1 ? earlyWinner_1_0 : state_1_0;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  wire        muxStateEarly_1_1 = idle_1 ? earlyWinner_1_1 : state_1_1;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  wire        muxStateEarly_1_2 = idle_1 ? earlyWinner_1_2 : state_1_2;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  wire        muxStateEarly_1_3 = idle_1 ? earlyWinner_1_3 : state_1_3;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  assign allowed_1_0 = idle_1 ? readys_readys_1[0] : state_1_0;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  assign allowed_1_1 = idle_1 ? readys_readys_1[1] : state_1_1;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  assign allowed_1_2 = idle_1 ? readys_readys_1[2] : state_1_2;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  assign allowed_1_3 = idle_1 ? readys_readys_1[3] : state_1_3;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  wire        bundleOut_1_out_1_valid = idle_1 ? _out_1_a_earlyValid_T | portsAOI_filtered_2_1_earlyValid | portsAOI_filtered_3_1_earlyValid : state_1_0 & portsAOI_filtered_1_earlyValid | state_1_1 & portsAOI_filtered_1_1_earlyValid | state_1_2 & portsAOI_filtered_2_1_earlyValid | state_1_3 & portsAOI_filtered_3_1_earlyValid;	// @[Arbiter.scala:88:28, :107:36, :116:26, :125:{29,56}, Mux.scala:27:73, Xbar.scala:430:50]
  reg  [2:0]  beatsLeft_2;	// @[Arbiter.scala:87:30]
  wire        idle_2 = beatsLeft_2 == 3'h0;	// @[Arbiter.scala:87:30, :88:28, Bundles.scala:259:74]
  wire [1:0]  readys_valid_2 = {out_11_earlyValid, out_10_earlyValid};	// @[Cat.scala:33:92, Xbar.scala:181:40]
  reg  [1:0]  readys_mask_2;	// @[Arbiter.scala:23:23]
  wire [1:0]  _readys_filter_T_5 = readys_valid_2 & ~readys_mask_2;	// @[Arbiter.scala:23:23, :24:{28,30}, Cat.scala:33:92]
  wire [1:0]  readys_readys_2 = ~({readys_mask_2[1], _readys_filter_T_5[1] | readys_mask_2[0]} & {|_readys_filter_T_5, out_11_earlyValid | _readys_filter_T_5[0]});	// @[Arbiter.scala:23:23, :24:28, :25:58, :26:{18,29,39,48}, Xbar.scala:181:40, package.scala:254:43]
  wire        earlyWinner_2_0 = readys_readys_2[0] & out_10_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:181:40]
  wire        earlyWinner_2_1 = readys_readys_2[1] & out_11_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:181:40]
  wire        _sink_ACancel_earlyValid_T = out_10_earlyValid | out_11_earlyValid;	// @[Arbiter.scala:107:36, Xbar.scala:181:40]
  reg         state_2_0;	// @[Arbiter.scala:116:26]
  reg         state_2_1;	// @[Arbiter.scala:116:26]
  wire        muxStateEarly_2_0 = idle_2 ? earlyWinner_2_0 : state_2_0;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  wire        muxStateEarly_2_1 = idle_2 ? earlyWinner_2_1 : state_2_1;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  assign allowed_2_0 = idle_2 ? readys_readys_2[0] : state_2_0;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  assign allowed_2_1 = idle_2 ? readys_readys_2[1] : state_2_1;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  wire        out_12_valid = idle_2 ? _sink_ACancel_earlyValid_T : state_2_0 & out_10_earlyValid | state_2_1 & out_11_earlyValid;	// @[Arbiter.scala:88:28, :107:36, :116:26, :125:29, Mux.scala:27:73, Xbar.scala:181:40]
  wire        out_12_bits_corrupt = muxStateEarly_2_1 & auto_out_1_d_bits_corrupt;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire        out_12_bits_denied = muxStateEarly_2_1 & auto_out_1_d_bits_denied;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire        out_12_bits_sink = muxStateEarly_2_1 & auto_out_1_d_bits_sink;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire [3:0]  out_d_bits_source = (muxStateEarly_2_0 ? auto_out_0_d_bits_source[3:0] : 4'h0) | (muxStateEarly_2_1 ? auto_out_1_d_bits_source[3:0] : 4'h0);	// @[Arbiter.scala:25:66, :117:30, Mux.scala:27:73]
  wire [2:0]  out_12_bits_size = (muxStateEarly_2_0 ? auto_out_0_d_bits_size : 3'h0) | (muxStateEarly_2_1 ? auto_out_1_d_bits_size : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  wire [1:0]  out_12_bits_param = muxStateEarly_2_1 ? auto_out_1_d_bits_param : 2'h0;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire [2:0]  out_12_bits_opcode = (muxStateEarly_2_0 ? auto_out_0_d_bits_opcode : 3'h0) | (muxStateEarly_2_1 ? auto_out_1_d_bits_opcode : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  reg  [2:0]  beatsLeft_3;	// @[Arbiter.scala:87:30]
  wire        idle_3 = beatsLeft_3 == 3'h0;	// @[Arbiter.scala:87:30, :88:28, Bundles.scala:259:74]
  wire [1:0]  readys_valid_3 = {out_15_earlyValid, out_14_earlyValid};	// @[Cat.scala:33:92, Xbar.scala:181:40]
  reg  [1:0]  readys_mask_3;	// @[Arbiter.scala:23:23]
  wire [1:0]  _readys_filter_T_7 = readys_valid_3 & ~readys_mask_3;	// @[Arbiter.scala:23:23, :24:{28,30}, Cat.scala:33:92]
  wire [1:0]  readys_readys_3 = ~({readys_mask_3[1], _readys_filter_T_7[1] | readys_mask_3[0]} & {|_readys_filter_T_7, out_15_earlyValid | _readys_filter_T_7[0]});	// @[Arbiter.scala:23:23, :24:28, :25:58, :26:{18,29,39,48}, Xbar.scala:181:40, package.scala:254:43]
  wire        earlyWinner_3_0 = readys_readys_3[0] & out_14_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:181:40]
  wire        earlyWinner_3_1 = readys_readys_3[1] & out_15_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:181:40]
  wire        _sink_ACancel_earlyValid_T_5 = out_14_earlyValid | out_15_earlyValid;	// @[Arbiter.scala:107:36, Xbar.scala:181:40]
  reg         state_3_0;	// @[Arbiter.scala:116:26]
  reg         state_3_1;	// @[Arbiter.scala:116:26]
  wire        muxStateEarly_3_0 = idle_3 ? earlyWinner_3_0 : state_3_0;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  wire        muxStateEarly_3_1 = idle_3 ? earlyWinner_3_1 : state_3_1;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  assign allowed_3_0 = idle_3 ? readys_readys_3[0] : state_3_0;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  assign allowed_3_1 = idle_3 ? readys_readys_3[1] : state_3_1;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  wire        out_16_valid = idle_3 ? _sink_ACancel_earlyValid_T_5 : state_3_0 & out_14_earlyValid | state_3_1 & out_15_earlyValid;	// @[Arbiter.scala:88:28, :107:36, :116:26, :125:29, Mux.scala:27:73, Xbar.scala:181:40]
  wire        out_16_bits_corrupt = muxStateEarly_3_1 & auto_out_1_d_bits_corrupt;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire        out_16_bits_denied = muxStateEarly_3_1 & auto_out_1_d_bits_denied;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire        out_16_bits_sink = muxStateEarly_3_1 & auto_out_1_d_bits_sink;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire [3:0]  out_1_d_bits_source = (muxStateEarly_3_0 ? auto_out_0_d_bits_source[3:0] : 4'h0) | (muxStateEarly_3_1 ? auto_out_1_d_bits_source[3:0] : 4'h0);	// @[Arbiter.scala:25:66, :117:30, Mux.scala:27:73]
  wire [2:0]  out_16_bits_size = (muxStateEarly_3_0 ? auto_out_0_d_bits_size : 3'h0) | (muxStateEarly_3_1 ? auto_out_1_d_bits_size : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  wire [1:0]  out_16_bits_param = muxStateEarly_3_1 ? auto_out_1_d_bits_param : 2'h0;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire [2:0]  out_16_bits_opcode = (muxStateEarly_3_0 ? auto_out_0_d_bits_opcode : 3'h0) | (muxStateEarly_3_1 ? auto_out_1_d_bits_opcode : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  reg  [2:0]  beatsLeft_4;	// @[Arbiter.scala:87:30]
  wire        idle_4 = beatsLeft_4 == 3'h0;	// @[Arbiter.scala:87:30, :88:28, Bundles.scala:259:74]
  wire [1:0]  readys_valid_4 = {out_19_earlyValid, out_18_earlyValid};	// @[Cat.scala:33:92, Xbar.scala:181:40]
  reg  [1:0]  readys_mask_4;	// @[Arbiter.scala:23:23]
  wire [1:0]  _readys_filter_T_9 = readys_valid_4 & ~readys_mask_4;	// @[Arbiter.scala:23:23, :24:{28,30}, Cat.scala:33:92]
  wire [1:0]  readys_readys_4 = ~({readys_mask_4[1], _readys_filter_T_9[1] | readys_mask_4[0]} & {|_readys_filter_T_9, out_19_earlyValid | _readys_filter_T_9[0]});	// @[Arbiter.scala:23:23, :24:28, :25:58, :26:{18,29,39,48}, Xbar.scala:181:40, package.scala:254:43]
  wire        earlyWinner_4_0 = readys_readys_4[0] & out_18_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:181:40]
  wire        earlyWinner_4_1 = readys_readys_4[1] & out_19_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:181:40]
  wire        _sink_ACancel_earlyValid_T_10 = out_18_earlyValid | out_19_earlyValid;	// @[Arbiter.scala:107:36, Xbar.scala:181:40]
  reg         state_4_0;	// @[Arbiter.scala:116:26]
  reg         state_4_1;	// @[Arbiter.scala:116:26]
  wire        muxStateEarly_4_0 = idle_4 ? earlyWinner_4_0 : state_4_0;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  wire        muxStateEarly_4_1 = idle_4 ? earlyWinner_4_1 : state_4_1;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  assign allowed_4_0 = idle_4 ? readys_readys_4[0] : state_4_0;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  assign allowed_4_1 = idle_4 ? readys_readys_4[1] : state_4_1;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  wire        out_20_valid = idle_4 ? _sink_ACancel_earlyValid_T_10 : state_4_0 & out_18_earlyValid | state_4_1 & out_19_earlyValid;	// @[Arbiter.scala:88:28, :107:36, :116:26, :125:29, Mux.scala:27:73, Xbar.scala:181:40]
  wire        out_20_bits_corrupt = muxStateEarly_4_1 & auto_out_1_d_bits_corrupt;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire        out_20_bits_denied = muxStateEarly_4_1 & auto_out_1_d_bits_denied;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire        out_20_bits_sink = muxStateEarly_4_1 & auto_out_1_d_bits_sink;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire [3:0]  out_2_d_bits_source = (muxStateEarly_4_0 ? auto_out_0_d_bits_source[3:0] : 4'h0) | (muxStateEarly_4_1 ? auto_out_1_d_bits_source[3:0] : 4'h0);	// @[Arbiter.scala:25:66, :117:30, Mux.scala:27:73]
  wire [2:0]  out_20_bits_size = (muxStateEarly_4_0 ? auto_out_0_d_bits_size : 3'h0) | (muxStateEarly_4_1 ? auto_out_1_d_bits_size : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  wire [1:0]  out_20_bits_param = muxStateEarly_4_1 ? auto_out_1_d_bits_param : 2'h0;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire [2:0]  out_20_bits_opcode = (muxStateEarly_4_0 ? auto_out_0_d_bits_opcode : 3'h0) | (muxStateEarly_4_1 ? auto_out_1_d_bits_opcode : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  reg  [2:0]  beatsLeft_5;	// @[Arbiter.scala:87:30]
  wire        idle_5 = beatsLeft_5 == 3'h0;	// @[Arbiter.scala:87:30, :88:28, Bundles.scala:259:74]
  wire [1:0]  readys_valid_5 = {out_23_earlyValid, out_22_earlyValid};	// @[Cat.scala:33:92, Xbar.scala:181:40]
  reg  [1:0]  readys_mask_5;	// @[Arbiter.scala:23:23]
  wire [1:0]  _readys_filter_T_11 = readys_valid_5 & ~readys_mask_5;	// @[Arbiter.scala:23:23, :24:{28,30}, Cat.scala:33:92]
  wire [1:0]  readys_readys_5 = ~({readys_mask_5[1], _readys_filter_T_11[1] | readys_mask_5[0]} & {|_readys_filter_T_11, out_23_earlyValid | _readys_filter_T_11[0]});	// @[Arbiter.scala:23:23, :24:28, :25:58, :26:{18,29,39,48}, Xbar.scala:181:40, package.scala:254:43]
  wire        earlyWinner_5_0 = readys_readys_5[0] & out_22_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:181:40]
  wire        earlyWinner_5_1 = readys_readys_5[1] & out_23_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :97:79, Xbar.scala:181:40]
  wire        _sink_ACancel_earlyValid_T_15 = out_22_earlyValid | out_23_earlyValid;	// @[Arbiter.scala:107:36, Xbar.scala:181:40]
  reg         state_5_0;	// @[Arbiter.scala:116:26]
  reg         state_5_1;	// @[Arbiter.scala:116:26]
  wire        muxStateEarly_5_0 = idle_5 ? earlyWinner_5_0 : state_5_0;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  wire        muxStateEarly_5_1 = idle_5 ? earlyWinner_5_1 : state_5_1;	// @[Arbiter.scala:88:28, :97:79, :116:26, :117:30]
  assign allowed_5_0 = idle_5 ? readys_readys_5[0] : state_5_0;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  assign allowed_5_1 = idle_5 ? readys_readys_5[1] : state_5_1;	// @[Arbiter.scala:26:18, :88:28, :95:86, :116:26, :121:24]
  wire        out_24_valid = idle_5 ? _sink_ACancel_earlyValid_T_15 : state_5_0 & out_22_earlyValid | state_5_1 & out_23_earlyValid;	// @[Arbiter.scala:88:28, :107:36, :116:26, :125:29, Mux.scala:27:73, Xbar.scala:181:40]
  wire        out_24_bits_corrupt = muxStateEarly_5_1 & auto_out_1_d_bits_corrupt;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire        out_24_bits_denied = muxStateEarly_5_1 & auto_out_1_d_bits_denied;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire        out_24_bits_sink = muxStateEarly_5_1 & auto_out_1_d_bits_sink;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire [3:0]  out_3_d_bits_source = (muxStateEarly_5_0 ? auto_out_0_d_bits_source[3:0] : 4'h0) | (muxStateEarly_5_1 ? auto_out_1_d_bits_source[3:0] : 4'h0);	// @[Arbiter.scala:25:66, :117:30, Mux.scala:27:73]
  wire [2:0]  out_24_bits_size = (muxStateEarly_5_0 ? auto_out_0_d_bits_size : 3'h0) | (muxStateEarly_5_1 ? auto_out_1_d_bits_size : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  wire [1:0]  out_24_bits_param = muxStateEarly_5_1 ? auto_out_1_d_bits_param : 2'h0;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  wire [2:0]  out_24_bits_opcode = (muxStateEarly_5_0 ? auto_out_0_d_bits_opcode : 3'h0) | (muxStateEarly_5_1 ? auto_out_1_d_bits_opcode : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  wire [3:0]  _readys_mask_T = readys_readys & readys_valid;	// @[Arbiter.scala:26:18, :28:29, Cat.scala:33:92]
  wire [3:0]  _readys_mask_T_3 = _readys_mask_T | {_readys_mask_T[2:0], 1'h0};	// @[Arbiter.scala:28:29, package.scala:245:{43,53}]
  wire [3:0]  _readys_mask_T_8 = readys_readys_1 & readys_valid_1;	// @[Arbiter.scala:26:18, :28:29, Cat.scala:33:92]
  wire [3:0]  _readys_mask_T_11 = _readys_mask_T_8 | {_readys_mask_T_8[2:0], 1'h0};	// @[Arbiter.scala:28:29, package.scala:245:{43,53}]
  wire [1:0]  _readys_mask_T_16 = readys_readys_2 & readys_valid_2;	// @[Arbiter.scala:26:18, :28:29, Cat.scala:33:92]
  wire [1:0]  _readys_mask_T_21 = readys_readys_3 & readys_valid_3;	// @[Arbiter.scala:26:18, :28:29, Cat.scala:33:92]
  wire [1:0]  _readys_mask_T_26 = readys_readys_4 & readys_valid_4;	// @[Arbiter.scala:26:18, :28:29, Cat.scala:33:92]
  wire [1:0]  _readys_mask_T_31 = readys_readys_5 & readys_valid_5;	// @[Arbiter.scala:26:18, :28:29, Cat.scala:33:92]
  wire [12:0] _beatsAI_decode_T_1 = 13'h3F << auto_in_0_a_bits_size;	// @[package.scala:235:71]
  wire [12:0] _beatsAI_decode_T_5 = 13'h3F << auto_in_1_a_bits_size;	// @[package.scala:235:71]
  wire [12:0] _beatsAI_decode_T_9 = 13'h3F << auto_in_2_a_bits_size;	// @[package.scala:235:71]
  wire [12:0] _beatsAI_decode_T_13 = 13'h3F << auto_in_3_a_bits_size;	// @[package.scala:235:71]
  wire [12:0] _beatsDO_decode_T_1 = 13'h3F << auto_out_0_d_bits_size;	// @[package.scala:235:71]
  wire [12:0] _beatsDO_decode_T_5 = 13'h3F << auto_out_1_d_bits_size;	// @[package.scala:235:71]
  wire        latch = idle & auto_out_0_a_ready;	// @[Arbiter.scala:88:28, :89:24]
  wire        winnerQual_0 = readys_readys[0] & portsAOI_filtered_0_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:430:50]
  wire        winnerQual_1 = readys_readys[1] & portsAOI_filtered_1_0_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:430:50]
  wire        winnerQual_2 = readys_readys[2] & portsAOI_filtered_2_0_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:430:50]
  wire        winnerQual_3 = readys_readys[3] & portsAOI_filtered_3_0_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:430:50]
  wire        latch_1 = idle_1 & auto_out_1_a_ready;	// @[Arbiter.scala:88:28, :89:24]
  wire        winnerQual_1_0 = readys_readys_1[0] & portsAOI_filtered_1_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:430:50]
  wire        winnerQual_1_1 = readys_readys_1[1] & portsAOI_filtered_1_1_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:430:50]
  wire        winnerQual_1_2 = readys_readys_1[2] & portsAOI_filtered_2_1_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:430:50]
  wire        winnerQual_1_3 = readys_readys_1[3] & portsAOI_filtered_3_1_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:430:50]
  wire        latch_2 = idle_2 & auto_in_0_d_ready;	// @[Arbiter.scala:88:28, :89:24]
  wire        winnerQual_2_0 = readys_readys_2[0] & out_10_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:181:40]
  wire        winnerQual_2_1 = readys_readys_2[1] & out_11_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:181:40]
  wire        latch_3 = idle_3 & auto_in_1_d_ready;	// @[Arbiter.scala:88:28, :89:24]
  wire        winnerQual_3_0 = readys_readys_3[0] & out_14_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:181:40]
  wire        winnerQual_3_1 = readys_readys_3[1] & out_15_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:181:40]
  wire        latch_4 = idle_4 & auto_in_2_d_ready;	// @[Arbiter.scala:88:28, :89:24]
  wire        winnerQual_4_0 = readys_readys_4[0] & out_18_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:181:40]
  wire        winnerQual_4_1 = readys_readys_4[1] & out_19_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:181:40]
  wire        latch_5 = idle_5 & auto_in_3_d_ready;	// @[Arbiter.scala:88:28, :89:24]
  wire        winnerQual_5_0 = readys_readys_5[0] & out_22_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:181:40]
  wire        winnerQual_5_1 = readys_readys_5[1] & out_23_earlyValid;	// @[Arbiter.scala:26:18, :95:86, :98:79, Xbar.scala:181:40]
  always @(posedge clock) begin
    if (reset) begin
      beatsLeft <= 3'h0;	// @[Arbiter.scala:87:30, Bundles.scala:259:74]
      readys_mask <= 4'hF;	// @[Arbiter.scala:23:23, Parameters.scala:57:20]
      state_0 <= 1'h0;	// @[Arbiter.scala:116:26]
      state_1 <= 1'h0;	// @[Arbiter.scala:116:26]
      state_2 <= 1'h0;	// @[Arbiter.scala:116:26]
      state_3 <= 1'h0;	// @[Arbiter.scala:116:26]
      beatsLeft_1 <= 3'h0;	// @[Arbiter.scala:87:30, Bundles.scala:259:74]
      readys_mask_1 <= 4'hF;	// @[Arbiter.scala:23:23, Parameters.scala:57:20]
      state_1_0 <= 1'h0;	// @[Arbiter.scala:116:26]
      state_1_1 <= 1'h0;	// @[Arbiter.scala:116:26]
      state_1_2 <= 1'h0;	// @[Arbiter.scala:116:26]
      state_1_3 <= 1'h0;	// @[Arbiter.scala:116:26]
      beatsLeft_2 <= 3'h0;	// @[Arbiter.scala:87:30, Bundles.scala:259:74]
      readys_mask_2 <= 2'h3;	// @[Arbiter.scala:23:23, Parameters.scala:54:32]
      state_2_0 <= 1'h0;	// @[Arbiter.scala:116:26]
      state_2_1 <= 1'h0;	// @[Arbiter.scala:116:26]
      beatsLeft_3 <= 3'h0;	// @[Arbiter.scala:87:30, Bundles.scala:259:74]
      readys_mask_3 <= 2'h3;	// @[Arbiter.scala:23:23, Parameters.scala:54:32]
      state_3_0 <= 1'h0;	// @[Arbiter.scala:116:26]
      state_3_1 <= 1'h0;	// @[Arbiter.scala:116:26]
      beatsLeft_4 <= 3'h0;	// @[Arbiter.scala:87:30, Bundles.scala:259:74]
      readys_mask_4 <= 2'h3;	// @[Arbiter.scala:23:23, Parameters.scala:54:32]
      state_4_0 <= 1'h0;	// @[Arbiter.scala:116:26]
      state_4_1 <= 1'h0;	// @[Arbiter.scala:116:26]
      beatsLeft_5 <= 3'h0;	// @[Arbiter.scala:87:30, Bundles.scala:259:74]
      readys_mask_5 <= 2'h3;	// @[Arbiter.scala:23:23, Parameters.scala:54:32]
      state_5_0 <= 1'h0;	// @[Arbiter.scala:116:26]
      state_5_1 <= 1'h0;	// @[Arbiter.scala:116:26]
    end
    else begin
      if (latch)	// @[Arbiter.scala:89:24]
        beatsLeft <= (winnerQual_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T_1[5:3]) : 3'h0) | (winnerQual_1 & ~(auto_in_1_a_bits_opcode[2]) ? ~(_beatsAI_decode_T_5[5:3]) : 3'h0) | (winnerQual_2 & ~(auto_in_2_a_bits_opcode[2]) ? ~(_beatsAI_decode_T_9[5:3]) : 3'h0) | (winnerQual_3 & ~(auto_in_3_a_bits_opcode[2]) ? ~(_beatsAI_decode_T_13[5:3]) : 3'h0);	// @[Arbiter.scala:87:30, :98:79, :111:73, :112:44, Bundles.scala:259:74, Edges.scala:91:{28,37}, :220:14, package.scala:235:{46,71,76}]
      else	// @[Arbiter.scala:89:24]
        beatsLeft <= beatsLeft - {2'h0, auto_out_0_a_ready & x1_out_1_valid};	// @[Arbiter.scala:87:30, :113:52, :125:29, ReadyValidCancel.scala:49:33]
      if (latch & (|readys_valid))	// @[Arbiter.scala:27:{18,27}, :89:24, Cat.scala:33:92]
        readys_mask <= _readys_mask_T_3 | {_readys_mask_T_3[1:0], 2'h0};	// @[Arbiter.scala:23:23, package.scala:245:{43,53}]
      if (idle) begin	// @[Arbiter.scala:88:28]
        state_0 <= winnerQual_0;	// @[Arbiter.scala:98:79, :116:26]
        state_1 <= winnerQual_1;	// @[Arbiter.scala:98:79, :116:26]
        state_2 <= winnerQual_2;	// @[Arbiter.scala:98:79, :116:26]
        state_3 <= winnerQual_3;	// @[Arbiter.scala:98:79, :116:26]
      end
      if (latch_1)	// @[Arbiter.scala:89:24]
        beatsLeft_1 <= (winnerQual_1_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T_1[5:3]) : 3'h0) | (winnerQual_1_1 & ~(auto_in_1_a_bits_opcode[2]) ? ~(_beatsAI_decode_T_5[5:3]) : 3'h0) | (winnerQual_1_2 & ~(auto_in_2_a_bits_opcode[2]) ? ~(_beatsAI_decode_T_9[5:3]) : 3'h0) | (winnerQual_1_3 & ~(auto_in_3_a_bits_opcode[2]) ? ~(_beatsAI_decode_T_13[5:3]) : 3'h0);	// @[Arbiter.scala:87:30, :98:79, :111:73, :112:44, Bundles.scala:259:74, Edges.scala:91:{28,37}, :220:14, package.scala:235:{46,71,76}]
      else	// @[Arbiter.scala:89:24]
        beatsLeft_1 <= beatsLeft_1 - {2'h0, auto_out_1_a_ready & bundleOut_1_out_1_valid};	// @[Arbiter.scala:87:30, :113:52, :125:29, ReadyValidCancel.scala:49:33]
      if (latch_1 & (|readys_valid_1))	// @[Arbiter.scala:27:{18,27}, :89:24, Cat.scala:33:92]
        readys_mask_1 <= _readys_mask_T_11 | {_readys_mask_T_11[1:0], 2'h0};	// @[Arbiter.scala:23:23, package.scala:245:{43,53}]
      if (idle_1) begin	// @[Arbiter.scala:88:28]
        state_1_0 <= winnerQual_1_0;	// @[Arbiter.scala:98:79, :116:26]
        state_1_1 <= winnerQual_1_1;	// @[Arbiter.scala:98:79, :116:26]
        state_1_2 <= winnerQual_1_2;	// @[Arbiter.scala:98:79, :116:26]
        state_1_3 <= winnerQual_1_3;	// @[Arbiter.scala:98:79, :116:26]
      end
      if (latch_2)	// @[Arbiter.scala:89:24]
        beatsLeft_2 <= (winnerQual_2_0 & auto_out_0_d_bits_opcode[0] ? ~(_beatsDO_decode_T_1[5:3]) : 3'h0) | (winnerQual_2_1 & auto_out_1_d_bits_opcode[0] ? ~(_beatsDO_decode_T_5[5:3]) : 3'h0);	// @[Arbiter.scala:87:30, :98:79, :111:73, :112:44, Bundles.scala:259:74, Edges.scala:105:36, :220:14, package.scala:235:{46,71,76}]
      else	// @[Arbiter.scala:89:24]
        beatsLeft_2 <= beatsLeft_2 - {2'h0, auto_in_0_d_ready & out_12_valid};	// @[Arbiter.scala:87:30, :113:52, :125:29, ReadyValidCancel.scala:49:33]
      if (latch_2 & (|readys_valid_2))	// @[Arbiter.scala:27:{18,27}, :89:24, Cat.scala:33:92]
        readys_mask_2 <= _readys_mask_T_16 | {_readys_mask_T_16[0], 1'h0};	// @[Arbiter.scala:23:23, :28:29, package.scala:245:{43,53}]
      if (idle_2) begin	// @[Arbiter.scala:88:28]
        state_2_0 <= winnerQual_2_0;	// @[Arbiter.scala:98:79, :116:26]
        state_2_1 <= winnerQual_2_1;	// @[Arbiter.scala:98:79, :116:26]
      end
      if (latch_3)	// @[Arbiter.scala:89:24]
        beatsLeft_3 <= (winnerQual_3_0 & auto_out_0_d_bits_opcode[0] ? ~(_beatsDO_decode_T_1[5:3]) : 3'h0) | (winnerQual_3_1 & auto_out_1_d_bits_opcode[0] ? ~(_beatsDO_decode_T_5[5:3]) : 3'h0);	// @[Arbiter.scala:87:30, :98:79, :111:73, :112:44, Bundles.scala:259:74, Edges.scala:105:36, :220:14, package.scala:235:{46,71,76}]
      else	// @[Arbiter.scala:89:24]
        beatsLeft_3 <= beatsLeft_3 - {2'h0, auto_in_1_d_ready & out_16_valid};	// @[Arbiter.scala:87:30, :113:52, :125:29, ReadyValidCancel.scala:49:33]
      if (latch_3 & (|readys_valid_3))	// @[Arbiter.scala:27:{18,27}, :89:24, Cat.scala:33:92]
        readys_mask_3 <= _readys_mask_T_21 | {_readys_mask_T_21[0], 1'h0};	// @[Arbiter.scala:23:23, :28:29, package.scala:245:{43,53}]
      if (idle_3) begin	// @[Arbiter.scala:88:28]
        state_3_0 <= winnerQual_3_0;	// @[Arbiter.scala:98:79, :116:26]
        state_3_1 <= winnerQual_3_1;	// @[Arbiter.scala:98:79, :116:26]
      end
      if (latch_4)	// @[Arbiter.scala:89:24]
        beatsLeft_4 <= (winnerQual_4_0 & auto_out_0_d_bits_opcode[0] ? ~(_beatsDO_decode_T_1[5:3]) : 3'h0) | (winnerQual_4_1 & auto_out_1_d_bits_opcode[0] ? ~(_beatsDO_decode_T_5[5:3]) : 3'h0);	// @[Arbiter.scala:87:30, :98:79, :111:73, :112:44, Bundles.scala:259:74, Edges.scala:105:36, :220:14, package.scala:235:{46,71,76}]
      else	// @[Arbiter.scala:89:24]
        beatsLeft_4 <= beatsLeft_4 - {2'h0, auto_in_2_d_ready & out_20_valid};	// @[Arbiter.scala:87:30, :113:52, :125:29, ReadyValidCancel.scala:49:33]
      if (latch_4 & (|readys_valid_4))	// @[Arbiter.scala:27:{18,27}, :89:24, Cat.scala:33:92]
        readys_mask_4 <= _readys_mask_T_26 | {_readys_mask_T_26[0], 1'h0};	// @[Arbiter.scala:23:23, :28:29, package.scala:245:{43,53}]
      if (idle_4) begin	// @[Arbiter.scala:88:28]
        state_4_0 <= winnerQual_4_0;	// @[Arbiter.scala:98:79, :116:26]
        state_4_1 <= winnerQual_4_1;	// @[Arbiter.scala:98:79, :116:26]
      end
      if (latch_5)	// @[Arbiter.scala:89:24]
        beatsLeft_5 <= (winnerQual_5_0 & auto_out_0_d_bits_opcode[0] ? ~(_beatsDO_decode_T_1[5:3]) : 3'h0) | (winnerQual_5_1 & auto_out_1_d_bits_opcode[0] ? ~(_beatsDO_decode_T_5[5:3]) : 3'h0);	// @[Arbiter.scala:87:30, :98:79, :111:73, :112:44, Bundles.scala:259:74, Edges.scala:105:36, :220:14, package.scala:235:{46,71,76}]
      else	// @[Arbiter.scala:89:24]
        beatsLeft_5 <= beatsLeft_5 - {2'h0, auto_in_3_d_ready & out_24_valid};	// @[Arbiter.scala:87:30, :113:52, :125:29, ReadyValidCancel.scala:49:33]
      if (latch_5 & (|readys_valid_5))	// @[Arbiter.scala:27:{18,27}, :89:24, Cat.scala:33:92]
        readys_mask_5 <= _readys_mask_T_31 | {_readys_mask_T_31[0], 1'h0};	// @[Arbiter.scala:23:23, :28:29, package.scala:245:{43,53}]
      if (idle_5) begin	// @[Arbiter.scala:88:28]
        state_5_0 <= winnerQual_5_0;	// @[Arbiter.scala:98:79, :116:26]
        state_5_1 <= winnerQual_5_1;	// @[Arbiter.scala:98:79, :116:26]
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    wire         prefixOR_2 = earlyWinner_0 | earlyWinner_1;	// @[Arbiter.scala:97:79, :104:53]
    wire         _T_33 = portsAOI_filtered_0_earlyValid | portsAOI_filtered_1_0_earlyValid;	// @[Arbiter.scala:108:36, Xbar.scala:430:50]
    wire         prefixOR_2_1 = earlyWinner_1_0 | earlyWinner_1_1;	// @[Arbiter.scala:97:79, :104:53]
    wire         _T_129 = portsAOI_filtered_1_earlyValid | portsAOI_filtered_1_1_earlyValid;	// @[Arbiter.scala:108:36, Xbar.scala:430:50]
    always @(posedge clock) begin	// @[Arbiter.scala:105:13]
      if (~reset & ~((~earlyWinner_0 | ~earlyWinner_1) & (~prefixOR_2 | ~earlyWinner_2) & (~(prefixOR_2 | earlyWinner_2) | ~earlyWinner_3))) begin	// @[Arbiter.scala:97:79, :104:53, :105:{13,61,64,67,82}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:105:13]
          $error("Assertion failed\n    at Arbiter.scala:105 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n");	// @[Arbiter.scala:105:13]
        if (`STOP_COND_)	// @[Arbiter.scala:105:13]
          $fatal;	// @[Arbiter.scala:105:13]
      end
      if (~reset & ~(~(_out_0_a_earlyValid_T | portsAOI_filtered_2_0_earlyValid | portsAOI_filtered_3_0_earlyValid) | earlyWinner_0 | earlyWinner_1 | earlyWinner_2 | earlyWinner_3)) begin	// @[Arbiter.scala:97:79, :107:{14,15,36,41}, Xbar.scala:430:50]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:107:14]
          $error("Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n");	// @[Arbiter.scala:107:14]
        if (`STOP_COND_)	// @[Arbiter.scala:107:14]
          $fatal;	// @[Arbiter.scala:107:14]
      end
      if (~reset & ~(~(_T_33 | portsAOI_filtered_2_0_earlyValid | portsAOI_filtered_3_0_earlyValid) | _T_33 | portsAOI_filtered_2_0_earlyValid | portsAOI_filtered_3_0_earlyValid)) begin	// @[Arbiter.scala:108:{14,15,36,41}, Xbar.scala:430:50]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:108:14]
          $error("Assertion failed\n    at Arbiter.scala:108 assert (!validQuals .reduce(_||_) || validQuals .reduce(_||_))\n");	// @[Arbiter.scala:108:14]
        if (`STOP_COND_)	// @[Arbiter.scala:108:14]
          $fatal;	// @[Arbiter.scala:108:14]
      end
      if (~reset & ~((~earlyWinner_1_0 | ~earlyWinner_1_1) & (~prefixOR_2_1 | ~earlyWinner_1_2) & (~(prefixOR_2_1 | earlyWinner_1_2) | ~earlyWinner_1_3))) begin	// @[Arbiter.scala:97:79, :104:53, :105:{13,61,64,67,82}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:105:13]
          $error("Assertion failed\n    at Arbiter.scala:105 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n");	// @[Arbiter.scala:105:13]
        if (`STOP_COND_)	// @[Arbiter.scala:105:13]
          $fatal;	// @[Arbiter.scala:105:13]
      end
      if (~reset & ~(~(_out_1_a_earlyValid_T | portsAOI_filtered_2_1_earlyValid | portsAOI_filtered_3_1_earlyValid) | earlyWinner_1_0 | earlyWinner_1_1 | earlyWinner_1_2 | earlyWinner_1_3)) begin	// @[Arbiter.scala:97:79, :107:{14,15,36,41}, Xbar.scala:430:50]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:107:14]
          $error("Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n");	// @[Arbiter.scala:107:14]
        if (`STOP_COND_)	// @[Arbiter.scala:107:14]
          $fatal;	// @[Arbiter.scala:107:14]
      end
      if (~reset & ~(~(_T_129 | portsAOI_filtered_2_1_earlyValid | portsAOI_filtered_3_1_earlyValid) | _T_129 | portsAOI_filtered_2_1_earlyValid | portsAOI_filtered_3_1_earlyValid)) begin	// @[Arbiter.scala:108:{14,15,36,41}, Xbar.scala:430:50]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:108:14]
          $error("Assertion failed\n    at Arbiter.scala:108 assert (!validQuals .reduce(_||_) || validQuals .reduce(_||_))\n");	// @[Arbiter.scala:108:14]
        if (`STOP_COND_)	// @[Arbiter.scala:108:14]
          $fatal;	// @[Arbiter.scala:108:14]
      end
      if (~reset & ~(~earlyWinner_2_0 | ~earlyWinner_2_1)) begin	// @[Arbiter.scala:97:79, :105:{13,61,64,67}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:105:13]
          $error("Assertion failed\n    at Arbiter.scala:105 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n");	// @[Arbiter.scala:105:13]
        if (`STOP_COND_)	// @[Arbiter.scala:105:13]
          $fatal;	// @[Arbiter.scala:105:13]
      end
      if (~reset & ~(~_sink_ACancel_earlyValid_T | earlyWinner_2_0 | earlyWinner_2_1)) begin	// @[Arbiter.scala:97:79, :107:{14,15,36,41}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:107:14]
          $error("Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n");	// @[Arbiter.scala:107:14]
        if (`STOP_COND_)	// @[Arbiter.scala:107:14]
          $fatal;	// @[Arbiter.scala:107:14]
      end
      if (~reset & ~(~earlyWinner_3_0 | ~earlyWinner_3_1)) begin	// @[Arbiter.scala:97:79, :105:{13,61,64,67}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:105:13]
          $error("Assertion failed\n    at Arbiter.scala:105 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n");	// @[Arbiter.scala:105:13]
        if (`STOP_COND_)	// @[Arbiter.scala:105:13]
          $fatal;	// @[Arbiter.scala:105:13]
      end
      if (~reset & ~(~_sink_ACancel_earlyValid_T_5 | earlyWinner_3_0 | earlyWinner_3_1)) begin	// @[Arbiter.scala:97:79, :107:{14,15,36,41}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:107:14]
          $error("Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n");	// @[Arbiter.scala:107:14]
        if (`STOP_COND_)	// @[Arbiter.scala:107:14]
          $fatal;	// @[Arbiter.scala:107:14]
      end
      if (~reset & ~(~earlyWinner_4_0 | ~earlyWinner_4_1)) begin	// @[Arbiter.scala:97:79, :105:{13,61,64,67}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:105:13]
          $error("Assertion failed\n    at Arbiter.scala:105 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n");	// @[Arbiter.scala:105:13]
        if (`STOP_COND_)	// @[Arbiter.scala:105:13]
          $fatal;	// @[Arbiter.scala:105:13]
      end
      if (~reset & ~(~_sink_ACancel_earlyValid_T_10 | earlyWinner_4_0 | earlyWinner_4_1)) begin	// @[Arbiter.scala:97:79, :107:{14,15,36,41}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:107:14]
          $error("Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n");	// @[Arbiter.scala:107:14]
        if (`STOP_COND_)	// @[Arbiter.scala:107:14]
          $fatal;	// @[Arbiter.scala:107:14]
      end
      if (~reset & ~(~earlyWinner_5_0 | ~earlyWinner_5_1)) begin	// @[Arbiter.scala:97:79, :105:{13,61,64,67}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:105:13]
          $error("Assertion failed\n    at Arbiter.scala:105 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n");	// @[Arbiter.scala:105:13]
        if (`STOP_COND_)	// @[Arbiter.scala:105:13]
          $fatal;	// @[Arbiter.scala:105:13]
      end
      if (~reset & ~(~_sink_ACancel_earlyValid_T_15 | earlyWinner_5_0 | earlyWinner_5_1)) begin	// @[Arbiter.scala:97:79, :107:{14,15,36,41}]
        if (`ASSERT_VERBOSE_COND_)	// @[Arbiter.scala:107:14]
          $error("Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n");	// @[Arbiter.scala:107:14]
        if (`STOP_COND_)	// @[Arbiter.scala:107:14]
          $fatal;	// @[Arbiter.scala:107:14]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        beatsLeft = _RANDOM_0[2:0];	// @[Arbiter.scala:87:30]
        readys_mask = _RANDOM_0[6:3];	// @[Arbiter.scala:23:23, :87:30]
        state_0 = _RANDOM_0[7];	// @[Arbiter.scala:87:30, :116:26]
        state_1 = _RANDOM_0[8];	// @[Arbiter.scala:87:30, :116:26]
        state_2 = _RANDOM_0[9];	// @[Arbiter.scala:87:30, :116:26]
        state_3 = _RANDOM_0[10];	// @[Arbiter.scala:87:30, :116:26]
        beatsLeft_1 = _RANDOM_0[13:11];	// @[Arbiter.scala:87:30]
        readys_mask_1 = _RANDOM_0[17:14];	// @[Arbiter.scala:23:23, :87:30]
        state_1_0 = _RANDOM_0[18];	// @[Arbiter.scala:87:30, :116:26]
        state_1_1 = _RANDOM_0[19];	// @[Arbiter.scala:87:30, :116:26]
        state_1_2 = _RANDOM_0[20];	// @[Arbiter.scala:87:30, :116:26]
        state_1_3 = _RANDOM_0[21];	// @[Arbiter.scala:87:30, :116:26]
        beatsLeft_2 = _RANDOM_0[24:22];	// @[Arbiter.scala:87:30]
        readys_mask_2 = _RANDOM_0[26:25];	// @[Arbiter.scala:23:23, :87:30]
        state_2_0 = _RANDOM_0[27];	// @[Arbiter.scala:87:30, :116:26]
        state_2_1 = _RANDOM_0[28];	// @[Arbiter.scala:87:30, :116:26]
        beatsLeft_3 = _RANDOM_0[31:29];	// @[Arbiter.scala:87:30]
        readys_mask_3 = _RANDOM_1[1:0];	// @[Arbiter.scala:23:23]
        state_3_0 = _RANDOM_1[2];	// @[Arbiter.scala:23:23, :116:26]
        state_3_1 = _RANDOM_1[3];	// @[Arbiter.scala:23:23, :116:26]
        beatsLeft_4 = _RANDOM_1[6:4];	// @[Arbiter.scala:23:23, :87:30]
        readys_mask_4 = _RANDOM_1[8:7];	// @[Arbiter.scala:23:23]
        state_4_0 = _RANDOM_1[9];	// @[Arbiter.scala:23:23, :116:26]
        state_4_1 = _RANDOM_1[10];	// @[Arbiter.scala:23:23, :116:26]
        beatsLeft_5 = _RANDOM_1[13:11];	// @[Arbiter.scala:23:23, :87:30]
        readys_mask_5 = _RANDOM_1[15:14];	// @[Arbiter.scala:23:23]
        state_5_0 = _RANDOM_1[16];	// @[Arbiter.scala:23:23, :116:26]
        state_5_1 = _RANDOM_1[17];	// @[Arbiter.scala:23:23, :116:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  TLMonitor_36 monitor (	// @[Nodes.scala:24:25]
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_portsAOI_in_0_a_ready_WIRE),	// @[Mux.scala:27:73]
    .io_in_a_valid        (auto_in_0_a_valid),
    .io_in_a_bits_opcode  (auto_in_0_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_0_a_bits_param),
    .io_in_a_bits_size    (auto_in_0_a_bits_size),
    .io_in_a_bits_source  (auto_in_0_a_bits_source),
    .io_in_a_bits_address (auto_in_0_a_bits_address),
    .io_in_a_bits_mask    (auto_in_0_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_0_a_bits_corrupt),
    .io_in_d_ready        (auto_in_0_d_ready),
    .io_in_d_valid        (out_12_valid),	// @[Arbiter.scala:125:29]
    .io_in_d_bits_opcode  (out_12_bits_opcode),	// @[Mux.scala:27:73]
    .io_in_d_bits_param   (out_12_bits_param),	// @[Mux.scala:27:73]
    .io_in_d_bits_size    (out_12_bits_size),	// @[Mux.scala:27:73]
    .io_in_d_bits_source  (out_d_bits_source),	// @[Mux.scala:27:73]
    .io_in_d_bits_sink    (out_12_bits_sink),	// @[Mux.scala:27:73]
    .io_in_d_bits_denied  (out_12_bits_denied),	// @[Mux.scala:27:73]
    .io_in_d_bits_corrupt (out_12_bits_corrupt)	// @[Mux.scala:27:73]
  );
  TLMonitor_37 monitor_1 (	// @[Nodes.scala:24:25]
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_portsAOI_in_1_a_ready_WIRE),	// @[Mux.scala:27:73]
    .io_in_a_valid        (auto_in_1_a_valid),
    .io_in_a_bits_opcode  (auto_in_1_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_1_a_bits_param),
    .io_in_a_bits_size    (auto_in_1_a_bits_size),
    .io_in_a_bits_source  (auto_in_1_a_bits_source),
    .io_in_a_bits_address (auto_in_1_a_bits_address),
    .io_in_a_bits_mask    (auto_in_1_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_1_a_bits_corrupt),
    .io_in_d_ready        (auto_in_1_d_ready),
    .io_in_d_valid        (out_16_valid),	// @[Arbiter.scala:125:29]
    .io_in_d_bits_opcode  (out_16_bits_opcode),	// @[Mux.scala:27:73]
    .io_in_d_bits_param   (out_16_bits_param),	// @[Mux.scala:27:73]
    .io_in_d_bits_size    (out_16_bits_size),	// @[Mux.scala:27:73]
    .io_in_d_bits_source  (out_1_d_bits_source),	// @[Mux.scala:27:73]
    .io_in_d_bits_sink    (out_16_bits_sink),	// @[Mux.scala:27:73]
    .io_in_d_bits_denied  (out_16_bits_denied),	// @[Mux.scala:27:73]
    .io_in_d_bits_corrupt (out_16_bits_corrupt)	// @[Mux.scala:27:73]
  );
  TLMonitor_38 monitor_2 (	// @[Nodes.scala:24:25]
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_portsAOI_in_2_a_ready_WIRE),	// @[Mux.scala:27:73]
    .io_in_a_valid        (auto_in_2_a_valid),
    .io_in_a_bits_opcode  (auto_in_2_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_2_a_bits_param),
    .io_in_a_bits_size    (auto_in_2_a_bits_size),
    .io_in_a_bits_source  (auto_in_2_a_bits_source),
    .io_in_a_bits_address (auto_in_2_a_bits_address),
    .io_in_a_bits_mask    (auto_in_2_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_2_a_bits_corrupt),
    .io_in_d_ready        (auto_in_2_d_ready),
    .io_in_d_valid        (out_20_valid),	// @[Arbiter.scala:125:29]
    .io_in_d_bits_opcode  (out_20_bits_opcode),	// @[Mux.scala:27:73]
    .io_in_d_bits_param   (out_20_bits_param),	// @[Mux.scala:27:73]
    .io_in_d_bits_size    (out_20_bits_size),	// @[Mux.scala:27:73]
    .io_in_d_bits_source  (out_2_d_bits_source),	// @[Mux.scala:27:73]
    .io_in_d_bits_sink    (out_20_bits_sink),	// @[Mux.scala:27:73]
    .io_in_d_bits_denied  (out_20_bits_denied),	// @[Mux.scala:27:73]
    .io_in_d_bits_corrupt (out_20_bits_corrupt)	// @[Mux.scala:27:73]
  );
  TLMonitor_39 monitor_3 (	// @[Nodes.scala:24:25]
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (_portsAOI_in_3_a_ready_WIRE),	// @[Mux.scala:27:73]
    .io_in_a_valid        (auto_in_3_a_valid),
    .io_in_a_bits_opcode  (auto_in_3_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_3_a_bits_param),
    .io_in_a_bits_size    (auto_in_3_a_bits_size),
    .io_in_a_bits_source  (auto_in_3_a_bits_source),
    .io_in_a_bits_address (auto_in_3_a_bits_address),
    .io_in_a_bits_mask    (auto_in_3_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_3_a_bits_corrupt),
    .io_in_d_ready        (auto_in_3_d_ready),
    .io_in_d_valid        (out_24_valid),	// @[Arbiter.scala:125:29]
    .io_in_d_bits_opcode  (out_24_bits_opcode),	// @[Mux.scala:27:73]
    .io_in_d_bits_param   (out_24_bits_param),	// @[Mux.scala:27:73]
    .io_in_d_bits_size    (out_24_bits_size),	// @[Mux.scala:27:73]
    .io_in_d_bits_source  (out_3_d_bits_source),	// @[Mux.scala:27:73]
    .io_in_d_bits_sink    (out_24_bits_sink),	// @[Mux.scala:27:73]
    .io_in_d_bits_denied  (out_24_bits_denied),	// @[Mux.scala:27:73]
    .io_in_d_bits_corrupt (out_24_bits_corrupt)	// @[Mux.scala:27:73]
  );
  assign auto_in_3_a_ready = _portsAOI_in_3_a_ready_WIRE;	// @[Mux.scala:27:73]
  assign auto_in_3_d_valid = out_24_valid;	// @[Arbiter.scala:125:29]
  assign auto_in_3_d_bits_opcode = out_24_bits_opcode;	// @[Mux.scala:27:73]
  assign auto_in_3_d_bits_param = out_24_bits_param;	// @[Mux.scala:27:73]
  assign auto_in_3_d_bits_size = out_24_bits_size;	// @[Mux.scala:27:73]
  assign auto_in_3_d_bits_source = out_3_d_bits_source;	// @[Mux.scala:27:73]
  assign auto_in_3_d_bits_sink = out_24_bits_sink;	// @[Mux.scala:27:73]
  assign auto_in_3_d_bits_denied = out_24_bits_denied;	// @[Mux.scala:27:73]
  assign auto_in_3_d_bits_data = (muxStateEarly_5_0 ? auto_out_0_d_bits_data : 64'h0) | (muxStateEarly_5_1 ? auto_out_1_d_bits_data : 64'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_in_3_d_bits_corrupt = out_24_bits_corrupt;	// @[Mux.scala:27:73]
  assign auto_in_2_a_ready = _portsAOI_in_2_a_ready_WIRE;	// @[Mux.scala:27:73]
  assign auto_in_2_d_valid = out_20_valid;	// @[Arbiter.scala:125:29]
  assign auto_in_2_d_bits_opcode = out_20_bits_opcode;	// @[Mux.scala:27:73]
  assign auto_in_2_d_bits_param = out_20_bits_param;	// @[Mux.scala:27:73]
  assign auto_in_2_d_bits_size = out_20_bits_size;	// @[Mux.scala:27:73]
  assign auto_in_2_d_bits_source = out_2_d_bits_source;	// @[Mux.scala:27:73]
  assign auto_in_2_d_bits_sink = out_20_bits_sink;	// @[Mux.scala:27:73]
  assign auto_in_2_d_bits_denied = out_20_bits_denied;	// @[Mux.scala:27:73]
  assign auto_in_2_d_bits_data = (muxStateEarly_4_0 ? auto_out_0_d_bits_data : 64'h0) | (muxStateEarly_4_1 ? auto_out_1_d_bits_data : 64'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_in_2_d_bits_corrupt = out_20_bits_corrupt;	// @[Mux.scala:27:73]
  assign auto_in_1_a_ready = _portsAOI_in_1_a_ready_WIRE;	// @[Mux.scala:27:73]
  assign auto_in_1_d_valid = out_16_valid;	// @[Arbiter.scala:125:29]
  assign auto_in_1_d_bits_opcode = out_16_bits_opcode;	// @[Mux.scala:27:73]
  assign auto_in_1_d_bits_param = out_16_bits_param;	// @[Mux.scala:27:73]
  assign auto_in_1_d_bits_size = out_16_bits_size;	// @[Mux.scala:27:73]
  assign auto_in_1_d_bits_source = out_1_d_bits_source;	// @[Mux.scala:27:73]
  assign auto_in_1_d_bits_sink = out_16_bits_sink;	// @[Mux.scala:27:73]
  assign auto_in_1_d_bits_denied = out_16_bits_denied;	// @[Mux.scala:27:73]
  assign auto_in_1_d_bits_data = (muxStateEarly_3_0 ? auto_out_0_d_bits_data : 64'h0) | (muxStateEarly_3_1 ? auto_out_1_d_bits_data : 64'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_in_1_d_bits_corrupt = out_16_bits_corrupt;	// @[Mux.scala:27:73]
  assign auto_in_0_a_ready = _portsAOI_in_0_a_ready_WIRE;	// @[Mux.scala:27:73]
  assign auto_in_0_d_valid = out_12_valid;	// @[Arbiter.scala:125:29]
  assign auto_in_0_d_bits_opcode = out_12_bits_opcode;	// @[Mux.scala:27:73]
  assign auto_in_0_d_bits_param = out_12_bits_param;	// @[Mux.scala:27:73]
  assign auto_in_0_d_bits_size = out_12_bits_size;	// @[Mux.scala:27:73]
  assign auto_in_0_d_bits_source = out_d_bits_source;	// @[Mux.scala:27:73]
  assign auto_in_0_d_bits_sink = out_12_bits_sink;	// @[Mux.scala:27:73]
  assign auto_in_0_d_bits_denied = out_12_bits_denied;	// @[Mux.scala:27:73]
  assign auto_in_0_d_bits_data = (muxStateEarly_2_0 ? auto_out_0_d_bits_data : 64'h0) | (muxStateEarly_2_1 ? auto_out_1_d_bits_data : 64'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_in_0_d_bits_corrupt = out_12_bits_corrupt;	// @[Mux.scala:27:73]
  assign auto_out_1_a_valid = bundleOut_1_out_1_valid;	// @[Arbiter.scala:125:29]
  assign auto_out_1_a_bits_opcode = (muxStateEarly_1_0 ? auto_in_0_a_bits_opcode : 3'h0) | (muxStateEarly_1_1 ? auto_in_1_a_bits_opcode : 3'h0) | (muxStateEarly_1_2 ? auto_in_2_a_bits_opcode : 3'h0) | (muxStateEarly_1_3 ? auto_in_3_a_bits_opcode : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_1_a_bits_param = (muxStateEarly_1_0 ? auto_in_0_a_bits_param : 3'h0) | (muxStateEarly_1_1 ? auto_in_1_a_bits_param : 3'h0) | (muxStateEarly_1_2 ? auto_in_2_a_bits_param : 3'h0) | (muxStateEarly_1_3 ? auto_in_3_a_bits_param : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_1_a_bits_size = (muxStateEarly_1_0 ? auto_in_0_a_bits_size : 3'h0) | (muxStateEarly_1_1 ? auto_in_1_a_bits_size : 3'h0) | (muxStateEarly_1_2 ? auto_in_2_a_bits_size : 3'h0) | (muxStateEarly_1_3 ? auto_in_3_a_bits_size : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_1_a_bits_source = (muxStateEarly_1_0 ? portsAOI_filtered_1_bits_source : 6'h0) | (muxStateEarly_1_1 ? portsAOI_filtered_1_1_bits_source : 6'h0) | (muxStateEarly_1_2 ? portsAOI_filtered_2_1_bits_source : 6'h0) | (muxStateEarly_1_3 ? portsAOI_filtered_3_1_bits_source : 6'h0);	// @[Arbiter.scala:117:30, Mux.scala:27:73, Xbar.scala:239:{29,55}, :264:23]
  assign auto_out_1_a_bits_address = (muxStateEarly_1_0 ? auto_in_0_a_bits_address : 35'h0) | (muxStateEarly_1_1 ? auto_in_1_a_bits_address : 35'h0) | (muxStateEarly_1_2 ? auto_in_2_a_bits_address : 35'h0) | (muxStateEarly_1_3 ? auto_in_3_a_bits_address : 35'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_1_a_bits_mask = (muxStateEarly_1_0 ? auto_in_0_a_bits_mask : 8'h0) | (muxStateEarly_1_1 ? auto_in_1_a_bits_mask : 8'h0) | (muxStateEarly_1_2 ? auto_in_2_a_bits_mask : 8'h0) | (muxStateEarly_1_3 ? auto_in_3_a_bits_mask : 8'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_1_a_bits_data = (muxStateEarly_1_0 ? auto_in_0_a_bits_data : 64'h0) | (muxStateEarly_1_1 ? auto_in_1_a_bits_data : 64'h0) | (muxStateEarly_1_2 ? auto_in_2_a_bits_data : 64'h0) | (muxStateEarly_1_3 ? auto_in_3_a_bits_data : 64'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_1_a_bits_corrupt = muxStateEarly_1_0 & auto_in_0_a_bits_corrupt | muxStateEarly_1_1 & auto_in_1_a_bits_corrupt | muxStateEarly_1_2 & auto_in_2_a_bits_corrupt | muxStateEarly_1_3 & auto_in_3_a_bits_corrupt;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  assign auto_out_1_d_ready = (&(auto_out_1_d_bits_source[5:4])) & auto_in_0_d_ready & allowed_2_1 | requestDOI_1_1 & auto_in_1_d_ready & allowed_3_1 | requestDOI_1_2 & auto_in_2_d_ready & allowed_4_1 | requestDOI_1_3 & auto_in_3_d_ready & allowed_5_1;	// @[Arbiter.scala:121:24, Mux.scala:27:73, Parameters.scala:54:{10,32}]
  assign auto_out_0_a_valid = x1_out_1_valid;	// @[Arbiter.scala:125:29]
  assign auto_out_0_a_bits_opcode = (muxStateEarly_0 ? auto_in_0_a_bits_opcode : 3'h0) | (muxStateEarly_1 ? auto_in_1_a_bits_opcode : 3'h0) | (muxStateEarly_2 ? auto_in_2_a_bits_opcode : 3'h0) | (muxStateEarly_3 ? auto_in_3_a_bits_opcode : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_0_a_bits_param = (muxStateEarly_0 ? auto_in_0_a_bits_param : 3'h0) | (muxStateEarly_1 ? auto_in_1_a_bits_param : 3'h0) | (muxStateEarly_2 ? auto_in_2_a_bits_param : 3'h0) | (muxStateEarly_3 ? auto_in_3_a_bits_param : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_0_a_bits_size = (muxStateEarly_0 ? auto_in_0_a_bits_size : 3'h0) | (muxStateEarly_1 ? auto_in_1_a_bits_size : 3'h0) | (muxStateEarly_2 ? auto_in_2_a_bits_size : 3'h0) | (muxStateEarly_3 ? auto_in_3_a_bits_size : 3'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_0_a_bits_source = (muxStateEarly_0 ? portsAOI_filtered_1_bits_source : 6'h0) | (muxStateEarly_1 ? portsAOI_filtered_1_1_bits_source : 6'h0) | (muxStateEarly_2 ? portsAOI_filtered_2_1_bits_source : 6'h0) | (muxStateEarly_3 ? portsAOI_filtered_3_1_bits_source : 6'h0);	// @[Arbiter.scala:117:30, Mux.scala:27:73, Xbar.scala:239:{29,55}, :264:23]
  assign auto_out_0_a_bits_address = (muxStateEarly_0 ? auto_in_0_a_bits_address[27:0] : 28'h0) | (muxStateEarly_1 ? auto_in_1_a_bits_address[27:0] : 28'h0) | (muxStateEarly_2 ? auto_in_2_a_bits_address[27:0] : 28'h0) | (muxStateEarly_3 ? auto_in_3_a_bits_address[27:0] : 28'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_0_a_bits_mask = (muxStateEarly_0 ? auto_in_0_a_bits_mask : 8'h0) | (muxStateEarly_1 ? auto_in_1_a_bits_mask : 8'h0) | (muxStateEarly_2 ? auto_in_2_a_bits_mask : 8'h0) | (muxStateEarly_3 ? auto_in_3_a_bits_mask : 8'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_0_a_bits_data = (muxStateEarly_0 ? auto_in_0_a_bits_data : 64'h0) | (muxStateEarly_1 ? auto_in_1_a_bits_data : 64'h0) | (muxStateEarly_2 ? auto_in_2_a_bits_data : 64'h0) | (muxStateEarly_3 ? auto_in_3_a_bits_data : 64'h0);	// @[Arbiter.scala:117:30, Bundles.scala:259:74, Mux.scala:27:73]
  assign auto_out_0_a_bits_corrupt = muxStateEarly_0 & auto_in_0_a_bits_corrupt | muxStateEarly_1 & auto_in_1_a_bits_corrupt | muxStateEarly_2 & auto_in_2_a_bits_corrupt | muxStateEarly_3 & auto_in_3_a_bits_corrupt;	// @[Arbiter.scala:117:30, Mux.scala:27:73]
  assign auto_out_0_d_ready = (&(auto_out_0_d_bits_source[5:4])) & auto_in_0_d_ready & allowed_2_0 | requestDOI_0_1 & auto_in_1_d_ready & allowed_3_0 | requestDOI_0_2 & auto_in_2_d_ready & allowed_4_0 | requestDOI_0_3 & auto_in_3_d_ready & allowed_5_0;	// @[Arbiter.scala:121:24, Mux.scala:27:73, Parameters.scala:54:{10,32}]
endmodule

