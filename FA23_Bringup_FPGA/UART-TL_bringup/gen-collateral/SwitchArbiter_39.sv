// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module SwitchArbiter_39(
  input        clock,
               reset,
               io_in_3_valid,
               io_in_3_bits_vc_sel_0_2,
               io_in_3_bits_tail,
               io_in_7_valid,
               io_in_7_bits_vc_sel_0_6,
               io_in_7_bits_tail,
               io_out_0_ready,
  output       io_in_3_ready,
               io_in_7_ready,
               io_out_0_valid,
               io_out_0_bits_vc_sel_0_2,
               io_out_0_bits_vc_sel_0_6,
               io_out_0_bits_tail,
  output [9:0] io_chosen_oh_0
);

  reg  [9:0] lock_0;	// @[SwitchAllocator.scala:24:38]
  wire [4:0] _GEN = {io_in_7_valid, 3'h0, io_in_3_valid};	// @[Cat.scala:33:92, SwitchAllocator.scala:58:71]
  wire [4:0] _GEN_0 = _GEN & ~(lock_0[7:3]);	// @[Cat.scala:33:92, SwitchAllocator.scala:24:38, :25:{52,54}]
  reg  [9:0] mask;	// @[SwitchAllocator.scala:27:21]
  wire [4:0] _GEN_1 = _GEN & lock_0[7:3];	// @[Cat.scala:33:92, SwitchAllocator.scala:24:38, :42:33]
  wire [9:0] _io_chosen_oh_0_output = (|{_GEN_1[4], _GEN_1[0]}) ? lock_0 : _GEN_0[0] ? 10'h8 : {2'h0, _GEN_0[4], 7'h0};	// @[Cat.scala:33:92, Mux.scala:47:70, OneHot.scala:84:71, SwitchAllocator.scala:24:38, :25:52, :42:{21,33,55}]
  wire [4:0] _GEN_2 = _GEN & _io_chosen_oh_0_output[7:3];	// @[Cat.scala:33:92, SwitchAllocator.scala:42:21, :44:35]
  wire [1:0] _GEN_3 = {_GEN_2[4], _GEN_2[0]};	// @[SwitchAllocator.scala:44:35]
  wire [7:0] _GEN_4 = _io_chosen_oh_0_output[8:1] | _io_chosen_oh_0_output[9:2];	// @[SwitchAllocator.scala:42:21, :58:{55,71}]
  wire [6:0] _GEN_5 = _GEN_4[6:0] | _io_chosen_oh_0_output[9:3];	// @[SwitchAllocator.scala:42:21, :58:{55,71}]
  wire [5:0] _GEN_6 = _GEN_5[5:0] | _io_chosen_oh_0_output[9:4];	// @[SwitchAllocator.scala:42:21, :58:{55,71}]
  wire [4:0] _GEN_7 = _GEN_6[4:0] | _io_chosen_oh_0_output[9:5];	// @[SwitchAllocator.scala:42:21, :58:{55,71}]
  wire [3:0] _GEN_8 = _GEN_7[3:0] | _io_chosen_oh_0_output[9:6];	// @[SwitchAllocator.scala:42:21, :58:{55,71}]
  wire [2:0] _GEN_9 = _GEN_8[2:0] | _io_chosen_oh_0_output[9:7];	// @[SwitchAllocator.scala:42:21, :58:{55,71}]
  wire [1:0] _GEN_10 = _GEN_9[1:0] | _io_chosen_oh_0_output[9:8];	// @[SwitchAllocator.scala:42:21, :58:{55,71}]
  always @(posedge clock) begin
    if (reset) begin
      lock_0 <= 10'h0;	// @[SwitchAllocator.scala:24:38]
      mask <= 10'h0;	// @[SwitchAllocator.scala:24:38, :27:21]
    end
    else if (io_out_0_ready & (|_GEN_3)) begin	// @[Decoupled.scala:51:35, SwitchAllocator.scala:44:{35,45}]
      lock_0 <= _io_chosen_oh_0_output & {2'h3, ~io_in_7_bits_tail, 3'h7, ~io_in_3_bits_tail, 3'h7};	// @[Cat.scala:33:92, SwitchAllocator.scala:24:38, :42:21, :53:{25,27}]
      mask <= _io_chosen_oh_0_output | {1'h0, _io_chosen_oh_0_output[9], _GEN_4[7], _GEN_5[6], _GEN_6[5], _GEN_7[4], _GEN_8[3], _GEN_9[2], _GEN_10[1], _GEN_10[0] | _io_chosen_oh_0_output[9]};	// @[SwitchAllocator.scala:27:21, :42:21, :58:{55,71}]
    end
    else	// @[Decoupled.scala:51:35]
      mask <= (&mask) ? 10'h0 : {mask[8:0], 1'h1};	// @[SwitchAllocator.scala:24:38, :27:21, :30:60, :60:{16,23,43}]
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        lock_0 = _RANDOM_0[9:0];	// @[SwitchAllocator.scala:24:38]
        mask = _RANDOM_0[19:10];	// @[SwitchAllocator.scala:24:38, :27:21]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_in_3_ready = _io_chosen_oh_0_output[3] & io_out_0_ready;	// @[Mux.scala:29:36, SwitchAllocator.scala:42:21, :47:23]
  assign io_in_7_ready = _io_chosen_oh_0_output[7] & io_out_0_ready;	// @[Mux.scala:29:36, SwitchAllocator.scala:42:21, :47:23]
  assign io_out_0_valid = |_GEN_3;	// @[SwitchAllocator.scala:44:{35,45}]
  assign io_out_0_bits_vc_sel_0_2 = _io_chosen_oh_0_output[3] & io_in_3_bits_vc_sel_0_2;	// @[Mux.scala:27:73, :29:36, SwitchAllocator.scala:42:21]
  assign io_out_0_bits_vc_sel_0_6 = _io_chosen_oh_0_output[7] & io_in_7_bits_vc_sel_0_6;	// @[Mux.scala:27:73, :29:36, SwitchAllocator.scala:42:21]
  assign io_out_0_bits_tail = _io_chosen_oh_0_output[3] & io_in_3_bits_tail | _io_chosen_oh_0_output[7] & io_in_7_bits_tail;	// @[Mux.scala:27:73, :29:36, SwitchAllocator.scala:42:21]
  assign io_chosen_oh_0 = _io_chosen_oh_0_output;	// @[SwitchAllocator.scala:42:21]
endmodule

