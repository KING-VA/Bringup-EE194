// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module RotatingSingleVCAllocator_8(
  input  clock,
         reset,
         io_req_0_valid,
         io_req_0_bits_vc_sel_0_2,
         io_req_0_bits_vc_sel_0_6,
         io_channel_status_0_2_occupied,
         io_channel_status_0_6_occupied,
  output io_req_0_ready,
         io_resp_0_vc_sel_0_2,
         io_resp_0_vc_sel_0_6,
         io_out_allocs_0_2_alloc,
         io_out_allocs_0_6_alloc
);

  wire        in_arb_vals_0;	// @[SingleVCAllocator.scala:32:39]
  reg         mask;	// @[SingleVCAllocator.scala:16:21]
  wire [1:0]  in_arb_filter = in_arb_vals_0 & ~mask ? 2'h1 : {in_arb_vals_0, 1'h0};	// @[Mux.scala:47:70, SingleVCAllocator.scala:16:21, :19:{84,86}, :32:39]
  wire        in_arb_reqs_0_0_2 = io_req_0_bits_vc_sel_0_2 & ~io_channel_status_0_2_occupied;	// @[SingleVCAllocator.scala:28:{61,64}]
  wire        in_arb_reqs_0_0_6 = io_req_0_bits_vc_sel_0_6 & ~io_channel_status_0_6_occupied;	// @[SingleVCAllocator.scala:28:{61,64}]
  assign in_arb_vals_0 = io_req_0_valid & (in_arb_reqs_0_0_2 | in_arb_reqs_0_0_6);	// @[SingleVCAllocator.scala:28:61, :32:39, package.scala:73:59]
  reg  [9:0]  in_alloc_mask;	// @[ISLIP.scala:17:25]
  wire [4:0]  _GEN = {in_arb_reqs_0_0_6, 3'h0, in_arb_reqs_0_0_2} & ~(in_alloc_mask[6:2]);	// @[ISLIP.scala:17:25, :18:{29,31}, :33:18, SingleVCAllocator.scala:28:61]
  wire [19:0] _in_alloc_oh_T_37 = _GEN[0] ? 20'h4 : _GEN[4] ? 20'h40 : in_arb_reqs_0_0_2 ? 20'h1000 : {3'h0, in_arb_reqs_0_0_6, 16'h0};	// @[ISLIP.scala:18:29, :33:18, Mux.scala:47:70, OneHot.scala:84:71, SingleVCAllocator.scala:28:61]
  wire [9:0]  _in_alloc_WIRE_1 = _in_alloc_oh_T_37[9:0] | _in_alloc_oh_T_37[19:10];	// @[ISLIP.scala:20:{20,28,34}, Mux.scala:47:70]
  wire        in_alloc_0_2 = in_arb_vals_0 & _in_alloc_WIRE_1[2];	// @[ISLIP.scala:20:28, :33:40, SingleVCAllocator.scala:32:39, :41:18]
  wire        in_alloc_0_6 = in_arb_vals_0 & _in_alloc_WIRE_1[6];	// @[ISLIP.scala:20:28, :33:40, SingleVCAllocator.scala:32:39, :41:18]
  always @(posedge clock) begin
    if (reset) begin
      mask <= 1'h0;	// @[SingleVCAllocator.scala:16:21]
      in_alloc_mask <= 10'h0;	// @[ISLIP.scala:17:25]
    end
    else begin
      mask <= in_arb_vals_0 | mask;	// @[SingleVCAllocator.scala:16:21, :21:26, :22:10, :32:39]
      if ((|in_arb_filter) & io_req_0_valid) begin	// @[Decoupled.scala:51:35, Mux.scala:47:70, SingleVCAllocator.scala:20:57]
        if (_in_alloc_WIRE_1[0])	// @[ISLIP.scala:20:28, :23:14]
          in_alloc_mask <= 10'h1;	// @[ISLIP.scala:17:25, Mux.scala:101:16]
        else if (_in_alloc_WIRE_1[1])	// @[ISLIP.scala:20:28, :23:14]
          in_alloc_mask <= 10'h3;	// @[ISLIP.scala:17:25, Mux.scala:101:16]
        else if (_in_alloc_WIRE_1[2])	// @[ISLIP.scala:20:28, :23:14]
          in_alloc_mask <= 10'h7;	// @[ISLIP.scala:17:25, Mux.scala:101:16]
        else if (_in_alloc_WIRE_1[3])	// @[ISLIP.scala:20:28, :23:14]
          in_alloc_mask <= 10'hF;	// @[ISLIP.scala:17:25, Mux.scala:101:16]
        else if (_in_alloc_WIRE_1[4])	// @[ISLIP.scala:20:28, :23:14]
          in_alloc_mask <= 10'h1F;	// @[ISLIP.scala:17:25, Mux.scala:101:16]
        else if (_in_alloc_WIRE_1[5])	// @[ISLIP.scala:20:28, :23:14]
          in_alloc_mask <= 10'h3F;	// @[ISLIP.scala:17:25, Mux.scala:101:16]
        else if (_in_alloc_WIRE_1[6])	// @[ISLIP.scala:20:28, :23:14]
          in_alloc_mask <= 10'h7F;	// @[ISLIP.scala:17:25, Mux.scala:101:16]
        else if (_in_alloc_WIRE_1[7])	// @[ISLIP.scala:20:28, :23:14]
          in_alloc_mask <= 10'hFF;	// @[ISLIP.scala:17:25, Mux.scala:101:16]
        else if (_in_alloc_WIRE_1[8])	// @[ISLIP.scala:20:28, :23:14]
          in_alloc_mask <= 10'h1FF;	// @[ISLIP.scala:17:25, Mux.scala:101:16]
        else	// @[ISLIP.scala:23:14]
          in_alloc_mask <= {10{_in_alloc_WIRE_1[9]}};	// @[ISLIP.scala:17:25, :20:28, :23:14, Mux.scala:101:16]
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    wire  [3:0]  _T_28 = {1'h0, {1'h0, {1'h0, in_arb_vals_0 & _in_alloc_WIRE_1[0]} + {1'h0, in_arb_vals_0 & _in_alloc_WIRE_1[1]}} + {1'h0, {1'h0, in_alloc_0_2} + {1'h0, in_arb_vals_0 & _in_alloc_WIRE_1[3]} + {1'h0, in_arb_vals_0 & _in_alloc_WIRE_1[4]}}} + {1'h0, {1'h0, {1'h0, in_arb_vals_0 & _in_alloc_WIRE_1[5]} + {1'h0, in_alloc_0_6}} + {1'h0, {1'h0, in_arb_vals_0 & _in_alloc_WIRE_1[7]} + {1'h0, in_arb_vals_0 & _in_alloc_WIRE_1[8]} + {1'h0, in_arb_vals_0 & _in_alloc_WIRE_1[9]}}};	// @[Bitwise.scala:51:90, ISLIP.scala:20:28, :33:40, SingleVCAllocator.scala:32:39, :41:18]
    always @(posedge clock) begin	// @[SingleVCAllocator.scala:53:11]
      if (~reset & (|(_T_28[3:1]))) begin	// @[Bitwise.scala:51:90, SingleVCAllocator.scala:53:{11,47}]
        if (`ASSERT_VERBOSE_COND_)	// @[SingleVCAllocator.scala:53:11]
          $error("Assertion failed\n    at SingleVCAllocator.scala:53 assert(PopCount(io.resp(i).vc_sel.asUInt) <= 1.U)\n");	// @[SingleVCAllocator.scala:53:11]
        if (`STOP_COND_)	// @[SingleVCAllocator.scala:53:11]
          $fatal;	// @[SingleVCAllocator.scala:53:11]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        mask = _RANDOM_0[0];	// @[SingleVCAllocator.scala:16:21]
        in_alloc_mask = _RANDOM_0[10:1];	// @[ISLIP.scala:17:25, SingleVCAllocator.scala:16:21]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_req_0_ready = |in_arb_filter;	// @[Mux.scala:47:70, SingleVCAllocator.scala:20:57]
  assign io_resp_0_vc_sel_0_2 = in_alloc_0_2;	// @[SingleVCAllocator.scala:41:18]
  assign io_resp_0_vc_sel_0_6 = in_alloc_0_6;	// @[SingleVCAllocator.scala:41:18]
  assign io_out_allocs_0_2_alloc = in_alloc_0_2;	// @[SingleVCAllocator.scala:41:18]
  assign io_out_allocs_0_6_alloc = in_alloc_0_6;	// @[SingleVCAllocator.scala:41:18]
endmodule

