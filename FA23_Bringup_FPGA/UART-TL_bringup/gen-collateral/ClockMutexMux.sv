// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module ClockMutexMux(
  input  io_clocksIn_0,
         io_clocksIn_1,
         io_resetAsync,
         io_sel,
  output io_clockOut
);

  wire _gaters_1_out;	// @[ClockUtil.scala:94:23]
  wire _gaters_0_out;	// @[ClockUtil.scala:94:23]
  wire _syncs_1_io_q;	// @[ClockUtil.scala:92:83]
  wire _syncs_0_io_q;	// @[ClockUtil.scala:92:83]
  wire _andClocks_x_3_clockOut;	// @[ClockUtil.scala:58:23]
  wire _andClocks_x_2_clockOut;	// @[ClockUtil.scala:40:23]
  wire _andClocks_x_1_clockOut;	// @[ClockUtil.scala:58:23]
  wire _andClocks_x_clockOut;	// @[ClockUtil.scala:40:23]
  ClockInverter andClocks_x (	// @[ClockUtil.scala:40:23]
    .clockIn  (io_clocksIn_0),
    .clockOut (_andClocks_x_clockOut)
  );
  ClockSignalNor2 andClocks_x_1 (	// @[ClockUtil.scala:58:23]
    .clockIn  (_andClocks_x_clockOut),	// @[ClockUtil.scala:40:23]
    .signalIn (io_resetAsync),
    .clockOut (_andClocks_x_1_clockOut)
  );
  ClockInverter andClocks_x_2 (	// @[ClockUtil.scala:40:23]
    .clockIn  (io_clocksIn_1),
    .clockOut (_andClocks_x_2_clockOut)
  );
  ClockSignalNor2 andClocks_x_3 (	// @[ClockUtil.scala:58:23]
    .clockIn  (_andClocks_x_2_clockOut),	// @[ClockUtil.scala:40:23]
    .signalIn (io_resetAsync),
    .clockOut (_andClocks_x_3_clockOut)
  );
  AsyncResetSynchronizerShiftReg_w1_d3_i0 syncs_0 (	// @[ClockUtil.scala:92:83]
    .clock (_andClocks_x_1_clockOut),	// @[ClockUtil.scala:58:23]
    .reset (io_resetAsync),
    .io_d  (~io_sel & ~_syncs_1_io_q),	// @[ClockUtil.scala:92:83, :102:{67,76,79}]
    .io_q  (_syncs_0_io_q)
  );
  AsyncResetSynchronizerShiftReg_w1_d3_i0 syncs_1 (	// @[ClockUtil.scala:92:83]
    .clock (_andClocks_x_3_clockOut),	// @[ClockUtil.scala:58:23]
    .reset (io_resetAsync),
    .io_d  (io_sel & ~_syncs_0_io_q),	// @[ClockUtil.scala:92:83, :102:{76,79}]
    .io_q  (_syncs_1_io_q)
  );
  EICG_wrapper gaters_0 (	// @[ClockUtil.scala:94:23]
    .in      (_andClocks_x_1_clockOut),	// @[ClockUtil.scala:58:23]
    .test_en (1'h0),	// @[ClockUtil.scala:96:22]
    .en      (_syncs_0_io_q),	// @[ClockUtil.scala:92:83]
    .out     (_gaters_0_out)
  );
  EICG_wrapper gaters_1 (	// @[ClockUtil.scala:94:23]
    .in      (_andClocks_x_3_clockOut),	// @[ClockUtil.scala:58:23]
    .test_en (1'h0),	// @[ClockUtil.scala:96:22]
    .en      (_syncs_1_io_q),	// @[ClockUtil.scala:92:83]
    .out     (_gaters_1_out)
  );
  ClockOr2 ClockOr2 (	// @[ClockUtil.scala:110:62]
    .clocksIn_0 (_gaters_0_out),	// @[ClockUtil.scala:94:23]
    .clocksIn_1 (_gaters_1_out),	// @[ClockUtil.scala:94:23]
    .clockOut   (io_clockOut)
  );
endmodule

