// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module SimpleHellaCacheIFReplayQueue(
  input         clock,
                reset,
                io_req_valid,
  input  [39:0] io_req_bits_addr,
  input  [7:0]  io_req_bits_tag,
  input  [4:0]  io_req_bits_cmd,
  input  [1:0]  io_req_bits_dprv,
  input         io_req_bits_dv,
  input  [63:0] io_req_bits_data,
  input  [7:0]  io_req_bits_mask,
  input         io_nack_valid,
  input  [5:0]  io_nack_bits,
  input         io_resp_valid,
  input  [7:0]  io_resp_bits_tag,
  input         io_replay_ready,
  output        io_req_ready,
                io_replay_valid,
  output [39:0] io_replay_bits_addr,
  output [7:0]  io_replay_bits_tag,
  output [4:0]  io_replay_bits_cmd,
  output [1:0]  io_replay_bits_size,
  output        io_replay_bits_signed,
  output [1:0]  io_replay_bits_dprv,
  output        io_replay_bits_dv,
                io_replay_bits_phys,
                io_replay_bits_no_alloc,
                io_replay_bits_no_xcpt,
  output [63:0] io_replay_bits_data,
  output [7:0]  io_replay_bits_mask
);

  wire        _nackq_io_enq_ready;	// @[SimpleHellaCacheIF.scala:44:21]
  wire        _nackq_io_deq_valid;	// @[SimpleHellaCacheIF.scala:44:21]
  wire        _nackq_io_deq_bits;	// @[SimpleHellaCacheIF.scala:44:21]
  reg  [1:0]  inflight;	// @[SimpleHellaCacheIF.scala:34:25]
  reg  [39:0] reqs_0_addr;	// @[SimpleHellaCacheIF.scala:35:17]
  reg  [7:0]  reqs_0_tag;	// @[SimpleHellaCacheIF.scala:35:17]
  reg  [4:0]  reqs_0_cmd;	// @[SimpleHellaCacheIF.scala:35:17]
  reg  [1:0]  reqs_0_size;	// @[SimpleHellaCacheIF.scala:35:17]
  reg         reqs_0_signed;	// @[SimpleHellaCacheIF.scala:35:17]
  reg  [1:0]  reqs_0_dprv;	// @[SimpleHellaCacheIF.scala:35:17]
  reg         reqs_0_dv;	// @[SimpleHellaCacheIF.scala:35:17]
  reg         reqs_0_phys;	// @[SimpleHellaCacheIF.scala:35:17]
  reg         reqs_0_no_alloc;	// @[SimpleHellaCacheIF.scala:35:17]
  reg         reqs_0_no_xcpt;	// @[SimpleHellaCacheIF.scala:35:17]
  reg  [63:0] reqs_0_data;	// @[SimpleHellaCacheIF.scala:35:17]
  reg  [7:0]  reqs_0_mask;	// @[SimpleHellaCacheIF.scala:35:17]
  reg  [39:0] reqs_1_addr;	// @[SimpleHellaCacheIF.scala:35:17]
  reg  [7:0]  reqs_1_tag;	// @[SimpleHellaCacheIF.scala:35:17]
  reg  [4:0]  reqs_1_cmd;	// @[SimpleHellaCacheIF.scala:35:17]
  reg  [1:0]  reqs_1_size;	// @[SimpleHellaCacheIF.scala:35:17]
  reg         reqs_1_signed;	// @[SimpleHellaCacheIF.scala:35:17]
  reg  [1:0]  reqs_1_dprv;	// @[SimpleHellaCacheIF.scala:35:17]
  reg         reqs_1_dv;	// @[SimpleHellaCacheIF.scala:35:17]
  reg         reqs_1_phys;	// @[SimpleHellaCacheIF.scala:35:17]
  reg         reqs_1_no_alloc;	// @[SimpleHellaCacheIF.scala:35:17]
  reg         reqs_1_no_xcpt;	// @[SimpleHellaCacheIF.scala:35:17]
  reg  [63:0] reqs_1_data;	// @[SimpleHellaCacheIF.scala:35:17]
  reg  [7:0]  reqs_1_mask;	// @[SimpleHellaCacheIF.scala:35:17]
  reg         replaying;	// @[SimpleHellaCacheIF.scala:45:26]
  wire        _io_replay_valid_output = _nackq_io_deq_valid & ~replaying;	// @[SimpleHellaCacheIF.scala:44:21, :45:26, :55:{41,44}]
  wire [7:0]  _GEN = _nackq_io_deq_bits ? reqs_1_tag : reqs_0_tag;	// @[SimpleHellaCacheIF.scala:35:17, :44:21, :56:18]
  wire        _io_req_ready_output = inflight != 2'h3 & ~_nackq_io_deq_valid & ~io_nack_valid;	// @[SimpleHellaCacheIF.scala:34:25, :44:21, :59:{29,37,57,60}]
  wire [7:0]  _GEN_0 = {2'h0, io_nack_bits};	// @[SimpleHellaCacheIF.scala:34:25, :62:40]
  wire        replay_complete = io_resp_valid & replaying & io_resp_bits_tag == _GEN;	// @[SimpleHellaCacheIF.scala:45:26, :56:18, :65:{52,72}]
  wire        nack_head = io_nack_valid & _nackq_io_deq_valid & _GEN_0 == _GEN;	// @[SimpleHellaCacheIF.scala:44:21, :56:18, :62:40, :66:{55,71}]
  wire        _nackq_io_enq_valid_T_1 = io_nack_valid & ~nack_head;	// @[SimpleHellaCacheIF.scala:66:55, :70:{39,42}]
  wire [1:0]  _next_inflight_onehot_T = ~inflight;	// @[SimpleHellaCacheIF.scala:34:25, :47:48]
  wire [1:0]  next_inflight_onehot = _next_inflight_onehot_T[0] ? 2'h1 : {_next_inflight_onehot_T[1], 1'h0};	// @[Mux.scala:47:70, OneHot.scala:84:71, SimpleHellaCacheIF.scala:47:48]
  wire        _T_10 = _io_req_ready_output & io_req_valid;	// @[Decoupled.scala:51:35, SimpleHellaCacheIF.scala:59:57]
  wire        _GEN_1 = _T_10 & ~(next_inflight_onehot[1]);	// @[CircuitMath.scala:28:8, Decoupled.scala:51:35, Mux.scala:47:70, SimpleHellaCacheIF.scala:35:17, :85:24, :86:25]
  wire        _GEN_2 = _T_10 & next_inflight_onehot[1];	// @[CircuitMath.scala:28:8, Decoupled.scala:51:35, Mux.scala:47:70, SimpleHellaCacheIF.scala:35:17, :85:24, :86:25]
  always @(posedge clock) begin
    if (reset) begin
      inflight <= 2'h0;	// @[SimpleHellaCacheIF.scala:34:25]
      replaying <= 1'h0;	// @[SimpleHellaCacheIF.scala:45:26]
    end
    else begin
      inflight <= (inflight | (_T_10 ? next_inflight_onehot : 2'h0)) & ~(io_resp_valid ? {reqs_1_tag == io_resp_bits_tag, reqs_0_tag == io_resp_bits_tag} & inflight : 2'h0);	// @[Cat.scala:33:92, Decoupled.scala:51:35, Mux.scala:47:70, SimpleHellaCacheIF.scala:34:25, :35:17, :63:{40,71}, :82:{25,30,74}, :83:{27,31}]
      replaying <= ~(nack_head | replay_complete) & (io_replay_ready & _io_replay_valid_output | replaying);	// @[Decoupled.scala:51:35, SimpleHellaCacheIF.scala:45:26, :55:41, :65:52, :66:55, :90:{27,39}, :91:{19,39,51}]
    end
    if (_GEN_1) begin	// @[SimpleHellaCacheIF.scala:35:17, :85:24, :86:25]
      reqs_0_addr <= io_req_bits_addr;	// @[SimpleHellaCacheIF.scala:35:17]
      reqs_0_tag <= io_req_bits_tag;	// @[SimpleHellaCacheIF.scala:35:17]
      reqs_0_cmd <= io_req_bits_cmd;	// @[SimpleHellaCacheIF.scala:35:17]
      reqs_0_size <= 2'h3;	// @[SimpleHellaCacheIF.scala:35:17]
      reqs_0_dprv <= io_req_bits_dprv;	// @[SimpleHellaCacheIF.scala:35:17]
      reqs_0_dv <= io_req_bits_dv;	// @[SimpleHellaCacheIF.scala:35:17]
      reqs_0_data <= io_req_bits_data;	// @[SimpleHellaCacheIF.scala:35:17]
      reqs_0_mask <= io_req_bits_mask;	// @[SimpleHellaCacheIF.scala:35:17]
    end
    reqs_0_signed <= ~_GEN_1 & reqs_0_signed;	// @[SimpleHellaCacheIF.scala:35:17, :85:24, :86:25]
    reqs_0_phys <= ~_GEN_1 & reqs_0_phys;	// @[SimpleHellaCacheIF.scala:35:17, :85:24, :86:25]
    reqs_0_no_alloc <= ~_GEN_1 & reqs_0_no_alloc;	// @[SimpleHellaCacheIF.scala:35:17, :85:24, :86:25]
    reqs_0_no_xcpt <= ~_GEN_1 & reqs_0_no_xcpt;	// @[SimpleHellaCacheIF.scala:35:17, :85:24, :86:25]
    if (_GEN_2) begin	// @[SimpleHellaCacheIF.scala:35:17, :85:24, :86:25]
      reqs_1_addr <= io_req_bits_addr;	// @[SimpleHellaCacheIF.scala:35:17]
      reqs_1_tag <= io_req_bits_tag;	// @[SimpleHellaCacheIF.scala:35:17]
      reqs_1_cmd <= io_req_bits_cmd;	// @[SimpleHellaCacheIF.scala:35:17]
      reqs_1_size <= 2'h3;	// @[SimpleHellaCacheIF.scala:35:17]
      reqs_1_dprv <= io_req_bits_dprv;	// @[SimpleHellaCacheIF.scala:35:17]
      reqs_1_dv <= io_req_bits_dv;	// @[SimpleHellaCacheIF.scala:35:17]
      reqs_1_data <= io_req_bits_data;	// @[SimpleHellaCacheIF.scala:35:17]
      reqs_1_mask <= io_req_bits_mask;	// @[SimpleHellaCacheIF.scala:35:17]
    end
    reqs_1_signed <= ~_GEN_2 & reqs_1_signed;	// @[SimpleHellaCacheIF.scala:35:17, :85:24, :86:25]
    reqs_1_phys <= ~_GEN_2 & reqs_1_phys;	// @[SimpleHellaCacheIF.scala:35:17, :85:24, :86:25]
    reqs_1_no_alloc <= ~_GEN_2 & reqs_1_no_alloc;	// @[SimpleHellaCacheIF.scala:35:17, :85:24, :86:25]
    reqs_1_no_xcpt <= ~_GEN_2 & reqs_1_no_xcpt;	// @[SimpleHellaCacheIF.scala:35:17, :85:24, :86:25]
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// @[SimpleHellaCacheIF.scala:72:9]
      if (~reset & ~(~_nackq_io_enq_valid_T_1 | _nackq_io_enq_ready)) begin	// @[SimpleHellaCacheIF.scala:44:21, :70:39, :72:{9,10,30}]
        if (`ASSERT_VERBOSE_COND_)	// @[SimpleHellaCacheIF.scala:72:9]
          $error("Assertion failed: SimpleHellaCacheIF: ReplayQueue nack queue overflow\n    at SimpleHellaCacheIF.scala:72 assert(!nackq.io.enq.valid || nackq.io.enq.ready,\n");	// @[SimpleHellaCacheIF.scala:72:9]
        if (`STOP_COND_)	// @[SimpleHellaCacheIF.scala:72:9]
          $fatal;	// @[SimpleHellaCacheIF.scala:72:9]
      end
      if (~reset & ~(~replay_complete | _nackq_io_deq_valid)) begin	// @[SimpleHellaCacheIF.scala:44:21, :65:52, :77:{9,10,30}]
        if (`ASSERT_VERBOSE_COND_)	// @[SimpleHellaCacheIF.scala:77:9]
          $error("Assertion failed: SimpleHellaCacheIF: ReplayQueue nack queue underflow\n    at SimpleHellaCacheIF.scala:77 assert(!nackq.io.deq.ready || nackq.io.deq.valid,\n");	// @[SimpleHellaCacheIF.scala:77:9]
        if (`STOP_COND_)	// @[SimpleHellaCacheIF.scala:77:9]
          $fatal;	// @[SimpleHellaCacheIF.scala:77:9]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        inflight = _RANDOM_0[1:0];	// @[SimpleHellaCacheIF.scala:34:25]
        reqs_0_addr = {_RANDOM_0[31:2], _RANDOM_1[9:0]};	// @[SimpleHellaCacheIF.scala:34:25, :35:17]
        reqs_0_tag = _RANDOM_1[17:10];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_0_cmd = _RANDOM_1[22:18];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_0_size = _RANDOM_1[24:23];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_0_signed = _RANDOM_1[25];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_0_dprv = _RANDOM_1[27:26];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_0_dv = _RANDOM_1[28];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_0_phys = _RANDOM_1[29];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_0_no_alloc = _RANDOM_1[30];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_0_no_xcpt = _RANDOM_1[31];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_0_data = {_RANDOM_2, _RANDOM_3};	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_0_mask = _RANDOM_4[7:0];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_1_addr = {_RANDOM_4[31:8], _RANDOM_5[15:0]};	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_1_tag = _RANDOM_5[23:16];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_1_cmd = _RANDOM_5[28:24];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_1_size = _RANDOM_5[30:29];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_1_signed = _RANDOM_5[31];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_1_dprv = _RANDOM_6[1:0];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_1_dv = _RANDOM_6[2];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_1_phys = _RANDOM_6[3];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_1_no_alloc = _RANDOM_6[4];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_1_no_xcpt = _RANDOM_6[5];	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_1_data = {_RANDOM_6[31:6], _RANDOM_7, _RANDOM_8[5:0]};	// @[SimpleHellaCacheIF.scala:35:17]
        reqs_1_mask = _RANDOM_8[13:6];	// @[SimpleHellaCacheIF.scala:35:17]
        replaying = _RANDOM_8[14];	// @[SimpleHellaCacheIF.scala:35:17, :45:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Queue_289 nackq (	// @[SimpleHellaCacheIF.scala:44:21]
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (_nackq_io_enq_valid_T_1),	// @[SimpleHellaCacheIF.scala:70:39]
    .io_enq_bits  (reqs_1_tag == _GEN_0 & inflight[1]),	// @[SimpleHellaCacheIF.scala:34:25, :35:17, :62:{40,67}]
    .io_deq_ready (replay_complete),	// @[SimpleHellaCacheIF.scala:65:52]
    .io_enq_ready (_nackq_io_enq_ready),
    .io_deq_valid (_nackq_io_deq_valid),
    .io_deq_bits  (_nackq_io_deq_bits)
  );
  assign io_req_ready = _io_req_ready_output;	// @[SimpleHellaCacheIF.scala:59:57]
  assign io_replay_valid = _io_replay_valid_output;	// @[SimpleHellaCacheIF.scala:55:41]
  assign io_replay_bits_addr = _nackq_io_deq_bits ? reqs_1_addr : reqs_0_addr;	// @[SimpleHellaCacheIF.scala:35:17, :44:21, :56:18]
  assign io_replay_bits_tag = _GEN;	// @[SimpleHellaCacheIF.scala:56:18]
  assign io_replay_bits_cmd = _nackq_io_deq_bits ? reqs_1_cmd : reqs_0_cmd;	// @[SimpleHellaCacheIF.scala:35:17, :44:21, :56:18]
  assign io_replay_bits_size = _nackq_io_deq_bits ? reqs_1_size : reqs_0_size;	// @[SimpleHellaCacheIF.scala:35:17, :44:21, :56:18]
  assign io_replay_bits_signed = _nackq_io_deq_bits ? reqs_1_signed : reqs_0_signed;	// @[SimpleHellaCacheIF.scala:35:17, :44:21, :56:18]
  assign io_replay_bits_dprv = _nackq_io_deq_bits ? reqs_1_dprv : reqs_0_dprv;	// @[SimpleHellaCacheIF.scala:35:17, :44:21, :56:18]
  assign io_replay_bits_dv = _nackq_io_deq_bits ? reqs_1_dv : reqs_0_dv;	// @[SimpleHellaCacheIF.scala:35:17, :44:21, :56:18]
  assign io_replay_bits_phys = _nackq_io_deq_bits ? reqs_1_phys : reqs_0_phys;	// @[SimpleHellaCacheIF.scala:35:17, :44:21, :56:18]
  assign io_replay_bits_no_alloc = _nackq_io_deq_bits ? reqs_1_no_alloc : reqs_0_no_alloc;	// @[SimpleHellaCacheIF.scala:35:17, :44:21, :56:18]
  assign io_replay_bits_no_xcpt = _nackq_io_deq_bits ? reqs_1_no_xcpt : reqs_0_no_xcpt;	// @[SimpleHellaCacheIF.scala:35:17, :44:21, :56:18]
  assign io_replay_bits_data = _nackq_io_deq_bits ? reqs_1_data : reqs_0_data;	// @[SimpleHellaCacheIF.scala:35:17, :44:21, :56:18]
  assign io_replay_bits_mask = _nackq_io_deq_bits ? reqs_1_mask : reqs_0_mask;	// @[SimpleHellaCacheIF.scala:35:17, :44:21, :56:18]
endmodule

