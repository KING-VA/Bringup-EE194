// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module MulRecFN(
  input  [32:0] io_a,
                io_b,
  output [32:0] io_out
);

  wire [4:0]  _roundRawFNToRecFN_io_exceptionFlags;	// @[MulRecFN.scala:121:15]
  wire        _mulRawFN_io_invalidExc;	// @[MulRecFN.scala:113:26]
  wire        _mulRawFN_io_rawOut_isNaN;	// @[MulRecFN.scala:113:26]
  wire        _mulRawFN_io_rawOut_isInf;	// @[MulRecFN.scala:113:26]
  wire        _mulRawFN_io_rawOut_isZero;	// @[MulRecFN.scala:113:26]
  wire        _mulRawFN_io_rawOut_sign;	// @[MulRecFN.scala:113:26]
  wire [9:0]  _mulRawFN_io_rawOut_sExp;	// @[MulRecFN.scala:113:26]
  wire [26:0] _mulRawFN_io_rawOut_sig;	// @[MulRecFN.scala:113:26]
  MulRawFN mulRawFN (	// @[MulRecFN.scala:113:26]
    .io_a_isNaN       ((&(io_a[31:30])) & io_a[29]),	// @[rawFloatFromRecFN.scala:50:21, :52:{29,54}, :55:{33,41}]
    .io_a_isInf       ((&(io_a[31:30])) & ~(io_a[29])),	// @[rawFloatFromRecFN.scala:50:21, :52:{29,54}, :55:41, :56:{33,36}]
    .io_a_isZero      (~(|(io_a[31:29]))),	// @[rawFloatFromRecFN.scala:50:21, :51:{29,54}]
    .io_a_sign        (io_a[32]),	// @[rawFloatFromRecFN.scala:58:25]
    .io_a_sExp        ({1'h0, io_a[31:23]}),	// @[rawFloatFromRecFN.scala:50:21, :59:27]
    .io_a_sig         ({1'h0, |(io_a[31:29]), io_a[22:0]}),	// @[Cat.scala:33:92, rawFloatFromRecFN.scala:50:21, :51:{29,54}, :60:51]
    .io_b_isNaN       ((&(io_b[31:30])) & io_b[29]),	// @[rawFloatFromRecFN.scala:50:21, :52:{29,54}, :55:{33,41}]
    .io_b_isInf       ((&(io_b[31:30])) & ~(io_b[29])),	// @[rawFloatFromRecFN.scala:50:21, :52:{29,54}, :55:41, :56:{33,36}]
    .io_b_isZero      (~(|(io_b[31:29]))),	// @[rawFloatFromRecFN.scala:50:21, :51:{29,54}]
    .io_b_sign        (io_b[32]),	// @[rawFloatFromRecFN.scala:58:25]
    .io_b_sExp        ({1'h0, io_b[31:23]}),	// @[rawFloatFromRecFN.scala:50:21, :59:27]
    .io_b_sig         ({1'h0, |(io_b[31:29]), io_b[22:0]}),	// @[Cat.scala:33:92, rawFloatFromRecFN.scala:50:21, :51:{29,54}, :60:51]
    .io_invalidExc    (_mulRawFN_io_invalidExc),
    .io_rawOut_isNaN  (_mulRawFN_io_rawOut_isNaN),
    .io_rawOut_isInf  (_mulRawFN_io_rawOut_isInf),
    .io_rawOut_isZero (_mulRawFN_io_rawOut_isZero),
    .io_rawOut_sign   (_mulRawFN_io_rawOut_sign),
    .io_rawOut_sExp   (_mulRawFN_io_rawOut_sExp),
    .io_rawOut_sig    (_mulRawFN_io_rawOut_sig)
  );
  RoundRawFNToRecFN roundRawFNToRecFN (	// @[MulRecFN.scala:121:15]
    .io_invalidExc     (_mulRawFN_io_invalidExc),	// @[MulRecFN.scala:113:26]
    .io_infiniteExc    (1'h0),
    .io_in_isNaN       (_mulRawFN_io_rawOut_isNaN),	// @[MulRecFN.scala:113:26]
    .io_in_isInf       (_mulRawFN_io_rawOut_isInf),	// @[MulRecFN.scala:113:26]
    .io_in_isZero      (_mulRawFN_io_rawOut_isZero),	// @[MulRecFN.scala:113:26]
    .io_in_sign        (_mulRawFN_io_rawOut_sign),	// @[MulRecFN.scala:113:26]
    .io_in_sExp        (_mulRawFN_io_rawOut_sExp),	// @[MulRecFN.scala:113:26]
    .io_in_sig         (_mulRawFN_io_rawOut_sig),	// @[MulRecFN.scala:113:26]
    .io_roundingMode   (3'h3),
    .io_detectTininess (1'h0),
    .io_out            (io_out),
    .io_exceptionFlags (_roundRawFNToRecFN_io_exceptionFlags)
  );
endmodule

