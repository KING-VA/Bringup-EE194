// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module floatAddTree(
  input         clock,
                reset,
  input  [31:0] io_vec_0,
                io_vec_1,
                io_vec_2,
                io_vec_3,
                io_vec_4,
                io_vec_5,
                io_vec_6,
                io_vec_7,
                io_vec_8,
                io_vec_9,
                io_vec_10,
                io_vec_11,
                io_vec_12,
                io_vec_13,
                io_vec_14,
                io_vec_15,
  output [31:0] io_out
);

  wire [31:0] _io_out_adder_13_io_out;	// @[floatAddTree.scala:19:23]
  wire [31:0] _io_out_adder_12_io_out;	// @[floatAddTree.scala:19:23]
  wire [31:0] _io_out_adder_11_io_out;	// @[floatAddTree.scala:19:23]
  wire [31:0] _io_out_adder_10_io_out;	// @[floatAddTree.scala:19:23]
  wire [31:0] _io_out_adder_9_io_out;	// @[floatAddTree.scala:19:23]
  wire [31:0] _io_out_adder_8_io_out;	// @[floatAddTree.scala:19:23]
  wire [31:0] _io_out_adder_7_io_out;	// @[floatAddTree.scala:19:23]
  wire [31:0] _io_out_adder_6_io_out;	// @[floatAddTree.scala:19:23]
  wire [31:0] _io_out_adder_5_io_out;	// @[floatAddTree.scala:19:23]
  wire [31:0] _io_out_adder_4_io_out;	// @[floatAddTree.scala:19:23]
  wire [31:0] _io_out_adder_3_io_out;	// @[floatAddTree.scala:19:23]
  wire [31:0] _io_out_adder_2_io_out;	// @[floatAddTree.scala:19:23]
  wire [31:0] _io_out_adder_1_io_out;	// @[floatAddTree.scala:19:23]
  wire [31:0] _io_out_adder_io_out;	// @[floatAddTree.scala:19:23]
  floatAdd io_out_adder (	// @[floatAddTree.scala:19:23]
    .clock  (clock),
    .reset  (reset),
    .io_in0 (io_vec_0),
    .io_in1 (io_vec_1),
    .io_out (_io_out_adder_io_out)
  );
  floatAdd io_out_adder_1 (	// @[floatAddTree.scala:19:23]
    .clock  (clock),
    .reset  (reset),
    .io_in0 (io_vec_2),
    .io_in1 (io_vec_3),
    .io_out (_io_out_adder_1_io_out)
  );
  floatAdd io_out_adder_2 (	// @[floatAddTree.scala:19:23]
    .clock  (clock),
    .reset  (reset),
    .io_in0 (io_vec_4),
    .io_in1 (io_vec_5),
    .io_out (_io_out_adder_2_io_out)
  );
  floatAdd io_out_adder_3 (	// @[floatAddTree.scala:19:23]
    .clock  (clock),
    .reset  (reset),
    .io_in0 (io_vec_6),
    .io_in1 (io_vec_7),
    .io_out (_io_out_adder_3_io_out)
  );
  floatAdd io_out_adder_4 (	// @[floatAddTree.scala:19:23]
    .clock  (clock),
    .reset  (reset),
    .io_in0 (io_vec_8),
    .io_in1 (io_vec_9),
    .io_out (_io_out_adder_4_io_out)
  );
  floatAdd io_out_adder_5 (	// @[floatAddTree.scala:19:23]
    .clock  (clock),
    .reset  (reset),
    .io_in0 (io_vec_10),
    .io_in1 (io_vec_11),
    .io_out (_io_out_adder_5_io_out)
  );
  floatAdd io_out_adder_6 (	// @[floatAddTree.scala:19:23]
    .clock  (clock),
    .reset  (reset),
    .io_in0 (io_vec_12),
    .io_in1 (io_vec_13),
    .io_out (_io_out_adder_6_io_out)
  );
  floatAdd io_out_adder_7 (	// @[floatAddTree.scala:19:23]
    .clock  (clock),
    .reset  (reset),
    .io_in0 (io_vec_14),
    .io_in1 (io_vec_15),
    .io_out (_io_out_adder_7_io_out)
  );
  floatAdd io_out_adder_8 (	// @[floatAddTree.scala:19:23]
    .clock  (clock),
    .reset  (reset),
    .io_in0 (_io_out_adder_io_out),	// @[floatAddTree.scala:19:23]
    .io_in1 (_io_out_adder_1_io_out),	// @[floatAddTree.scala:19:23]
    .io_out (_io_out_adder_8_io_out)
  );
  floatAdd io_out_adder_9 (	// @[floatAddTree.scala:19:23]
    .clock  (clock),
    .reset  (reset),
    .io_in0 (_io_out_adder_2_io_out),	// @[floatAddTree.scala:19:23]
    .io_in1 (_io_out_adder_3_io_out),	// @[floatAddTree.scala:19:23]
    .io_out (_io_out_adder_9_io_out)
  );
  floatAdd io_out_adder_10 (	// @[floatAddTree.scala:19:23]
    .clock  (clock),
    .reset  (reset),
    .io_in0 (_io_out_adder_4_io_out),	// @[floatAddTree.scala:19:23]
    .io_in1 (_io_out_adder_5_io_out),	// @[floatAddTree.scala:19:23]
    .io_out (_io_out_adder_10_io_out)
  );
  floatAdd io_out_adder_11 (	// @[floatAddTree.scala:19:23]
    .clock  (clock),
    .reset  (reset),
    .io_in0 (_io_out_adder_6_io_out),	// @[floatAddTree.scala:19:23]
    .io_in1 (_io_out_adder_7_io_out),	// @[floatAddTree.scala:19:23]
    .io_out (_io_out_adder_11_io_out)
  );
  floatAdd io_out_adder_12 (	// @[floatAddTree.scala:19:23]
    .clock  (clock),
    .reset  (reset),
    .io_in0 (_io_out_adder_8_io_out),	// @[floatAddTree.scala:19:23]
    .io_in1 (_io_out_adder_9_io_out),	// @[floatAddTree.scala:19:23]
    .io_out (_io_out_adder_12_io_out)
  );
  floatAdd io_out_adder_13 (	// @[floatAddTree.scala:19:23]
    .clock  (clock),
    .reset  (reset),
    .io_in0 (_io_out_adder_10_io_out),	// @[floatAddTree.scala:19:23]
    .io_in1 (_io_out_adder_11_io_out),	// @[floatAddTree.scala:19:23]
    .io_out (_io_out_adder_13_io_out)
  );
  floatAdd io_out_adder_14 (	// @[floatAddTree.scala:19:23]
    .clock  (clock),
    .reset  (reset),
    .io_in0 (_io_out_adder_12_io_out),	// @[floatAddTree.scala:19:23]
    .io_in1 (_io_out_adder_13_io_out),	// @[floatAddTree.scala:19:23]
    .io_out (io_out)
  );
endmodule

