// platform_altera_mm_interconnect_1920_7w4kisa.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module platform_altera_mm_interconnect_1920_7w4kisa (
		input  wire [3:0]   uart_to_serializedtl_0_altera_axi4_master_awid,                                             //                                            uart_to_serializedtl_0_altera_axi4_master.awid
		input  wire [36:0]  uart_to_serializedtl_0_altera_axi4_master_awaddr,                                           //                                                                                     .awaddr
		input  wire [7:0]   uart_to_serializedtl_0_altera_axi4_master_awlen,                                            //                                                                                     .awlen
		input  wire [2:0]   uart_to_serializedtl_0_altera_axi4_master_awsize,                                           //                                                                                     .awsize
		input  wire [1:0]   uart_to_serializedtl_0_altera_axi4_master_awburst,                                          //                                                                                     .awburst
		input  wire [0:0]   uart_to_serializedtl_0_altera_axi4_master_awlock,                                           //                                                                                     .awlock
		input  wire [3:0]   uart_to_serializedtl_0_altera_axi4_master_awcache,                                          //                                                                                     .awcache
		input  wire [2:0]   uart_to_serializedtl_0_altera_axi4_master_awprot,                                           //                                                                                     .awprot
		input  wire [3:0]   uart_to_serializedtl_0_altera_axi4_master_awqos,                                            //                                                                                     .awqos
		input  wire         uart_to_serializedtl_0_altera_axi4_master_awvalid,                                          //                                                                                     .awvalid
		output wire         uart_to_serializedtl_0_altera_axi4_master_awready,                                          //                                                                                     .awready
		input  wire [63:0]  uart_to_serializedtl_0_altera_axi4_master_wdata,                                            //                                                                                     .wdata
		input  wire [7:0]   uart_to_serializedtl_0_altera_axi4_master_wstrb,                                            //                                                                                     .wstrb
		input  wire         uart_to_serializedtl_0_altera_axi4_master_wlast,                                            //                                                                                     .wlast
		input  wire         uart_to_serializedtl_0_altera_axi4_master_wvalid,                                           //                                                                                     .wvalid
		output wire         uart_to_serializedtl_0_altera_axi4_master_wready,                                           //                                                                                     .wready
		output wire [3:0]   uart_to_serializedtl_0_altera_axi4_master_bid,                                              //                                                                                     .bid
		output wire [1:0]   uart_to_serializedtl_0_altera_axi4_master_bresp,                                            //                                                                                     .bresp
		output wire         uart_to_serializedtl_0_altera_axi4_master_bvalid,                                           //                                                                                     .bvalid
		input  wire         uart_to_serializedtl_0_altera_axi4_master_bready,                                           //                                                                                     .bready
		input  wire [3:0]   uart_to_serializedtl_0_altera_axi4_master_arid,                                             //                                                                                     .arid
		input  wire [36:0]  uart_to_serializedtl_0_altera_axi4_master_araddr,                                           //                                                                                     .araddr
		input  wire [7:0]   uart_to_serializedtl_0_altera_axi4_master_arlen,                                            //                                                                                     .arlen
		input  wire [2:0]   uart_to_serializedtl_0_altera_axi4_master_arsize,                                           //                                                                                     .arsize
		input  wire [1:0]   uart_to_serializedtl_0_altera_axi4_master_arburst,                                          //                                                                                     .arburst
		input  wire [0:0]   uart_to_serializedtl_0_altera_axi4_master_arlock,                                           //                                                                                     .arlock
		input  wire [3:0]   uart_to_serializedtl_0_altera_axi4_master_arcache,                                          //                                                                                     .arcache
		input  wire [2:0]   uart_to_serializedtl_0_altera_axi4_master_arprot,                                           //                                                                                     .arprot
		input  wire [3:0]   uart_to_serializedtl_0_altera_axi4_master_arqos,                                            //                                                                                     .arqos
		input  wire         uart_to_serializedtl_0_altera_axi4_master_arvalid,                                          //                                                                                     .arvalid
		output wire         uart_to_serializedtl_0_altera_axi4_master_arready,                                          //                                                                                     .arready
		output wire [3:0]   uart_to_serializedtl_0_altera_axi4_master_rid,                                              //                                                                                     .rid
		output wire [63:0]  uart_to_serializedtl_0_altera_axi4_master_rdata,                                            //                                                                                     .rdata
		output wire [1:0]   uart_to_serializedtl_0_altera_axi4_master_rresp,                                            //                                                                                     .rresp
		output wire         uart_to_serializedtl_0_altera_axi4_master_rlast,                                            //                                                                                     .rlast
		output wire         uart_to_serializedtl_0_altera_axi4_master_rvalid,                                           //                                                                                     .rvalid
		input  wire         uart_to_serializedtl_0_altera_axi4_master_rready,                                           //                                                                                     .rready
		output wire [27:0]  emif_fm_0_ctrl_amm_0_address,                                                               //                                                                 emif_fm_0_ctrl_amm_0.address
		output wire         emif_fm_0_ctrl_amm_0_write,                                                                 //                                                                                     .write
		output wire         emif_fm_0_ctrl_amm_0_read,                                                                  //                                                                                     .read
		input  wire [511:0] emif_fm_0_ctrl_amm_0_readdata,                                                              //                                                                                     .readdata
		output wire [511:0] emif_fm_0_ctrl_amm_0_writedata,                                                             //                                                                                     .writedata
		output wire [6:0]   emif_fm_0_ctrl_amm_0_burstcount,                                                            //                                                                                     .burstcount
		output wire [63:0]  emif_fm_0_ctrl_amm_0_byteenable,                                                            //                                                                                     .byteenable
		input  wire         emif_fm_0_ctrl_amm_0_readdatavalid,                                                         //                                                                                     .readdatavalid
		input  wire         emif_fm_0_ctrl_amm_0_waitrequest,                                                           //                                                                                     .waitrequest
		input  wire         uart_to_serializedtl_0_reset_reset_bridge_in_reset_reset,                                   //                                   uart_to_serializedtl_0_reset_reset_bridge_in_reset.reset
		input  wire         uart_to_serializedtl_0_altera_axi4_master_translator_clk_reset_reset_bridge_in_reset_reset, // uart_to_serializedtl_0_altera_axi4_master_translator_clk_reset_reset_bridge_in_reset.reset
		input  wire         emif_fm_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset,                          //                          emif_fm_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset.reset
		input  wire         emif_fm_0_ctrl_amm_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset,                  //                  emif_fm_0_ctrl_amm_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset.reset
		input  wire         clock_in_out_clk_clk,                                                                       //                                                                     clock_in_out_clk.clk
		input  wire         emif_fm_0_emif_usr_clk_clk                                                                  //                                                               emif_fm_0_emif_usr_clk.clk
	);

	wire    [0:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_ruser;          // uart_to_serializedtl_0_altera_axi4_master_agent:ruser -> uart_to_serializedtl_0_altera_axi4_master_translator:m0_ruser
	wire    [0:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_wuser;          // uart_to_serializedtl_0_altera_axi4_master_translator:m0_wuser -> uart_to_serializedtl_0_altera_axi4_master_agent:wuser
	wire    [1:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_awburst;        // uart_to_serializedtl_0_altera_axi4_master_translator:m0_awburst -> uart_to_serializedtl_0_altera_axi4_master_agent:awburst
	wire    [3:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_arregion;       // uart_to_serializedtl_0_altera_axi4_master_translator:m0_arregion -> uart_to_serializedtl_0_altera_axi4_master_agent:arregion
	wire    [0:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_awuser;         // uart_to_serializedtl_0_altera_axi4_master_translator:m0_awuser -> uart_to_serializedtl_0_altera_axi4_master_agent:awuser
	wire    [7:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_arlen;          // uart_to_serializedtl_0_altera_axi4_master_translator:m0_arlen -> uart_to_serializedtl_0_altera_axi4_master_agent:arlen
	wire    [3:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_arqos;          // uart_to_serializedtl_0_altera_axi4_master_translator:m0_arqos -> uart_to_serializedtl_0_altera_axi4_master_agent:arqos
	wire    [7:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_wstrb;          // uart_to_serializedtl_0_altera_axi4_master_translator:m0_wstrb -> uart_to_serializedtl_0_altera_axi4_master_agent:wstrb
	wire          uart_to_serializedtl_0_altera_axi4_master_translator_m0_wready;         // uart_to_serializedtl_0_altera_axi4_master_agent:wready -> uart_to_serializedtl_0_altera_axi4_master_translator:m0_wready
	wire    [3:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_rid;            // uart_to_serializedtl_0_altera_axi4_master_agent:rid -> uart_to_serializedtl_0_altera_axi4_master_translator:m0_rid
	wire          uart_to_serializedtl_0_altera_axi4_master_translator_m0_rready;         // uart_to_serializedtl_0_altera_axi4_master_translator:m0_rready -> uart_to_serializedtl_0_altera_axi4_master_agent:rready
	wire    [7:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_awlen;          // uart_to_serializedtl_0_altera_axi4_master_translator:m0_awlen -> uart_to_serializedtl_0_altera_axi4_master_agent:awlen
	wire    [3:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_awqos;          // uart_to_serializedtl_0_altera_axi4_master_translator:m0_awqos -> uart_to_serializedtl_0_altera_axi4_master_agent:awqos
	wire    [3:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_arcache;        // uart_to_serializedtl_0_altera_axi4_master_translator:m0_arcache -> uart_to_serializedtl_0_altera_axi4_master_agent:arcache
	wire          uart_to_serializedtl_0_altera_axi4_master_translator_m0_wvalid;         // uart_to_serializedtl_0_altera_axi4_master_translator:m0_wvalid -> uart_to_serializedtl_0_altera_axi4_master_agent:wvalid
	wire   [36:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_araddr;         // uart_to_serializedtl_0_altera_axi4_master_translator:m0_araddr -> uart_to_serializedtl_0_altera_axi4_master_agent:araddr
	wire    [2:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_arprot;         // uart_to_serializedtl_0_altera_axi4_master_translator:m0_arprot -> uart_to_serializedtl_0_altera_axi4_master_agent:arprot
	wire    [2:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_awprot;         // uart_to_serializedtl_0_altera_axi4_master_translator:m0_awprot -> uart_to_serializedtl_0_altera_axi4_master_agent:awprot
	wire   [63:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_wdata;          // uart_to_serializedtl_0_altera_axi4_master_translator:m0_wdata -> uart_to_serializedtl_0_altera_axi4_master_agent:wdata
	wire          uart_to_serializedtl_0_altera_axi4_master_translator_m0_arvalid;        // uart_to_serializedtl_0_altera_axi4_master_translator:m0_arvalid -> uart_to_serializedtl_0_altera_axi4_master_agent:arvalid
	wire    [3:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_awcache;        // uart_to_serializedtl_0_altera_axi4_master_translator:m0_awcache -> uart_to_serializedtl_0_altera_axi4_master_agent:awcache
	wire    [3:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_arid;           // uart_to_serializedtl_0_altera_axi4_master_translator:m0_arid -> uart_to_serializedtl_0_altera_axi4_master_agent:arid
	wire    [0:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_arlock;         // uart_to_serializedtl_0_altera_axi4_master_translator:m0_arlock -> uart_to_serializedtl_0_altera_axi4_master_agent:arlock
	wire    [0:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_awlock;         // uart_to_serializedtl_0_altera_axi4_master_translator:m0_awlock -> uart_to_serializedtl_0_altera_axi4_master_agent:awlock
	wire   [36:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_awaddr;         // uart_to_serializedtl_0_altera_axi4_master_translator:m0_awaddr -> uart_to_serializedtl_0_altera_axi4_master_agent:awaddr
	wire    [1:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_bresp;          // uart_to_serializedtl_0_altera_axi4_master_agent:bresp -> uart_to_serializedtl_0_altera_axi4_master_translator:m0_bresp
	wire          uart_to_serializedtl_0_altera_axi4_master_translator_m0_arready;        // uart_to_serializedtl_0_altera_axi4_master_agent:arready -> uart_to_serializedtl_0_altera_axi4_master_translator:m0_arready
	wire   [63:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_rdata;          // uart_to_serializedtl_0_altera_axi4_master_agent:rdata -> uart_to_serializedtl_0_altera_axi4_master_translator:m0_rdata
	wire          uart_to_serializedtl_0_altera_axi4_master_translator_m0_awready;        // uart_to_serializedtl_0_altera_axi4_master_agent:awready -> uart_to_serializedtl_0_altera_axi4_master_translator:m0_awready
	wire    [1:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_arburst;        // uart_to_serializedtl_0_altera_axi4_master_translator:m0_arburst -> uart_to_serializedtl_0_altera_axi4_master_agent:arburst
	wire    [2:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_arsize;         // uart_to_serializedtl_0_altera_axi4_master_translator:m0_arsize -> uart_to_serializedtl_0_altera_axi4_master_agent:arsize
	wire          uart_to_serializedtl_0_altera_axi4_master_translator_m0_bready;         // uart_to_serializedtl_0_altera_axi4_master_translator:m0_bready -> uart_to_serializedtl_0_altera_axi4_master_agent:bready
	wire          uart_to_serializedtl_0_altera_axi4_master_translator_m0_rlast;          // uart_to_serializedtl_0_altera_axi4_master_agent:rlast -> uart_to_serializedtl_0_altera_axi4_master_translator:m0_rlast
	wire          uart_to_serializedtl_0_altera_axi4_master_translator_m0_wlast;          // uart_to_serializedtl_0_altera_axi4_master_translator:m0_wlast -> uart_to_serializedtl_0_altera_axi4_master_agent:wlast
	wire    [3:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_awregion;       // uart_to_serializedtl_0_altera_axi4_master_translator:m0_awregion -> uart_to_serializedtl_0_altera_axi4_master_agent:awregion
	wire    [0:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_buser;          // uart_to_serializedtl_0_altera_axi4_master_agent:buser -> uart_to_serializedtl_0_altera_axi4_master_translator:m0_buser
	wire    [1:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_rresp;          // uart_to_serializedtl_0_altera_axi4_master_agent:rresp -> uart_to_serializedtl_0_altera_axi4_master_translator:m0_rresp
	wire    [3:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_awid;           // uart_to_serializedtl_0_altera_axi4_master_translator:m0_awid -> uart_to_serializedtl_0_altera_axi4_master_agent:awid
	wire    [3:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_bid;            // uart_to_serializedtl_0_altera_axi4_master_agent:bid -> uart_to_serializedtl_0_altera_axi4_master_translator:m0_bid
	wire          uart_to_serializedtl_0_altera_axi4_master_translator_m0_bvalid;         // uart_to_serializedtl_0_altera_axi4_master_agent:bvalid -> uart_to_serializedtl_0_altera_axi4_master_translator:m0_bvalid
	wire    [2:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_awsize;         // uart_to_serializedtl_0_altera_axi4_master_translator:m0_awsize -> uart_to_serializedtl_0_altera_axi4_master_agent:awsize
	wire          uart_to_serializedtl_0_altera_axi4_master_translator_m0_awvalid;        // uart_to_serializedtl_0_altera_axi4_master_translator:m0_awvalid -> uart_to_serializedtl_0_altera_axi4_master_agent:awvalid
	wire    [0:0] uart_to_serializedtl_0_altera_axi4_master_translator_m0_aruser;         // uart_to_serializedtl_0_altera_axi4_master_translator:m0_aruser -> uart_to_serializedtl_0_altera_axi4_master_agent:aruser
	wire          uart_to_serializedtl_0_altera_axi4_master_translator_m0_rvalid;         // uart_to_serializedtl_0_altera_axi4_master_agent:rvalid -> uart_to_serializedtl_0_altera_axi4_master_translator:m0_rvalid
	wire          rsp_mux_src_valid;                                                      // rsp_mux:src_valid -> uart_to_serializedtl_0_altera_axi4_master_agent:write_rp_valid
	wire  [176:0] rsp_mux_src_data;                                                       // rsp_mux:src_data -> uart_to_serializedtl_0_altera_axi4_master_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                      // uart_to_serializedtl_0_altera_axi4_master_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                    // rsp_mux:src_channel -> uart_to_serializedtl_0_altera_axi4_master_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                              // rsp_mux:src_startofpacket -> uart_to_serializedtl_0_altera_axi4_master_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                // rsp_mux:src_endofpacket -> uart_to_serializedtl_0_altera_axi4_master_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                  // rsp_mux_001:src_valid -> uart_to_serializedtl_0_altera_axi4_master_agent:read_rp_valid
	wire  [176:0] rsp_mux_001_src_data;                                                   // rsp_mux_001:src_data -> uart_to_serializedtl_0_altera_axi4_master_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                                  // uart_to_serializedtl_0_altera_axi4_master_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                                // rsp_mux_001:src_channel -> uart_to_serializedtl_0_altera_axi4_master_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                          // rsp_mux_001:src_startofpacket -> uart_to_serializedtl_0_altera_axi4_master_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                            // rsp_mux_001:src_endofpacket -> uart_to_serializedtl_0_altera_axi4_master_agent:read_rp_endofpacket
	wire  [511:0] emif_fm_0_ctrl_amm_0_agent_m0_readdata;                                 // emif_fm_0_ctrl_amm_0_translator:uav_readdata -> emif_fm_0_ctrl_amm_0_agent:m0_readdata
	wire          emif_fm_0_ctrl_amm_0_agent_m0_waitrequest;                              // emif_fm_0_ctrl_amm_0_translator:uav_waitrequest -> emif_fm_0_ctrl_amm_0_agent:m0_waitrequest
	wire          emif_fm_0_ctrl_amm_0_agent_m0_debugaccess;                              // emif_fm_0_ctrl_amm_0_agent:m0_debugaccess -> emif_fm_0_ctrl_amm_0_translator:uav_debugaccess
	wire   [36:0] emif_fm_0_ctrl_amm_0_agent_m0_address;                                  // emif_fm_0_ctrl_amm_0_agent:m0_address -> emif_fm_0_ctrl_amm_0_translator:uav_address
	wire   [63:0] emif_fm_0_ctrl_amm_0_agent_m0_byteenable;                               // emif_fm_0_ctrl_amm_0_agent:m0_byteenable -> emif_fm_0_ctrl_amm_0_translator:uav_byteenable
	wire          emif_fm_0_ctrl_amm_0_agent_m0_read;                                     // emif_fm_0_ctrl_amm_0_agent:m0_read -> emif_fm_0_ctrl_amm_0_translator:uav_read
	wire          emif_fm_0_ctrl_amm_0_agent_m0_readdatavalid;                            // emif_fm_0_ctrl_amm_0_translator:uav_readdatavalid -> emif_fm_0_ctrl_amm_0_agent:m0_readdatavalid
	wire          emif_fm_0_ctrl_amm_0_agent_m0_lock;                                     // emif_fm_0_ctrl_amm_0_agent:m0_lock -> emif_fm_0_ctrl_amm_0_translator:uav_lock
	wire  [511:0] emif_fm_0_ctrl_amm_0_agent_m0_writedata;                                // emif_fm_0_ctrl_amm_0_agent:m0_writedata -> emif_fm_0_ctrl_amm_0_translator:uav_writedata
	wire          emif_fm_0_ctrl_amm_0_agent_m0_write;                                    // emif_fm_0_ctrl_amm_0_agent:m0_write -> emif_fm_0_ctrl_amm_0_translator:uav_write
	wire   [12:0] emif_fm_0_ctrl_amm_0_agent_m0_burstcount;                               // emif_fm_0_ctrl_amm_0_agent:m0_burstcount -> emif_fm_0_ctrl_amm_0_translator:uav_burstcount
	wire          emif_fm_0_ctrl_amm_0_agent_rf_source_valid;                             // emif_fm_0_ctrl_amm_0_agent:rf_source_valid -> emif_fm_0_ctrl_amm_0_agent_rsp_fifo:in_valid
	wire  [681:0] emif_fm_0_ctrl_amm_0_agent_rf_source_data;                              // emif_fm_0_ctrl_amm_0_agent:rf_source_data -> emif_fm_0_ctrl_amm_0_agent_rsp_fifo:in_data
	wire          emif_fm_0_ctrl_amm_0_agent_rf_source_ready;                             // emif_fm_0_ctrl_amm_0_agent_rsp_fifo:in_ready -> emif_fm_0_ctrl_amm_0_agent:rf_source_ready
	wire          emif_fm_0_ctrl_amm_0_agent_rf_source_startofpacket;                     // emif_fm_0_ctrl_amm_0_agent:rf_source_startofpacket -> emif_fm_0_ctrl_amm_0_agent_rsp_fifo:in_startofpacket
	wire          emif_fm_0_ctrl_amm_0_agent_rf_source_endofpacket;                       // emif_fm_0_ctrl_amm_0_agent:rf_source_endofpacket -> emif_fm_0_ctrl_amm_0_agent_rsp_fifo:in_endofpacket
	wire          emif_fm_0_ctrl_amm_0_agent_rsp_fifo_out_valid;                          // emif_fm_0_ctrl_amm_0_agent_rsp_fifo:out_valid -> emif_fm_0_ctrl_amm_0_agent:rf_sink_valid
	wire  [681:0] emif_fm_0_ctrl_amm_0_agent_rsp_fifo_out_data;                           // emif_fm_0_ctrl_amm_0_agent_rsp_fifo:out_data -> emif_fm_0_ctrl_amm_0_agent:rf_sink_data
	wire          emif_fm_0_ctrl_amm_0_agent_rsp_fifo_out_ready;                          // emif_fm_0_ctrl_amm_0_agent:rf_sink_ready -> emif_fm_0_ctrl_amm_0_agent_rsp_fifo:out_ready
	wire          emif_fm_0_ctrl_amm_0_agent_rsp_fifo_out_startofpacket;                  // emif_fm_0_ctrl_amm_0_agent_rsp_fifo:out_startofpacket -> emif_fm_0_ctrl_amm_0_agent:rf_sink_startofpacket
	wire          emif_fm_0_ctrl_amm_0_agent_rsp_fifo_out_endofpacket;                    // emif_fm_0_ctrl_amm_0_agent_rsp_fifo:out_endofpacket -> emif_fm_0_ctrl_amm_0_agent:rf_sink_endofpacket
	wire          emif_fm_0_ctrl_amm_0_agent_rdata_fifo_src_valid;                        // emif_fm_0_ctrl_amm_0_agent:rdata_fifo_src_valid -> emif_fm_0_ctrl_amm_0_agent_rdata_fifo:in_valid
	wire  [513:0] emif_fm_0_ctrl_amm_0_agent_rdata_fifo_src_data;                         // emif_fm_0_ctrl_amm_0_agent:rdata_fifo_src_data -> emif_fm_0_ctrl_amm_0_agent_rdata_fifo:in_data
	wire          emif_fm_0_ctrl_amm_0_agent_rdata_fifo_src_ready;                        // emif_fm_0_ctrl_amm_0_agent_rdata_fifo:in_ready -> emif_fm_0_ctrl_amm_0_agent:rdata_fifo_src_ready
	wire          emif_fm_0_ctrl_amm_0_agent_rdata_fifo_out_valid;                        // emif_fm_0_ctrl_amm_0_agent_rdata_fifo:out_valid -> emif_fm_0_ctrl_amm_0_agent:rdata_fifo_sink_valid
	wire  [513:0] emif_fm_0_ctrl_amm_0_agent_rdata_fifo_out_data;                         // emif_fm_0_ctrl_amm_0_agent_rdata_fifo:out_data -> emif_fm_0_ctrl_amm_0_agent:rdata_fifo_sink_data
	wire          emif_fm_0_ctrl_amm_0_agent_rdata_fifo_out_ready;                        // emif_fm_0_ctrl_amm_0_agent:rdata_fifo_sink_ready -> emif_fm_0_ctrl_amm_0_agent_rdata_fifo:out_ready
	wire          uart_to_serializedtl_0_altera_axi4_master_agent_write_cp_valid;         // uart_to_serializedtl_0_altera_axi4_master_agent:write_cp_valid -> router:sink_valid
	wire  [176:0] uart_to_serializedtl_0_altera_axi4_master_agent_write_cp_data;          // uart_to_serializedtl_0_altera_axi4_master_agent:write_cp_data -> router:sink_data
	wire          uart_to_serializedtl_0_altera_axi4_master_agent_write_cp_ready;         // router:sink_ready -> uart_to_serializedtl_0_altera_axi4_master_agent:write_cp_ready
	wire          uart_to_serializedtl_0_altera_axi4_master_agent_write_cp_startofpacket; // uart_to_serializedtl_0_altera_axi4_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          uart_to_serializedtl_0_altera_axi4_master_agent_write_cp_endofpacket;   // uart_to_serializedtl_0_altera_axi4_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                       // router:src_valid -> cmd_demux:sink_valid
	wire  [176:0] router_src_data;                                                        // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                       // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                     // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                               // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                 // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          uart_to_serializedtl_0_altera_axi4_master_agent_read_cp_valid;          // uart_to_serializedtl_0_altera_axi4_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [176:0] uart_to_serializedtl_0_altera_axi4_master_agent_read_cp_data;           // uart_to_serializedtl_0_altera_axi4_master_agent:read_cp_data -> router_001:sink_data
	wire          uart_to_serializedtl_0_altera_axi4_master_agent_read_cp_ready;          // router_001:sink_ready -> uart_to_serializedtl_0_altera_axi4_master_agent:read_cp_ready
	wire          uart_to_serializedtl_0_altera_axi4_master_agent_read_cp_startofpacket;  // uart_to_serializedtl_0_altera_axi4_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          uart_to_serializedtl_0_altera_axi4_master_agent_read_cp_endofpacket;    // uart_to_serializedtl_0_altera_axi4_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                   // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [176:0] router_001_src_data;                                                    // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                   // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                 // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                           // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                             // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          emif_fm_0_ctrl_amm_0_agent_rp_valid;                                    // emif_fm_0_ctrl_amm_0_agent:rp_valid -> router_002:sink_valid
	wire  [680:0] emif_fm_0_ctrl_amm_0_agent_rp_data;                                     // emif_fm_0_ctrl_amm_0_agent:rp_data -> router_002:sink_data
	wire          emif_fm_0_ctrl_amm_0_agent_rp_ready;                                    // router_002:sink_ready -> emif_fm_0_ctrl_amm_0_agent:rp_ready
	wire          emif_fm_0_ctrl_amm_0_agent_rp_startofpacket;                            // emif_fm_0_ctrl_amm_0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          emif_fm_0_ctrl_amm_0_agent_rp_endofpacket;                              // emif_fm_0_ctrl_amm_0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          emif_fm_0_ctrl_amm_0_burst_adapter_source0_valid;                       // emif_fm_0_ctrl_amm_0_burst_adapter:source0_valid -> emif_fm_0_ctrl_amm_0_agent:cp_valid
	wire  [680:0] emif_fm_0_ctrl_amm_0_burst_adapter_source0_data;                        // emif_fm_0_ctrl_amm_0_burst_adapter:source0_data -> emif_fm_0_ctrl_amm_0_agent:cp_data
	wire          emif_fm_0_ctrl_amm_0_burst_adapter_source0_ready;                       // emif_fm_0_ctrl_amm_0_agent:cp_ready -> emif_fm_0_ctrl_amm_0_burst_adapter:source0_ready
	wire    [1:0] emif_fm_0_ctrl_amm_0_burst_adapter_source0_channel;                     // emif_fm_0_ctrl_amm_0_burst_adapter:source0_channel -> emif_fm_0_ctrl_amm_0_agent:cp_channel
	wire          emif_fm_0_ctrl_amm_0_burst_adapter_source0_startofpacket;               // emif_fm_0_ctrl_amm_0_burst_adapter:source0_startofpacket -> emif_fm_0_ctrl_amm_0_agent:cp_startofpacket
	wire          emif_fm_0_ctrl_amm_0_burst_adapter_source0_endofpacket;                 // emif_fm_0_ctrl_amm_0_burst_adapter:source0_endofpacket -> emif_fm_0_ctrl_amm_0_agent:cp_endofpacket
	wire          router_002_src_valid;                                                   // router_002:src_valid -> emif_fm_0_ctrl_amm_0_rsp_width_adapter:in_valid
	wire  [680:0] router_002_src_data;                                                    // router_002:src_data -> emif_fm_0_ctrl_amm_0_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                   // emif_fm_0_ctrl_amm_0_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                 // router_002:src_channel -> emif_fm_0_ctrl_amm_0_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                           // router_002:src_startofpacket -> emif_fm_0_ctrl_amm_0_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                             // router_002:src_endofpacket -> emif_fm_0_ctrl_amm_0_rsp_width_adapter:in_endofpacket
	wire          emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_valid;                       // emif_fm_0_ctrl_amm_0_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [176:0] emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_data;                        // emif_fm_0_ctrl_amm_0_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_ready;                       // rsp_demux:sink_ready -> emif_fm_0_ctrl_amm_0_rsp_width_adapter:out_ready
	wire    [1:0] emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_channel;                     // emif_fm_0_ctrl_amm_0_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_startofpacket;               // emif_fm_0_ctrl_amm_0_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_endofpacket;                 // emif_fm_0_ctrl_amm_0_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                      // cmd_mux:src_valid -> emif_fm_0_ctrl_amm_0_cmd_width_adapter:in_valid
	wire  [176:0] cmd_mux_src_data;                                                       // cmd_mux:src_data -> emif_fm_0_ctrl_amm_0_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                      // emif_fm_0_ctrl_amm_0_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                    // cmd_mux:src_channel -> emif_fm_0_ctrl_amm_0_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                              // cmd_mux:src_startofpacket -> emif_fm_0_ctrl_amm_0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                // cmd_mux:src_endofpacket -> emif_fm_0_ctrl_amm_0_cmd_width_adapter:in_endofpacket
	wire          emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_valid;                       // emif_fm_0_ctrl_amm_0_cmd_width_adapter:out_valid -> emif_fm_0_ctrl_amm_0_burst_adapter:sink0_valid
	wire  [680:0] emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_data;                        // emif_fm_0_ctrl_amm_0_cmd_width_adapter:out_data -> emif_fm_0_ctrl_amm_0_burst_adapter:sink0_data
	wire          emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_ready;                       // emif_fm_0_ctrl_amm_0_burst_adapter:sink0_ready -> emif_fm_0_ctrl_amm_0_cmd_width_adapter:out_ready
	wire    [1:0] emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_channel;                     // emif_fm_0_ctrl_amm_0_cmd_width_adapter:out_channel -> emif_fm_0_ctrl_amm_0_burst_adapter:sink0_channel
	wire          emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_startofpacket;               // emif_fm_0_ctrl_amm_0_cmd_width_adapter:out_startofpacket -> emif_fm_0_ctrl_amm_0_burst_adapter:sink0_startofpacket
	wire          emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_endofpacket;                 // emif_fm_0_ctrl_amm_0_cmd_width_adapter:out_endofpacket -> emif_fm_0_ctrl_amm_0_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                   // cmd_demux:src0_valid -> crosser:in_valid
	wire  [176:0] cmd_demux_src0_data;                                                    // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                   // crosser:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                 // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                           // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                             // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                      // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [176:0] crosser_out_data;                                                       // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                      // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [1:0] crosser_out_channel;                                                    // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                              // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                               // cmd_demux_001:src0_valid -> crosser_001:in_valid
	wire  [176:0] cmd_demux_001_src0_data;                                                // cmd_demux_001:src0_data -> crosser_001:in_data
	wire          cmd_demux_001_src0_ready;                                               // crosser_001:in_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                             // cmd_demux_001:src0_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                       // cmd_demux_001:src0_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                         // cmd_demux_001:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                  // crosser_001:out_valid -> cmd_mux:sink1_valid
	wire  [176:0] crosser_001_out_data;                                                   // crosser_001:out_data -> cmd_mux:sink1_data
	wire          crosser_001_out_ready;                                                  // cmd_mux:sink1_ready -> crosser_001:out_ready
	wire    [1:0] crosser_001_out_channel;                                                // crosser_001:out_channel -> cmd_mux:sink1_channel
	wire          crosser_001_out_startofpacket;                                          // crosser_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                            // crosser_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                   // rsp_demux:src0_valid -> crosser_002:in_valid
	wire  [176:0] rsp_demux_src0_data;                                                    // rsp_demux:src0_data -> crosser_002:in_data
	wire          rsp_demux_src0_ready;                                                   // crosser_002:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                 // rsp_demux:src0_channel -> crosser_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                           // rsp_demux:src0_startofpacket -> crosser_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                             // rsp_demux:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                  // crosser_002:out_valid -> rsp_mux:sink0_valid
	wire  [176:0] crosser_002_out_data;                                                   // crosser_002:out_data -> rsp_mux:sink0_data
	wire          crosser_002_out_ready;                                                  // rsp_mux:sink0_ready -> crosser_002:out_ready
	wire    [1:0] crosser_002_out_channel;                                                // crosser_002:out_channel -> rsp_mux:sink0_channel
	wire          crosser_002_out_startofpacket;                                          // crosser_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                            // crosser_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                   // rsp_demux:src1_valid -> crosser_003:in_valid
	wire  [176:0] rsp_demux_src1_data;                                                    // rsp_demux:src1_data -> crosser_003:in_data
	wire          rsp_demux_src1_ready;                                                   // crosser_003:in_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                                 // rsp_demux:src1_channel -> crosser_003:in_channel
	wire          rsp_demux_src1_startofpacket;                                           // rsp_demux:src1_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                             // rsp_demux:src1_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                  // crosser_003:out_valid -> rsp_mux_001:sink0_valid
	wire  [176:0] crosser_003_out_data;                                                   // crosser_003:out_data -> rsp_mux_001:sink0_data
	wire          crosser_003_out_ready;                                                  // rsp_mux_001:sink0_ready -> crosser_003:out_ready
	wire    [1:0] crosser_003_out_channel;                                                // crosser_003:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_003_out_startofpacket;                                          // crosser_003:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                            // crosser_003:out_endofpacket -> rsp_mux_001:sink0_endofpacket

	platform_altera_merlin_axi_translator_1921_uetfduq #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (1),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (1),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (4),
		.DATA_WIDTH                        (64),
		.S0_ID_WIDTH                       (4),
		.M0_ADDR_WIDTH                     (37),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (37),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0)
	) uart_to_serializedtl_0_altera_axi4_master_translator (
		.aclk        (clock_in_out_clk_clk),                                                                        //   input,   width = 1,       clk.clk
		.aresetn     (~uart_to_serializedtl_0_altera_axi4_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset_n
		.m0_awid     (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awid),                                //  output,   width = 4,        m0.awid
		.m0_awaddr   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awaddr),                              //  output,  width = 37,          .awaddr
		.m0_awlen    (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awlen),                               //  output,   width = 8,          .awlen
		.m0_awsize   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awsize),                              //  output,   width = 3,          .awsize
		.m0_awburst  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awburst),                             //  output,   width = 2,          .awburst
		.m0_awlock   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awlock),                              //  output,   width = 1,          .awlock
		.m0_awcache  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awcache),                             //  output,   width = 4,          .awcache
		.m0_awprot   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awprot),                              //  output,   width = 3,          .awprot
		.m0_awuser   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awuser),                              //  output,   width = 1,          .awuser
		.m0_awqos    (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awqos),                               //  output,   width = 4,          .awqos
		.m0_awregion (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awregion),                            //  output,   width = 4,          .awregion
		.m0_awvalid  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awvalid),                             //  output,   width = 1,          .awvalid
		.m0_awready  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awready),                             //   input,   width = 1,          .awready
		.m0_wdata    (uart_to_serializedtl_0_altera_axi4_master_translator_m0_wdata),                               //  output,  width = 64,          .wdata
		.m0_wstrb    (uart_to_serializedtl_0_altera_axi4_master_translator_m0_wstrb),                               //  output,   width = 8,          .wstrb
		.m0_wlast    (uart_to_serializedtl_0_altera_axi4_master_translator_m0_wlast),                               //  output,   width = 1,          .wlast
		.m0_wvalid   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_wvalid),                              //  output,   width = 1,          .wvalid
		.m0_wuser    (uart_to_serializedtl_0_altera_axi4_master_translator_m0_wuser),                               //  output,   width = 1,          .wuser
		.m0_wready   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_wready),                              //   input,   width = 1,          .wready
		.m0_bid      (uart_to_serializedtl_0_altera_axi4_master_translator_m0_bid),                                 //   input,   width = 4,          .bid
		.m0_bresp    (uart_to_serializedtl_0_altera_axi4_master_translator_m0_bresp),                               //   input,   width = 2,          .bresp
		.m0_buser    (uart_to_serializedtl_0_altera_axi4_master_translator_m0_buser),                               //   input,   width = 1,          .buser
		.m0_bvalid   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_bvalid),                              //   input,   width = 1,          .bvalid
		.m0_bready   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_bready),                              //  output,   width = 1,          .bready
		.m0_arid     (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arid),                                //  output,   width = 4,          .arid
		.m0_araddr   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_araddr),                              //  output,  width = 37,          .araddr
		.m0_arlen    (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arlen),                               //  output,   width = 8,          .arlen
		.m0_arsize   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arsize),                              //  output,   width = 3,          .arsize
		.m0_arburst  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arburst),                             //  output,   width = 2,          .arburst
		.m0_arlock   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arlock),                              //  output,   width = 1,          .arlock
		.m0_arcache  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arcache),                             //  output,   width = 4,          .arcache
		.m0_arprot   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arprot),                              //  output,   width = 3,          .arprot
		.m0_aruser   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_aruser),                              //  output,   width = 1,          .aruser
		.m0_arqos    (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arqos),                               //  output,   width = 4,          .arqos
		.m0_arregion (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arregion),                            //  output,   width = 4,          .arregion
		.m0_arvalid  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arvalid),                             //  output,   width = 1,          .arvalid
		.m0_arready  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arready),                             //   input,   width = 1,          .arready
		.m0_rid      (uart_to_serializedtl_0_altera_axi4_master_translator_m0_rid),                                 //   input,   width = 4,          .rid
		.m0_rdata    (uart_to_serializedtl_0_altera_axi4_master_translator_m0_rdata),                               //   input,  width = 64,          .rdata
		.m0_rresp    (uart_to_serializedtl_0_altera_axi4_master_translator_m0_rresp),                               //   input,   width = 2,          .rresp
		.m0_rlast    (uart_to_serializedtl_0_altera_axi4_master_translator_m0_rlast),                               //   input,   width = 1,          .rlast
		.m0_rvalid   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_rvalid),                              //   input,   width = 1,          .rvalid
		.m0_rready   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_rready),                              //  output,   width = 1,          .rready
		.m0_ruser    (uart_to_serializedtl_0_altera_axi4_master_translator_m0_ruser),                               //   input,   width = 1,          .ruser
		.s0_awid     (uart_to_serializedtl_0_altera_axi4_master_awid),                                              //   input,   width = 4,        s0.awid
		.s0_awaddr   (uart_to_serializedtl_0_altera_axi4_master_awaddr),                                            //   input,  width = 37,          .awaddr
		.s0_awlen    (uart_to_serializedtl_0_altera_axi4_master_awlen),                                             //   input,   width = 8,          .awlen
		.s0_awsize   (uart_to_serializedtl_0_altera_axi4_master_awsize),                                            //   input,   width = 3,          .awsize
		.s0_awburst  (uart_to_serializedtl_0_altera_axi4_master_awburst),                                           //   input,   width = 2,          .awburst
		.s0_awlock   (uart_to_serializedtl_0_altera_axi4_master_awlock),                                            //   input,   width = 1,          .awlock
		.s0_awcache  (uart_to_serializedtl_0_altera_axi4_master_awcache),                                           //   input,   width = 4,          .awcache
		.s0_awprot   (uart_to_serializedtl_0_altera_axi4_master_awprot),                                            //   input,   width = 3,          .awprot
		.s0_awqos    (uart_to_serializedtl_0_altera_axi4_master_awqos),                                             //   input,   width = 4,          .awqos
		.s0_awvalid  (uart_to_serializedtl_0_altera_axi4_master_awvalid),                                           //   input,   width = 1,          .awvalid
		.s0_awready  (uart_to_serializedtl_0_altera_axi4_master_awready),                                           //  output,   width = 1,          .awready
		.s0_wdata    (uart_to_serializedtl_0_altera_axi4_master_wdata),                                             //   input,  width = 64,          .wdata
		.s0_wstrb    (uart_to_serializedtl_0_altera_axi4_master_wstrb),                                             //   input,   width = 8,          .wstrb
		.s0_wlast    (uart_to_serializedtl_0_altera_axi4_master_wlast),                                             //   input,   width = 1,          .wlast
		.s0_wvalid   (uart_to_serializedtl_0_altera_axi4_master_wvalid),                                            //   input,   width = 1,          .wvalid
		.s0_wready   (uart_to_serializedtl_0_altera_axi4_master_wready),                                            //  output,   width = 1,          .wready
		.s0_bid      (uart_to_serializedtl_0_altera_axi4_master_bid),                                               //  output,   width = 4,          .bid
		.s0_bresp    (uart_to_serializedtl_0_altera_axi4_master_bresp),                                             //  output,   width = 2,          .bresp
		.s0_bvalid   (uart_to_serializedtl_0_altera_axi4_master_bvalid),                                            //  output,   width = 1,          .bvalid
		.s0_bready   (uart_to_serializedtl_0_altera_axi4_master_bready),                                            //   input,   width = 1,          .bready
		.s0_arid     (uart_to_serializedtl_0_altera_axi4_master_arid),                                              //   input,   width = 4,          .arid
		.s0_araddr   (uart_to_serializedtl_0_altera_axi4_master_araddr),                                            //   input,  width = 37,          .araddr
		.s0_arlen    (uart_to_serializedtl_0_altera_axi4_master_arlen),                                             //   input,   width = 8,          .arlen
		.s0_arsize   (uart_to_serializedtl_0_altera_axi4_master_arsize),                                            //   input,   width = 3,          .arsize
		.s0_arburst  (uart_to_serializedtl_0_altera_axi4_master_arburst),                                           //   input,   width = 2,          .arburst
		.s0_arlock   (uart_to_serializedtl_0_altera_axi4_master_arlock),                                            //   input,   width = 1,          .arlock
		.s0_arcache  (uart_to_serializedtl_0_altera_axi4_master_arcache),                                           //   input,   width = 4,          .arcache
		.s0_arprot   (uart_to_serializedtl_0_altera_axi4_master_arprot),                                            //   input,   width = 3,          .arprot
		.s0_arqos    (uart_to_serializedtl_0_altera_axi4_master_arqos),                                             //   input,   width = 4,          .arqos
		.s0_arvalid  (uart_to_serializedtl_0_altera_axi4_master_arvalid),                                           //   input,   width = 1,          .arvalid
		.s0_arready  (uart_to_serializedtl_0_altera_axi4_master_arready),                                           //  output,   width = 1,          .arready
		.s0_rid      (uart_to_serializedtl_0_altera_axi4_master_rid),                                               //  output,   width = 4,          .rid
		.s0_rdata    (uart_to_serializedtl_0_altera_axi4_master_rdata),                                             //  output,  width = 64,          .rdata
		.s0_rresp    (uart_to_serializedtl_0_altera_axi4_master_rresp),                                             //  output,   width = 2,          .rresp
		.s0_rlast    (uart_to_serializedtl_0_altera_axi4_master_rlast),                                             //  output,   width = 1,          .rlast
		.s0_rvalid   (uart_to_serializedtl_0_altera_axi4_master_rvalid),                                            //  output,   width = 1,          .rvalid
		.s0_rready   (uart_to_serializedtl_0_altera_axi4_master_rready),                                            //   input,   width = 1,          .rready
		.s0_awuser   (1'b0),                                                                                        // (terminated),                        
		.s0_awregion (4'b0000),                                                                                     // (terminated),                        
		.s0_wuser    (1'b0),                                                                                        // (terminated),                        
		.s0_buser    (),                                                                                            // (terminated),                        
		.s0_aruser   (1'b0),                                                                                        // (terminated),                        
		.s0_arregion (4'b0000),                                                                                     // (terminated),                        
		.s0_ruser    (),                                                                                            // (terminated),                        
		.s0_wid      (4'b0000),                                                                                     // (terminated),                        
		.s0_ardomain (2'b00),                                                                                       // (terminated),                        
		.s0_arsnoop  (4'b0000),                                                                                     // (terminated),                        
		.s0_arbar    (2'b00),                                                                                       // (terminated),                        
		.s0_awdomain (2'b00),                                                                                       // (terminated),                        
		.s0_awsnoop  (3'b000),                                                                                      // (terminated),                        
		.s0_awbar    (2'b00),                                                                                       // (terminated),                        
		.s0_awunique (1'b0),                                                                                        // (terminated),                        
		.m0_wid      (),                                                                                            // (terminated),                        
		.m0_ardomain (),                                                                                            // (terminated),                        
		.m0_arsnoop  (),                                                                                            // (terminated),                        
		.m0_arbar    (),                                                                                            // (terminated),                        
		.m0_awdomain (),                                                                                            // (terminated),                        
		.m0_awsnoop  (),                                                                                            // (terminated),                        
		.m0_awbar    (),                                                                                            // (terminated),                        
		.m0_awunique ()                                                                                             // (terminated),                        
	);

	platform_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (28),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (37),
		.UAV_BURSTCOUNT_W               (13),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) emif_fm_0_ctrl_amm_0_translator (
		.clk                    (emif_fm_0_emif_usr_clk_clk),                                        //   input,    width = 1,                      clk.clk
		.reset                  (emif_fm_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (emif_fm_0_ctrl_amm_0_agent_m0_address),                             //   input,   width = 37, avalon_universal_slave_0.address
		.uav_burstcount         (emif_fm_0_ctrl_amm_0_agent_m0_burstcount),                          //   input,   width = 13,                         .burstcount
		.uav_read               (emif_fm_0_ctrl_amm_0_agent_m0_read),                                //   input,    width = 1,                         .read
		.uav_write              (emif_fm_0_ctrl_amm_0_agent_m0_write),                               //   input,    width = 1,                         .write
		.uav_waitrequest        (emif_fm_0_ctrl_amm_0_agent_m0_waitrequest),                         //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (emif_fm_0_ctrl_amm_0_agent_m0_readdatavalid),                       //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (emif_fm_0_ctrl_amm_0_agent_m0_byteenable),                          //   input,   width = 64,                         .byteenable
		.uav_readdata           (emif_fm_0_ctrl_amm_0_agent_m0_readdata),                            //  output,  width = 512,                         .readdata
		.uav_writedata          (emif_fm_0_ctrl_amm_0_agent_m0_writedata),                           //   input,  width = 512,                         .writedata
		.uav_lock               (emif_fm_0_ctrl_amm_0_agent_m0_lock),                                //   input,    width = 1,                         .lock
		.uav_debugaccess        (emif_fm_0_ctrl_amm_0_agent_m0_debugaccess),                         //   input,    width = 1,                         .debugaccess
		.av_address             (emif_fm_0_ctrl_amm_0_address),                                      //  output,   width = 28,      avalon_anti_slave_0.address
		.av_write               (emif_fm_0_ctrl_amm_0_write),                                        //  output,    width = 1,                         .write
		.av_read                (emif_fm_0_ctrl_amm_0_read),                                         //  output,    width = 1,                         .read
		.av_readdata            (emif_fm_0_ctrl_amm_0_readdata),                                     //   input,  width = 512,                         .readdata
		.av_writedata           (emif_fm_0_ctrl_amm_0_writedata),                                    //  output,  width = 512,                         .writedata
		.av_burstcount          (emif_fm_0_ctrl_amm_0_burstcount),                                   //  output,    width = 7,                         .burstcount
		.av_byteenable          (emif_fm_0_ctrl_amm_0_byteenable),                                   //  output,   width = 64,                         .byteenable
		.av_readdatavalid       (emif_fm_0_ctrl_amm_0_readdatavalid),                                //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (emif_fm_0_ctrl_amm_0_waitrequest),                                  //   input,    width = 1,                         .waitrequest
		.av_begintransfer       (),                                                                  // (terminated),                                        
		.av_beginbursttransfer  (),                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                  // (terminated),                                        
		.av_lock                (),                                                                  // (terminated),                                        
		.av_chipselect          (),                                                                  // (terminated),                                        
		.av_clken               (),                                                                  // (terminated),                                        
		.uav_clken              (1'b0),                                                              // (terminated),                                        
		.av_debugaccess         (),                                                                  // (terminated),                                        
		.av_outputenable        (),                                                                  // (terminated),                                        
		.uav_response           (),                                                                  // (terminated),                                        
		.av_response            (2'b00),                                                             // (terminated),                                        
		.uav_writeresponsevalid (),                                                                  // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                               // (terminated),                                        
	);

	platform_altera_merlin_axi_master_ni_1941_dfsyzvi #(
		.ID_WIDTH                  (4),
		.ADDR_WIDTH                (37),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.ACE_LITE_SUPPORT          (0),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (145),
		.PKT_CACHE_H               (162),
		.PKT_CACHE_L               (159),
		.PKT_ADDR_SIDEBAND_H       (143),
		.PKT_ADDR_SIDEBAND_L       (143),
		.PKT_PROTECTION_H          (158),
		.PKT_PROTECTION_L          (156),
		.PKT_BURST_SIZE_H          (140),
		.PKT_BURST_SIZE_L          (138),
		.PKT_BURST_TYPE_H          (142),
		.PKT_BURST_TYPE_L          (141),
		.PKT_RESPONSE_STATUS_L     (163),
		.PKT_RESPONSE_STATUS_H     (164),
		.PKT_BURSTWRAP_H           (137),
		.PKT_BURSTWRAP_L           (130),
		.PKT_BYTE_CNT_H            (129),
		.PKT_BYTE_CNT_L            (115),
		.PKT_ADDR_H                (108),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (114),
		.PKT_TRANS_LOCK            (113),
		.PKT_TRANS_COMPRESSED_READ (109),
		.PKT_TRANS_POSTED          (110),
		.PKT_TRANS_WRITE           (111),
		.PKT_TRANS_READ            (112),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (150),
		.PKT_SRC_ID_L              (150),
		.PKT_DEST_ID_H             (151),
		.PKT_DEST_ID_L             (151),
		.PKT_THREAD_ID_H           (155),
		.PKT_THREAD_ID_L           (152),
		.PKT_QOS_L                 (146),
		.PKT_QOS_H                 (149),
		.PKT_ORI_BURST_SIZE_L      (165),
		.PKT_ORI_BURST_SIZE_H      (167),
		.PKT_DATA_SIDEBAND_H       (144),
		.PKT_DATA_SIDEBAND_L       (144),
		.PKT_DOMAIN_H              (175),
		.PKT_DOMAIN_L              (174),
		.PKT_SNOOP_H               (173),
		.PKT_SNOOP_L               (170),
		.PKT_BARRIER_H             (169),
		.PKT_BARRIER_L             (168),
		.PKT_WUNIQUE               (176),
		.ST_DATA_W                 (177),
		.ST_CHANNEL_W              (2),
		.ID                        (0),
		.SYNC_RESET                (1)
	) uart_to_serializedtl_0_altera_axi4_master_agent (
		.aclk                   (clock_in_out_clk_clk),                                                                        //   input,    width = 1,              clk.clk
		.aresetn                (~uart_to_serializedtl_0_altera_axi4_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (uart_to_serializedtl_0_altera_axi4_master_agent_write_cp_valid),                              //  output,    width = 1,         write_cp.valid
		.write_cp_data          (uart_to_serializedtl_0_altera_axi4_master_agent_write_cp_data),                               //  output,  width = 177,                 .data
		.write_cp_startofpacket (uart_to_serializedtl_0_altera_axi4_master_agent_write_cp_startofpacket),                      //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (uart_to_serializedtl_0_altera_axi4_master_agent_write_cp_endofpacket),                        //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (uart_to_serializedtl_0_altera_axi4_master_agent_write_cp_ready),                              //   input,    width = 1,                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                                                           //   input,    width = 1,         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                                                            //   input,  width = 177,                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                                                         //   input,    width = 2,                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                                                   //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                                                     //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                                                           //  output,    width = 1,                 .ready
		.read_cp_valid          (uart_to_serializedtl_0_altera_axi4_master_agent_read_cp_valid),                               //  output,    width = 1,          read_cp.valid
		.read_cp_data           (uart_to_serializedtl_0_altera_axi4_master_agent_read_cp_data),                                //  output,  width = 177,                 .data
		.read_cp_startofpacket  (uart_to_serializedtl_0_altera_axi4_master_agent_read_cp_startofpacket),                       //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (uart_to_serializedtl_0_altera_axi4_master_agent_read_cp_endofpacket),                         //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (uart_to_serializedtl_0_altera_axi4_master_agent_read_cp_ready),                               //   input,    width = 1,                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                                                       //   input,    width = 1,          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                                                        //   input,  width = 177,                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                                                     //   input,    width = 2,                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                                               //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                                                 //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                                                       //  output,    width = 1,                 .ready
		.awid                   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awid),                                //   input,    width = 4, altera_axi_slave.awid
		.awaddr                 (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awaddr),                              //   input,   width = 37,                 .awaddr
		.awlen                  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awlen),                               //   input,    width = 8,                 .awlen
		.awsize                 (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awsize),                              //   input,    width = 3,                 .awsize
		.awburst                (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awburst),                             //   input,    width = 2,                 .awburst
		.awlock                 (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awlock),                              //   input,    width = 1,                 .awlock
		.awcache                (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awcache),                             //   input,    width = 4,                 .awcache
		.awprot                 (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awprot),                              //   input,    width = 3,                 .awprot
		.awuser                 (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awuser),                              //   input,    width = 1,                 .awuser
		.awqos                  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awqos),                               //   input,    width = 4,                 .awqos
		.awregion               (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awregion),                            //   input,    width = 4,                 .awregion
		.awvalid                (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awvalid),                             //   input,    width = 1,                 .awvalid
		.awready                (uart_to_serializedtl_0_altera_axi4_master_translator_m0_awready),                             //  output,    width = 1,                 .awready
		.wdata                  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_wdata),                               //   input,   width = 64,                 .wdata
		.wstrb                  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_wstrb),                               //   input,    width = 8,                 .wstrb
		.wlast                  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_wlast),                               //   input,    width = 1,                 .wlast
		.wvalid                 (uart_to_serializedtl_0_altera_axi4_master_translator_m0_wvalid),                              //   input,    width = 1,                 .wvalid
		.wuser                  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_wuser),                               //   input,    width = 1,                 .wuser
		.wready                 (uart_to_serializedtl_0_altera_axi4_master_translator_m0_wready),                              //  output,    width = 1,                 .wready
		.bid                    (uart_to_serializedtl_0_altera_axi4_master_translator_m0_bid),                                 //  output,    width = 4,                 .bid
		.bresp                  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_bresp),                               //  output,    width = 2,                 .bresp
		.buser                  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_buser),                               //  output,    width = 1,                 .buser
		.bvalid                 (uart_to_serializedtl_0_altera_axi4_master_translator_m0_bvalid),                              //  output,    width = 1,                 .bvalid
		.bready                 (uart_to_serializedtl_0_altera_axi4_master_translator_m0_bready),                              //   input,    width = 1,                 .bready
		.arid                   (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arid),                                //   input,    width = 4,                 .arid
		.araddr                 (uart_to_serializedtl_0_altera_axi4_master_translator_m0_araddr),                              //   input,   width = 37,                 .araddr
		.arlen                  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arlen),                               //   input,    width = 8,                 .arlen
		.arsize                 (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arsize),                              //   input,    width = 3,                 .arsize
		.arburst                (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arburst),                             //   input,    width = 2,                 .arburst
		.arlock                 (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arlock),                              //   input,    width = 1,                 .arlock
		.arcache                (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arcache),                             //   input,    width = 4,                 .arcache
		.arprot                 (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arprot),                              //   input,    width = 3,                 .arprot
		.aruser                 (uart_to_serializedtl_0_altera_axi4_master_translator_m0_aruser),                              //   input,    width = 1,                 .aruser
		.arqos                  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arqos),                               //   input,    width = 4,                 .arqos
		.arregion               (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arregion),                            //   input,    width = 4,                 .arregion
		.arvalid                (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arvalid),                             //   input,    width = 1,                 .arvalid
		.arready                (uart_to_serializedtl_0_altera_axi4_master_translator_m0_arready),                             //  output,    width = 1,                 .arready
		.rid                    (uart_to_serializedtl_0_altera_axi4_master_translator_m0_rid),                                 //  output,    width = 4,                 .rid
		.rdata                  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_rdata),                               //  output,   width = 64,                 .rdata
		.rresp                  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_rresp),                               //  output,    width = 2,                 .rresp
		.rlast                  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_rlast),                               //  output,    width = 1,                 .rlast
		.rvalid                 (uart_to_serializedtl_0_altera_axi4_master_translator_m0_rvalid),                              //  output,    width = 1,                 .rvalid
		.rready                 (uart_to_serializedtl_0_altera_axi4_master_translator_m0_rready),                              //   input,    width = 1,                 .rready
		.ruser                  (uart_to_serializedtl_0_altera_axi4_master_translator_m0_ruser),                               //  output,    width = 1,                 .ruser
		.wid                    (4'b0000),                                                                                     // (terminated),                                
		.arsnoop                (4'b0000),                                                                                     // (terminated),                                
		.ardomain               (2'b00),                                                                                       // (terminated),                                
		.arbar                  (2'b00),                                                                                       // (terminated),                                
		.awsnoop                (3'b000),                                                                                      // (terminated),                                
		.awdomain               (2'b00),                                                                                       // (terminated),                                
		.awbar                  (2'b00),                                                                                       // (terminated),                                
		.awunique               (1'b0)                                                                                         // (terminated),                                
	);

	platform_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (671),
		.PKT_ORI_BURST_SIZE_L      (669),
		.PKT_RESPONSE_STATUS_H     (668),
		.PKT_RESPONSE_STATUS_L     (667),
		.PKT_BURST_SIZE_H          (644),
		.PKT_BURST_SIZE_L          (642),
		.PKT_TRANS_LOCK            (617),
		.PKT_BEGIN_BURST           (649),
		.PKT_PROTECTION_H          (662),
		.PKT_PROTECTION_L          (660),
		.PKT_BURSTWRAP_H           (641),
		.PKT_BURSTWRAP_L           (634),
		.PKT_BYTE_CNT_H            (633),
		.PKT_BYTE_CNT_L            (619),
		.PKT_ADDR_H                (612),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (613),
		.PKT_TRANS_POSTED          (614),
		.PKT_TRANS_WRITE           (615),
		.PKT_TRANS_READ            (616),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (654),
		.PKT_SRC_ID_L              (654),
		.PKT_DEST_ID_H             (655),
		.PKT_DEST_ID_L             (655),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (681),
		.AVS_BURSTCOUNT_W          (13),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) emif_fm_0_ctrl_amm_0_agent (
		.clk                     (emif_fm_0_emif_usr_clk_clk),                                        //   input,    width = 1,             clk.clk
		.reset                   (emif_fm_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (emif_fm_0_ctrl_amm_0_agent_m0_address),                             //  output,   width = 37,              m0.address
		.m0_burstcount           (emif_fm_0_ctrl_amm_0_agent_m0_burstcount),                          //  output,   width = 13,                .burstcount
		.m0_byteenable           (emif_fm_0_ctrl_amm_0_agent_m0_byteenable),                          //  output,   width = 64,                .byteenable
		.m0_debugaccess          (emif_fm_0_ctrl_amm_0_agent_m0_debugaccess),                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (emif_fm_0_ctrl_amm_0_agent_m0_lock),                                //  output,    width = 1,                .lock
		.m0_readdata             (emif_fm_0_ctrl_amm_0_agent_m0_readdata),                            //   input,  width = 512,                .readdata
		.m0_readdatavalid        (emif_fm_0_ctrl_amm_0_agent_m0_readdatavalid),                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (emif_fm_0_ctrl_amm_0_agent_m0_read),                                //  output,    width = 1,                .read
		.m0_waitrequest          (emif_fm_0_ctrl_amm_0_agent_m0_waitrequest),                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (emif_fm_0_ctrl_amm_0_agent_m0_writedata),                           //  output,  width = 512,                .writedata
		.m0_write                (emif_fm_0_ctrl_amm_0_agent_m0_write),                               //  output,    width = 1,                .write
		.rp_endofpacket          (emif_fm_0_ctrl_amm_0_agent_rp_endofpacket),                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (emif_fm_0_ctrl_amm_0_agent_rp_ready),                               //   input,    width = 1,                .ready
		.rp_valid                (emif_fm_0_ctrl_amm_0_agent_rp_valid),                               //  output,    width = 1,                .valid
		.rp_data                 (emif_fm_0_ctrl_amm_0_agent_rp_data),                                //  output,  width = 681,                .data
		.rp_startofpacket        (emif_fm_0_ctrl_amm_0_agent_rp_startofpacket),                       //  output,    width = 1,                .startofpacket
		.cp_ready                (emif_fm_0_ctrl_amm_0_burst_adapter_source0_ready),                  //  output,    width = 1,              cp.ready
		.cp_valid                (emif_fm_0_ctrl_amm_0_burst_adapter_source0_valid),                  //   input,    width = 1,                .valid
		.cp_data                 (emif_fm_0_ctrl_amm_0_burst_adapter_source0_data),                   //   input,  width = 681,                .data
		.cp_startofpacket        (emif_fm_0_ctrl_amm_0_burst_adapter_source0_startofpacket),          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (emif_fm_0_ctrl_amm_0_burst_adapter_source0_endofpacket),            //   input,    width = 1,                .endofpacket
		.cp_channel              (emif_fm_0_ctrl_amm_0_burst_adapter_source0_channel),                //   input,    width = 2,                .channel
		.rf_sink_ready           (emif_fm_0_ctrl_amm_0_agent_rsp_fifo_out_ready),                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (emif_fm_0_ctrl_amm_0_agent_rsp_fifo_out_valid),                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (emif_fm_0_ctrl_amm_0_agent_rsp_fifo_out_startofpacket),             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (emif_fm_0_ctrl_amm_0_agent_rsp_fifo_out_endofpacket),               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (emif_fm_0_ctrl_amm_0_agent_rsp_fifo_out_data),                      //   input,  width = 682,                .data
		.rf_source_ready         (emif_fm_0_ctrl_amm_0_agent_rf_source_ready),                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (emif_fm_0_ctrl_amm_0_agent_rf_source_valid),                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (emif_fm_0_ctrl_amm_0_agent_rf_source_startofpacket),                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (emif_fm_0_ctrl_amm_0_agent_rf_source_endofpacket),                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (emif_fm_0_ctrl_amm_0_agent_rf_source_data),                         //  output,  width = 682,                .data
		.rdata_fifo_sink_ready   (emif_fm_0_ctrl_amm_0_agent_rdata_fifo_out_ready),                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (emif_fm_0_ctrl_amm_0_agent_rdata_fifo_out_valid),                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (emif_fm_0_ctrl_amm_0_agent_rdata_fifo_out_data),                    //   input,  width = 514,                .data
		.rdata_fifo_src_ready    (emif_fm_0_ctrl_amm_0_agent_rdata_fifo_src_ready),                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (emif_fm_0_ctrl_amm_0_agent_rdata_fifo_src_valid),                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (emif_fm_0_ctrl_amm_0_agent_rdata_fifo_src_data),                    //  output,  width = 514,                .data
		.m0_response             (2'b00),                                                             // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                              // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                               // (terminated),                               
	);

	platform_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (682),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) emif_fm_0_ctrl_amm_0_agent_rsp_fifo (
		.clk               (emif_fm_0_emif_usr_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (emif_fm_0_ctrl_amm_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (emif_fm_0_ctrl_amm_0_agent_rf_source_data),                                 //   input,  width = 682,        in.data
		.in_valid          (emif_fm_0_ctrl_amm_0_agent_rf_source_valid),                                //   input,    width = 1,          .valid
		.in_ready          (emif_fm_0_ctrl_amm_0_agent_rf_source_ready),                                //  output,    width = 1,          .ready
		.in_startofpacket  (emif_fm_0_ctrl_amm_0_agent_rf_source_startofpacket),                        //   input,    width = 1,          .startofpacket
		.in_endofpacket    (emif_fm_0_ctrl_amm_0_agent_rf_source_endofpacket),                          //   input,    width = 1,          .endofpacket
		.out_data          (emif_fm_0_ctrl_amm_0_agent_rsp_fifo_out_data),                              //  output,  width = 682,       out.data
		.out_valid         (emif_fm_0_ctrl_amm_0_agent_rsp_fifo_out_valid),                             //  output,    width = 1,          .valid
		.out_ready         (emif_fm_0_ctrl_amm_0_agent_rsp_fifo_out_ready),                             //   input,    width = 1,          .ready
		.out_startofpacket (emif_fm_0_ctrl_amm_0_agent_rsp_fifo_out_startofpacket),                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (emif_fm_0_ctrl_amm_0_agent_rsp_fifo_out_endofpacket),                       //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated),                         
		.csr_read          (1'b0),                                                                      // (terminated),                         
		.csr_write         (1'b0),                                                                      // (terminated),                         
		.csr_readdata      (),                                                                          // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated),                         
		.almost_full_data  (),                                                                          // (terminated),                         
		.almost_empty_data (),                                                                          // (terminated),                         
		.in_empty          (1'b0),                                                                      // (terminated),                         
		.out_empty         (),                                                                          // (terminated),                         
		.in_error          (1'b0),                                                                      // (terminated),                         
		.out_error         (),                                                                          // (terminated),                         
		.in_channel        (1'b0),                                                                      // (terminated),                         
		.out_channel       ()                                                                           // (terminated),                         
	);

	platform_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (514),
		.FIFO_DEPTH          (4096),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) emif_fm_0_ctrl_amm_0_agent_rdata_fifo (
		.clk               (emif_fm_0_emif_usr_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (emif_fm_0_ctrl_amm_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (emif_fm_0_ctrl_amm_0_agent_rdata_fifo_src_data),                            //   input,  width = 514,        in.data
		.in_valid          (emif_fm_0_ctrl_amm_0_agent_rdata_fifo_src_valid),                           //   input,    width = 1,          .valid
		.in_ready          (emif_fm_0_ctrl_amm_0_agent_rdata_fifo_src_ready),                           //  output,    width = 1,          .ready
		.out_data          (emif_fm_0_ctrl_amm_0_agent_rdata_fifo_out_data),                            //  output,  width = 514,       out.data
		.out_valid         (emif_fm_0_ctrl_amm_0_agent_rdata_fifo_out_valid),                           //  output,    width = 1,          .valid
		.out_ready         (emif_fm_0_ctrl_amm_0_agent_rdata_fifo_out_ready),                           //   input,    width = 1,          .ready
		.csr_address       (2'b00),                                                                     // (terminated),                         
		.csr_read          (1'b0),                                                                      // (terminated),                         
		.csr_write         (1'b0),                                                                      // (terminated),                         
		.csr_readdata      (),                                                                          // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated),                         
		.almost_full_data  (),                                                                          // (terminated),                         
		.almost_empty_data (),                                                                          // (terminated),                         
		.in_startofpacket  (1'b0),                                                                      // (terminated),                         
		.in_endofpacket    (1'b0),                                                                      // (terminated),                         
		.out_startofpacket (),                                                                          // (terminated),                         
		.out_endofpacket   (),                                                                          // (terminated),                         
		.in_empty          (1'b0),                                                                      // (terminated),                         
		.out_empty         (),                                                                          // (terminated),                         
		.in_error          (1'b0),                                                                      // (terminated),                         
		.out_error         (),                                                                          // (terminated),                         
		.in_channel        (1'b0),                                                                      // (terminated),                         
		.out_channel       ()                                                                           // (terminated),                         
	);

	platform_altera_merlin_router_1921_nc4vkqa router (
		.sink_ready         (uart_to_serializedtl_0_altera_axi4_master_agent_write_cp_ready),                             //  output,    width = 1,      sink.ready
		.sink_valid         (uart_to_serializedtl_0_altera_axi4_master_agent_write_cp_valid),                             //   input,    width = 1,          .valid
		.sink_data          (uart_to_serializedtl_0_altera_axi4_master_agent_write_cp_data),                              //   input,  width = 177,          .data
		.sink_startofpacket (uart_to_serializedtl_0_altera_axi4_master_agent_write_cp_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (uart_to_serializedtl_0_altera_axi4_master_agent_write_cp_endofpacket),                       //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                                                       //   input,    width = 1,       clk.clk
		.reset              (uart_to_serializedtl_0_altera_axi4_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                                           //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                                           //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                                            //  output,  width = 177,          .data
		.src_channel        (router_src_channel),                                                                         //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                                                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                                      //  output,    width = 1,          .endofpacket
	);

	platform_altera_merlin_router_1921_nc4vkqa router_001 (
		.sink_ready         (uart_to_serializedtl_0_altera_axi4_master_agent_read_cp_ready),                              //  output,    width = 1,      sink.ready
		.sink_valid         (uart_to_serializedtl_0_altera_axi4_master_agent_read_cp_valid),                              //   input,    width = 1,          .valid
		.sink_data          (uart_to_serializedtl_0_altera_axi4_master_agent_read_cp_data),                               //   input,  width = 177,          .data
		.sink_startofpacket (uart_to_serializedtl_0_altera_axi4_master_agent_read_cp_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (uart_to_serializedtl_0_altera_axi4_master_agent_read_cp_endofpacket),                        //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                                                       //   input,    width = 1,       clk.clk
		.reset              (uart_to_serializedtl_0_altera_axi4_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                                                       //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                                                       //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                                                        //  output,  width = 177,          .data
		.src_channel        (router_001_src_channel),                                                                     //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                                                  //  output,    width = 1,          .endofpacket
	);

	platform_altera_merlin_router_1921_egixoeq router_002 (
		.sink_ready         (emif_fm_0_ctrl_amm_0_agent_rp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (emif_fm_0_ctrl_amm_0_agent_rp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (emif_fm_0_ctrl_amm_0_agent_rp_data),                                //   input,  width = 681,          .data
		.sink_startofpacket (emif_fm_0_ctrl_amm_0_agent_rp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_fm_0_ctrl_amm_0_agent_rp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (emif_fm_0_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (emif_fm_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                              //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                              //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                               //  output,  width = 681,          .data
		.src_channel        (router_002_src_channel),                                            //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                      //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                         //  output,    width = 1,          .endofpacket
	);

	platform_altera_merlin_burst_adapter_1923_fuuwcvi #(
		.PKT_ADDR_H                (612),
		.PKT_ADDR_L                (576),
		.PKT_BEGIN_BURST           (649),
		.PKT_BYTE_CNT_H            (633),
		.PKT_BYTE_CNT_L            (619),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_BURST_SIZE_H          (644),
		.PKT_BURST_SIZE_L          (642),
		.PKT_BURST_TYPE_H          (646),
		.PKT_BURST_TYPE_L          (645),
		.PKT_BURSTWRAP_H           (641),
		.PKT_BURSTWRAP_L           (634),
		.PKT_TRANS_COMPRESSED_READ (613),
		.PKT_TRANS_WRITE           (615),
		.PKT_TRANS_READ            (616),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (681),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (631),
		.OUT_BURSTWRAP_H           (641),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) emif_fm_0_ctrl_amm_0_burst_adapter (
		.clk                   (emif_fm_0_emif_usr_clk_clk),                                        //   input,    width = 1,       cr0.clk
		.reset                 (emif_fm_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_valid),                  //   input,    width = 1,     sink0.valid
		.sink0_data            (emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_data),                   //   input,  width = 681,          .data
		.sink0_channel         (emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_channel),                //   input,    width = 2,          .channel
		.sink0_startofpacket   (emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink0_ready           (emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_ready),                  //  output,    width = 1,          .ready
		.source0_valid         (emif_fm_0_ctrl_amm_0_burst_adapter_source0_valid),                  //  output,    width = 1,   source0.valid
		.source0_data          (emif_fm_0_ctrl_amm_0_burst_adapter_source0_data),                   //  output,  width = 681,          .data
		.source0_channel       (emif_fm_0_ctrl_amm_0_burst_adapter_source0_channel),                //  output,    width = 2,          .channel
		.source0_startofpacket (emif_fm_0_ctrl_amm_0_burst_adapter_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (emif_fm_0_ctrl_amm_0_burst_adapter_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.source0_ready         (emif_fm_0_ctrl_amm_0_burst_adapter_source0_ready)                   //   input,    width = 1,          .ready
	);

	platform_altera_merlin_demultiplexer_1921_kdgzzxi cmd_demux (
		.clk                (clock_in_out_clk_clk),                                                                       //   input,    width = 1,       clk.clk
		.reset              (uart_to_serializedtl_0_altera_axi4_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                                                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                                                         //   input,    width = 2,          .channel
		.sink_data          (router_src_data),                                                                            //   input,  width = 177,          .data
		.sink_startofpacket (router_src_startofpacket),                                                                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                                                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                                                           //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                                       //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                                       //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                                                        //  output,  width = 177,          .data
		.src0_channel       (cmd_demux_src0_channel),                                                                     //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                                               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                                                  //  output,    width = 1,          .endofpacket
	);

	platform_altera_merlin_demultiplexer_1921_kdgzzxi cmd_demux_001 (
		.clk                (clock_in_out_clk_clk),                                                                       //   input,    width = 1,       clk.clk
		.reset              (uart_to_serializedtl_0_altera_axi4_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                                                       //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                                                     //   input,    width = 2,          .channel
		.sink_data          (router_001_src_data),                                                                        //   input,  width = 177,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                                               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                                                 //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                                                       //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                                                   //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                                                   //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                                                                    //  output,  width = 177,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                                                 //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                                           //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                                              //  output,    width = 1,          .endofpacket
	);

	platform_altera_merlin_multiplexer_1921_pldtn5q cmd_mux (
		.clk                 (emif_fm_0_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset               (emif_fm_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                  //  output,  width = 177,          .data
		.src_channel         (cmd_mux_src_channel),                                               //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_out_ready),                                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_out_valid),                                                 //   input,    width = 1,          .valid
		.sink0_channel       (crosser_out_channel),                                               //   input,    width = 2,          .channel
		.sink0_data          (crosser_out_data),                                                  //   input,  width = 177,          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                                             //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                                             //   input,    width = 1,          .valid
		.sink1_channel       (crosser_001_out_channel),                                           //   input,    width = 2,          .channel
		.sink1_data          (crosser_001_out_data),                                              //   input,  width = 177,          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                                     //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket)                                        //   input,    width = 1,          .endofpacket
	);

	platform_altera_merlin_demultiplexer_1921_rnim2nq rsp_demux (
		.clk                (emif_fm_0_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (emif_fm_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_channel),                //   input,    width = 2,          .channel
		.sink_data          (emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_data),                   //   input,  width = 177,          .data
		.sink_startofpacket (emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                               //  output,  width = 177,          .data
		.src0_channel       (rsp_demux_src0_channel),                                            //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                        //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                              //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                              //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                                               //  output,  width = 177,          .data
		.src1_channel       (rsp_demux_src1_channel),                                            //  output,    width = 2,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                         //  output,    width = 1,          .endofpacket
	);

	platform_altera_merlin_multiplexer_1921_zj6nlqi rsp_mux (
		.clk                 (clock_in_out_clk_clk),                                                                       //   input,    width = 1,       clk.clk
		.reset               (uart_to_serializedtl_0_altera_axi4_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                                          //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                                          //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                                           //  output,  width = 177,          .data
		.src_channel         (rsp_mux_src_channel),                                                                        //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                                                                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                                                                      //   input,    width = 1,          .valid
		.sink0_channel       (crosser_002_out_channel),                                                                    //   input,    width = 2,          .channel
		.sink0_data          (crosser_002_out_data),                                                                       //   input,  width = 177,          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                                                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                                                                 //   input,    width = 1,          .endofpacket
	);

	platform_altera_merlin_multiplexer_1921_zj6nlqi rsp_mux_001 (
		.clk                 (clock_in_out_clk_clk),                                                                       //   input,    width = 1,       clk.clk
		.reset               (uart_to_serializedtl_0_altera_axi4_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                                      //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                                      //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                                                       //  output,  width = 177,          .data
		.src_channel         (rsp_mux_001_src_channel),                                                                    //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                                              //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                                                //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                                                                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                                                                      //   input,    width = 1,          .valid
		.sink0_channel       (crosser_003_out_channel),                                                                    //   input,    width = 2,          .channel
		.sink0_data          (crosser_003_out_data),                                                                       //   input,  width = 177,          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                                                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                                                                 //   input,    width = 1,          .endofpacket
	);

	platform_altera_merlin_width_adapter_1920_igatw7i #(
		.IN_PKT_ADDR_H                 (612),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (633),
		.IN_PKT_BYTE_CNT_L             (619),
		.IN_PKT_TRANS_COMPRESSED_READ  (613),
		.IN_PKT_TRANS_WRITE            (615),
		.IN_PKT_BURSTWRAP_H            (641),
		.IN_PKT_BURSTWRAP_L            (634),
		.IN_PKT_BURST_SIZE_H           (644),
		.IN_PKT_BURST_SIZE_L           (642),
		.IN_PKT_RESPONSE_STATUS_H      (668),
		.IN_PKT_RESPONSE_STATUS_L      (667),
		.IN_PKT_TRANS_EXCLUSIVE        (618),
		.IN_PKT_BURST_TYPE_H           (646),
		.IN_PKT_BURST_TYPE_L           (645),
		.IN_PKT_ORI_BURST_SIZE_L       (669),
		.IN_PKT_ORI_BURST_SIZE_H       (671),
		.IN_ST_DATA_W                  (681),
		.OUT_PKT_ADDR_H                (108),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (129),
		.OUT_PKT_BYTE_CNT_L            (115),
		.OUT_PKT_TRANS_COMPRESSED_READ (109),
		.OUT_PKT_BURST_SIZE_H          (140),
		.OUT_PKT_BURST_SIZE_L          (138),
		.OUT_PKT_RESPONSE_STATUS_H     (164),
		.OUT_PKT_RESPONSE_STATUS_L     (163),
		.OUT_PKT_TRANS_EXCLUSIVE       (114),
		.OUT_PKT_BURST_TYPE_H          (142),
		.OUT_PKT_BURST_TYPE_L          (141),
		.OUT_PKT_ORI_BURST_SIZE_L      (165),
		.OUT_PKT_ORI_BURST_SIZE_H      (167),
		.OUT_ST_DATA_W                 (177),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) emif_fm_0_ctrl_amm_0_rsp_width_adapter (
		.clk                  (emif_fm_0_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (emif_fm_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                                              //   input,    width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                                            //   input,    width = 2,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                                              //  output,    width = 1,          .ready
		.in_data              (router_002_src_data),                                               //   input,  width = 681,          .data
		.out_endofpacket      (emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_data),                   //  output,  width = 177,          .data
		.out_channel          (emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_channel),                //  output,    width = 2,          .channel
		.out_valid            (emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (emif_fm_0_ctrl_amm_0_rsp_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated),                         
	);

	platform_altera_merlin_width_adapter_1920_zdnrufi #(
		.IN_PKT_ADDR_H                 (108),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (129),
		.IN_PKT_BYTE_CNT_L             (115),
		.IN_PKT_TRANS_COMPRESSED_READ  (109),
		.IN_PKT_TRANS_WRITE            (111),
		.IN_PKT_BURSTWRAP_H            (137),
		.IN_PKT_BURSTWRAP_L            (130),
		.IN_PKT_BURST_SIZE_H           (140),
		.IN_PKT_BURST_SIZE_L           (138),
		.IN_PKT_RESPONSE_STATUS_H      (164),
		.IN_PKT_RESPONSE_STATUS_L      (163),
		.IN_PKT_TRANS_EXCLUSIVE        (114),
		.IN_PKT_BURST_TYPE_H           (142),
		.IN_PKT_BURST_TYPE_L           (141),
		.IN_PKT_ORI_BURST_SIZE_L       (165),
		.IN_PKT_ORI_BURST_SIZE_H       (167),
		.IN_ST_DATA_W                  (177),
		.OUT_PKT_ADDR_H                (612),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (633),
		.OUT_PKT_BYTE_CNT_L            (619),
		.OUT_PKT_TRANS_COMPRESSED_READ (613),
		.OUT_PKT_BURST_SIZE_H          (644),
		.OUT_PKT_BURST_SIZE_L          (642),
		.OUT_PKT_RESPONSE_STATUS_H     (668),
		.OUT_PKT_RESPONSE_STATUS_L     (667),
		.OUT_PKT_TRANS_EXCLUSIVE       (618),
		.OUT_PKT_BURST_TYPE_H          (646),
		.OUT_PKT_BURST_TYPE_L          (645),
		.OUT_PKT_ORI_BURST_SIZE_L      (669),
		.OUT_PKT_ORI_BURST_SIZE_H      (671),
		.OUT_ST_DATA_W                 (681),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) emif_fm_0_ctrl_amm_0_cmd_width_adapter (
		.clk                  (emif_fm_0_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (emif_fm_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                 //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                                               //   input,    width = 2,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                 //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                                  //   input,  width = 177,          .data
		.out_endofpacket      (emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_data),                   //  output,  width = 681,          .data
		.out_channel          (emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_channel),                //  output,    width = 2,          .channel
		.out_valid            (emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (emif_fm_0_ctrl_amm_0_cmd_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated),                         
	);

	platform_hs_clk_xer_1932_4earurq #(
		.DATA_WIDTH          (177),
		.BITS_PER_SYMBOL     (177),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser (
		.in_clk            (clock_in_out_clk_clk),                                                      //   input,    width = 1,        in_clk.clk
		.in_reset          (uart_to_serializedtl_0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (emif_fm_0_emif_usr_clk_clk),                                                //   input,    width = 1,       out_clk.clk
		.out_reset         (emif_fm_0_ctrl_amm_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                                      //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src0_valid),                                                      //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                              //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                                //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                                    //   input,    width = 2,              .channel
		.in_data           (cmd_demux_src0_data),                                                       //   input,  width = 177,              .data
		.out_ready         (crosser_out_ready),                                                         //   input,    width = 1,           out.ready
		.out_valid         (crosser_out_valid),                                                         //  output,    width = 1,              .valid
		.out_startofpacket (crosser_out_startofpacket),                                                 //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                                   //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_out_channel),                                                       //  output,    width = 2,              .channel
		.out_data          (crosser_out_data),                                                          //  output,  width = 177,              .data
		.in_empty          (1'b0),                                                                      // (terminated),                             
		.in_error          (1'b0),                                                                      // (terminated),                             
		.out_empty         (),                                                                          // (terminated),                             
		.out_error         ()                                                                           // (terminated),                             
	);

	platform_hs_clk_xer_1932_4earurq #(
		.DATA_WIDTH          (177),
		.BITS_PER_SYMBOL     (177),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_001 (
		.in_clk            (clock_in_out_clk_clk),                                                      //   input,    width = 1,        in_clk.clk
		.in_reset          (uart_to_serializedtl_0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (emif_fm_0_emif_usr_clk_clk),                                                //   input,    width = 1,       out_clk.clk
		.out_reset         (emif_fm_0_ctrl_amm_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                                  //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                                  //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                                          //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                                            //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                                                //   input,    width = 2,              .channel
		.in_data           (cmd_demux_001_src0_data),                                                   //   input,  width = 177,              .data
		.out_ready         (crosser_001_out_ready),                                                     //   input,    width = 1,           out.ready
		.out_valid         (crosser_001_out_valid),                                                     //  output,    width = 1,              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                             //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                               //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_001_out_channel),                                                   //  output,    width = 2,              .channel
		.out_data          (crosser_001_out_data),                                                      //  output,  width = 177,              .data
		.in_empty          (1'b0),                                                                      // (terminated),                             
		.in_error          (1'b0),                                                                      // (terminated),                             
		.out_empty         (),                                                                          // (terminated),                             
		.out_error         ()                                                                           // (terminated),                             
	);

	platform_hs_clk_xer_1932_4earurq #(
		.DATA_WIDTH          (177),
		.BITS_PER_SYMBOL     (177),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_002 (
		.in_clk            (emif_fm_0_emif_usr_clk_clk),                                                //   input,    width = 1,        in_clk.clk
		.in_reset          (emif_fm_0_ctrl_amm_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clock_in_out_clk_clk),                                                      //   input,    width = 1,       out_clk.clk
		.out_reset         (uart_to_serializedtl_0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                                      //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src0_valid),                                                      //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                              //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                                //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                                    //   input,    width = 2,              .channel
		.in_data           (rsp_demux_src0_data),                                                       //   input,  width = 177,              .data
		.out_ready         (crosser_002_out_ready),                                                     //   input,    width = 1,           out.ready
		.out_valid         (crosser_002_out_valid),                                                     //  output,    width = 1,              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                             //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                               //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_002_out_channel),                                                   //  output,    width = 2,              .channel
		.out_data          (crosser_002_out_data),                                                      //  output,  width = 177,              .data
		.in_empty          (1'b0),                                                                      // (terminated),                             
		.in_error          (1'b0),                                                                      // (terminated),                             
		.out_empty         (),                                                                          // (terminated),                             
		.out_error         ()                                                                           // (terminated),                             
	);

	platform_hs_clk_xer_1932_4earurq #(
		.DATA_WIDTH          (177),
		.BITS_PER_SYMBOL     (177),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_003 (
		.in_clk            (emif_fm_0_emif_usr_clk_clk),                                                //   input,    width = 1,        in_clk.clk
		.in_reset          (emif_fm_0_ctrl_amm_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clock_in_out_clk_clk),                                                      //   input,    width = 1,       out_clk.clk
		.out_reset         (uart_to_serializedtl_0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                                      //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src1_valid),                                                      //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                                              //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                                //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                                    //   input,    width = 2,              .channel
		.in_data           (rsp_demux_src1_data),                                                       //   input,  width = 177,              .data
		.out_ready         (crosser_003_out_ready),                                                     //   input,    width = 1,           out.ready
		.out_valid         (crosser_003_out_valid),                                                     //  output,    width = 1,              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                             //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                               //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_003_out_channel),                                                   //  output,    width = 2,              .channel
		.out_data          (crosser_003_out_data),                                                      //  output,  width = 177,              .data
		.in_empty          (1'b0),                                                                      // (terminated),                             
		.in_error          (1'b0),                                                                      // (terminated),                             
		.out_empty         (),                                                                          // (terminated),                             
		.out_error         ()                                                                           // (terminated),                             
	);

endmodule
