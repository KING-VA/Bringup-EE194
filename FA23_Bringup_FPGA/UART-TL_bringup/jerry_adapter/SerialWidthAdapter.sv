// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module SerialWidthAdapter(
  input         clock,
                reset,
                io_narrow_in_valid,
  input  [7:0]  io_narrow_in_bits,
  input         io_narrow_out_ready,
                io_wide_in_valid,
  input  [31:0] io_wide_in_bits,
  input         io_wide_out_ready,
  output        io_narrow_in_ready,
                io_narrow_out_valid,
  output [7:0]  io_narrow_out_bits,
  output        io_wide_in_ready,
                io_wide_out_valid,
  output [31:0] io_wide_out_bits
);

  reg  [1:0]  narrow_beats;	// @[SerialAdapter.scala:609:29]
  reg  [7:0]  narrow_data_0;	// @[SerialAdapter.scala:611:24]
  reg  [7:0]  narrow_data_1;	// @[SerialAdapter.scala:611:24]
  reg  [7:0]  narrow_data_2;	// @[SerialAdapter.scala:611:24]
  reg  [1:0]  wide_beats;	// @[SerialAdapter.scala:613:27]
  wire        _io_narrow_in_ready_output = ~(&narrow_beats) | io_wide_out_ready;	// @[SerialAdapter.scala:609:29, :610:39, :616:28]
  wire [31:0] _io_narrow_out_bits_T_1 = io_wide_in_bits >> {27'h0, wide_beats, 3'h0};	// @[SerialAdapter.scala:613:27, :625:{41,56}]
  wire        _T = _io_narrow_in_ready_output & io_narrow_in_valid;	// @[Decoupled.scala:51:35, SerialAdapter.scala:616:28]
  always @(posedge clock) begin
    if (reset) begin
      narrow_beats <= 2'h0;	// @[SerialAdapter.scala:609:29]
      wide_beats <= 2'h0;	// @[SerialAdapter.scala:609:29, :613:27]
    end
    else begin
      if (_T) begin	// @[Decoupled.scala:51:35]
        if (&narrow_beats)	// @[SerialAdapter.scala:609:29, :610:39]
          narrow_beats <= 2'h0;	// @[SerialAdapter.scala:609:29]
        else	// @[SerialAdapter.scala:610:39]
          narrow_beats <= narrow_beats + 2'h1;	// @[SerialAdapter.scala:609:29, :618:61, :619:58]
      end
      if (io_narrow_out_ready & io_wide_in_valid) begin	// @[Decoupled.scala:51:35]
        if (&wide_beats)	// @[SerialAdapter.scala:613:27, :614:35]
          wide_beats <= 2'h0;	// @[SerialAdapter.scala:609:29, :613:27]
        else	// @[SerialAdapter.scala:614:35]
          wide_beats <= wide_beats + 2'h1;	// @[SerialAdapter.scala:613:27, :619:58, :627:55]
      end
    end
    if (_T & ~(&narrow_beats) & narrow_beats == 2'h0)	// @[Decoupled.scala:51:35, SerialAdapter.scala:609:29, :610:39, :611:24, :617:30, :619:{11,30,58}]
      narrow_data_0 <= io_narrow_in_bits;	// @[SerialAdapter.scala:611:24]
    if (_T & ~(&narrow_beats) & narrow_beats == 2'h1)	// @[Decoupled.scala:51:35, SerialAdapter.scala:609:29, :610:39, :611:24, :617:30, :619:{11,30,58}]
      narrow_data_1 <= io_narrow_in_bits;	// @[SerialAdapter.scala:611:24]
    if (_T & ~(&narrow_beats) & narrow_beats == 2'h2)	// @[Decoupled.scala:51:35, SerialAdapter.scala:609:29, :610:39, :611:24, :617:30, :619:{11,30,58}]
      narrow_data_2 <= io_narrow_in_bits;	// @[SerialAdapter.scala:611:24]
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        narrow_beats = _RANDOM_0[1:0];	// @[SerialAdapter.scala:609:29]
        narrow_data_0 = _RANDOM_0[9:2];	// @[SerialAdapter.scala:609:29, :611:24]
        narrow_data_1 = _RANDOM_0[17:10];	// @[SerialAdapter.scala:609:29, :611:24]
        narrow_data_2 = _RANDOM_0[25:18];	// @[SerialAdapter.scala:609:29, :611:24]
        wide_beats = _RANDOM_0[27:26];	// @[SerialAdapter.scala:609:29, :613:27]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_narrow_in_ready = _io_narrow_in_ready_output;	// @[SerialAdapter.scala:616:28]
  assign io_narrow_out_valid = io_wide_in_valid;
  assign io_narrow_out_bits = _io_narrow_out_bits_T_1[7:0];	// @[SerialAdapter.scala:625:{22,41}]
  assign io_wide_in_ready = (&wide_beats) & io_narrow_out_ready;	// @[SerialAdapter.scala:613:27, :614:35, :629:38]
  assign io_wide_out_valid = (&narrow_beats) & io_narrow_in_valid;	// @[SerialAdapter.scala:609:29, :610:39, :621:41]
  assign io_wide_out_bits = {io_narrow_in_bits, narrow_data_2, narrow_data_1, narrow_data_0};	// @[Cat.scala:33:92, SerialAdapter.scala:611:24]
endmodule

