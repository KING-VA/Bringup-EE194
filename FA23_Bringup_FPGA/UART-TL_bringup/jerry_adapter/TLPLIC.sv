// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module TLPLIC(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [1:0]  auto_in_a_bits_size,
  input  [7:0]  auto_in_a_bits_source,
  input  [27:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_size,
  output [7:0]  auto_in_d_bits_source
);

  wire        _out_rofireMux_T_1;	// @[RegisterRouter.scala:82:24]
  wire        out_backSel_6;	// @[RegisterRouter.scala:82:24]
  wire        out_backSel_4;	// @[RegisterRouter.scala:82:24]
  wire        claimer_0;	// @[RegisterRouter.scala:82:24]
  wire        claimer_1;	// @[RegisterRouter.scala:82:24]
  wire        _out_back_io_deq_valid;	// @[Decoupled.scala:375:21]
  wire        _out_back_io_deq_bits_read;	// @[Decoupled.scala:375:21]
  wire [22:0] _out_back_io_deq_bits_index;	// @[Decoupled.scala:375:21]
  wire [7:0]  _out_back_io_deq_bits_mask;	// @[Decoupled.scala:375:21]
  `ifndef SYNTHESIS	// @[Plic.scala:245:11]
    always @(posedge clock) begin	// @[Plic.scala:245:11]
      if (~reset & (|({claimer_1, claimer_0} & {claimer_1, claimer_0} - 2'h1))) begin	// @[Plic.scala:245:{11,21,28,46,54}, RegisterRouter.scala:82:24]
        if (`ASSERT_VERBOSE_COND_)	// @[Plic.scala:245:11]
          $error("Assertion failed\n    at Plic.scala:245 assert((claimer.asUInt & (claimer.asUInt - 1.U)) === 0.U) // One-Hot\n");	// @[Plic.scala:245:11]
        if (`STOP_COND_)	// @[Plic.scala:245:11]
          $fatal;	// @[Plic.scala:245:11]
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _out_T_9 = {_out_back_io_deq_bits_index[22:19], _out_back_io_deq_bits_index[17:10], _out_back_io_deq_bits_index[8:5], _out_back_io_deq_bits_index[3:0]} == 20'h0;	// @[Decoupled.scala:375:21, RegisterRouter.scala:82:24]
  wire [31:0] _out_womask_T_7 = {{8{_out_back_io_deq_bits_mask[7]}}, {8{_out_back_io_deq_bits_mask[6]}}, {8{_out_back_io_deq_bits_mask[5]}}, {8{_out_back_io_deq_bits_mask[4]}}};	// @[Bitwise.scala:28:17, :77:12, Decoupled.scala:375:21, RegisterRouter.scala:82:24]
  assign claimer_1 = _out_rofireMux_T_1 & out_backSel_6 & _out_T_9 & (|_out_womask_T_7);	// @[RegisterRouter.scala:82:24]
  assign claimer_0 = _out_rofireMux_T_1 & out_backSel_4 & _out_T_9 & (|_out_womask_T_7);	// @[RegisterRouter.scala:82:24]
  wire [2:0]  _GEN = {_out_back_io_deq_bits_index[18], _out_back_io_deq_bits_index[9], _out_back_io_deq_bits_index[4]};	// @[Decoupled.scala:375:21, OneHot.scala:57:35, RegisterRouter.scala:82:24]
  assign out_backSel_4 = _GEN == 3'h4;	// @[OneHot.scala:57:35, RegisterRouter.scala:71:36, :82:24]
  assign out_backSel_6 = _GEN == 3'h6;	// @[OneHot.scala:57:35, RegisterRouter.scala:82:24]
  assign _out_rofireMux_T_1 = _out_back_io_deq_valid & auto_in_d_ready & _out_back_io_deq_bits_read;	// @[Decoupled.scala:375:21, RegisterRouter.scala:82:24]
  Queue_28 out_back (	// @[Decoupled.scala:375:21]
    .clock                               (clock),
    .reset                               (reset),
    .io_enq_valid                        (auto_in_a_valid),
    .io_enq_bits_read                    (auto_in_a_bits_opcode == 3'h4),	// @[RegisterRouter.scala:71:36]
    .io_enq_bits_index                   (auto_in_a_bits_address[25:3]),	// @[Edges.scala:191:34, RegisterRouter.scala:72:19]
    .io_enq_bits_data                    (auto_in_a_bits_data),
    .io_enq_bits_mask                    (auto_in_a_bits_mask),
    .io_enq_bits_extra_tlrr_extra_source (auto_in_a_bits_source),
    .io_enq_bits_extra_tlrr_extra_size   (auto_in_a_bits_size),
    .io_deq_ready                        (auto_in_d_ready),
    .io_enq_ready                        (auto_in_a_ready),
    .io_deq_valid                        (_out_back_io_deq_valid),
    .io_deq_bits_read                    (_out_back_io_deq_bits_read),
    .io_deq_bits_index                   (_out_back_io_deq_bits_index),
    .io_deq_bits_mask                    (_out_back_io_deq_bits_mask),
    .io_deq_bits_extra_tlrr_extra_source (auto_in_d_bits_source),
    .io_deq_bits_extra_tlrr_extra_size   (auto_in_d_bits_size)
  );
  assign auto_in_d_valid = _out_back_io_deq_valid;	// @[Decoupled.scala:375:21]
  assign auto_in_d_bits_opcode = {2'h0, _out_back_io_deq_bits_read};	// @[Decoupled.scala:375:21, Plic.scala:245:46, RegisterRouter.scala:97:19]
endmodule

